{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next1.png","path":"images/favicon-16x16-next1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next1.png","path":"images/favicon-32x32-next1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ac2152efd32a1677750618deca374bafced07836","modified":1520908857000},{"_id":"source/_posts/.DS_Store","hash":"b58975c86c58c8011ba711873324acb2651d9efa","modified":1520575870000},{"_id":"source/_posts/30个你必须记住的CSS选择符.md","hash":"25431cc70db31eddbdd7b7864b5bda242a0243c9","modified":1517974525000},{"_id":"source/_posts/CSS清除浮动方法汇总.md","hash":"96d39a46e47be457a1a98da5e80543ed5c26f7de","modified":1518148274000},{"_id":"source/_posts/RN开发之调用WebView爬坑记.md","hash":"f65c61809512143356848a291f02c1c76f88b8e7","modified":1532417805000},{"_id":"source/_posts/Android-Studio-gradle插件由2-2-3升级到3-1-0.md","hash":"86c3fc23fbbfd2e2fbd4177206e6e40ffa211df1","modified":1532602191000},{"_id":"source/_posts/React-Native的组件通信方式.md","hash":"3a053781426c74979cfb183613ff651e8b56a820","modified":1533087700000},{"_id":"source/_posts/Linux实用命令.md","hash":"8fb411c3d6545604b11c6ba0b1cb8e58a0c31544","modified":1534817959000},{"_id":"source/404/index.md","hash":"5e7f170b52cc6141f4c391886c3d53114c1649c6","modified":1515115227000},{"_id":"source/_posts/Vim命令笔记.md","hash":"c910785b9627feeb7c42119420bdbdb9f86f3241","modified":1517982200000},{"_id":"source/_posts/Xcode无证书打包.md","hash":"954c60a77f3049635a4a6f987ac310a37f5ae622","modified":1533028419000},{"_id":"source/_posts/Webpack从入门到上手.md","hash":"ea729d58b6ca7b1a804fc59cf0ee3ad4638a2033","modified":1518156487000},{"_id":"source/_posts/exports、module-exports-和-export、export-default-之间的关系与区别.md","hash":"6a0b75fd18ae50493c82ffc95e812f5a6370d1ff","modified":1518146064000},{"_id":"source/_posts/hello-hexo.md","hash":"da5de8907a774a14f04a7cddefacb2c8fb1dbb8a","modified":1517918144000},{"_id":"source/_posts/dva入门开发的小总结.md","hash":"b16bd3242c0ef81d72342de44d37226ad1f3685e","modified":1517974086000},{"_id":"source/_posts/使用PropTypes进行类型检查.md","hash":"c5292412e4c792d8792cf664eb2c1a445bdca12a","modified":1518000922000},{"_id":"source/_posts/前端常见跨域解决方案.md","hash":"6fa42cbcddf5c1973d022ad46081eb041173d136","modified":1520577474000},{"_id":"source/_posts/深入分析javascript中的错误处理机制.md","hash":"8e1fc5fc8772d59c7d9532138abe69da35cd3e88","modified":1519349976000},{"_id":"source/_posts/需要了解的几个最佳ES6特性.md","hash":"a61b7b14bbd635cc9b354ab9916f6883b0e26c6c","modified":1518057443000},{"_id":"source/_posts/dva的几个核心概念.md","hash":"c46446e588269a042856e8e58807ce118e856c03","modified":1517982279000},{"_id":"source/tags/index.md","hash":"dff29ebba545057f4a2127d6d6379a6aefca3db6","modified":1515063658000},{"_id":"source/categories/index.md","hash":"52b7fd8d61ca0a6efa8c9db26872ace37c78a91c","modified":1515063638000},{"_id":"source/_posts/redux-saga的入门基础.md","hash":"dde25c1c4a3add582f325fada42166fa5fcd80a4","modified":1530165480000},{"_id":"source/about/index.md","hash":"4321285e36305bfe0bcaabc68567373f59bab04e","modified":1533087263000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1515054271000},{"_id":"themes/next/.DS_Store","hash":"d6c6a8483cd42d0dea7fdf4e7f7ea9fe319daa3f","modified":1515374783000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1515054271000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1515054271000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1515211128000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1515054271000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1515054271000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1515054271000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1515054271000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1515054271000},{"_id":"themes/next/README.cn.md","hash":"5be5365741d758cc7bc395e32671ab010d138f9d","modified":1515054271000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1515054271000},{"_id":"themes/next/README.md","hash":"e008b4df26619b33147336e2a4d2ea376c07bb47","modified":1515054271000},{"_id":"themes/next/_config.yml","hash":"f51bc6fb42a281122aa360af5b3e07195530fbbd","modified":1520578527000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1515054271000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1515054271000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1515054271000},{"_id":"source/_posts/Webpack从入门到上手/Grunt和Gulp的工作流程.png","hash":"4fe8145513b0fe5c2eaeb814974abda6d829dc1d","modified":1518083609000},{"_id":"source/_posts/Webpack从入门到上手/build文件夹.png","hash":"426438fe1f0b49e2fa6ec5e70065e95120db863f","modified":1518083864000},{"_id":"source/_posts/Webpack从入门到上手/htmlResult1.png","hash":"df90163cb436b0283322adfbaf6c6d54123cd75f","modified":1518083661000},{"_id":"source/_posts/Webpack从入门到上手/Webpack工作方式.png","hash":"206364a58a4d7bdde20ae53c9241fe9ab91c79f1","modified":1518083626000},{"_id":"source/_posts/Webpack从入门到上手/localhost-8080.png","hash":"8fcf7fbc3212038dafd85cf75ee8d7adfc25ee3f","modified":1518083808000},{"_id":"source/_posts/Webpack从入门到上手/带hash值的js名.png","hash":"5725d889de9f013a09779838f302074d70857158","modified":1518083885000},{"_id":"source/_posts/Webpack从入门到上手/版权所有.png","hash":"2c7f4c7d9d78b9ca5cc85a7a480e7beaca207051","modified":1518083855000},{"_id":"source/_posts/Webpack从入门到上手/项目结构.png","hash":"bf0d4d9fabe19f0e68c602e1577b37ab5905db16","modified":1518083640000},{"_id":"source/_posts/Webpack从入门到上手/应用了css module后的样式.png","hash":"f4011ed17ea393f1964ae38b57d1f261b4cb76c4","modified":1518083839000},{"_id":"source/_posts/exports、module-exports-和-export、export-default-之间的关系与区别/内存结构示意图.png","hash":"329154731d2009c1aafcabe6b998b75c01fe346f","modified":1518145739000},{"_id":"source/_posts/Xcode无证书打包/2.png","hash":"d05c115dbf5429f6c3ecf1e3ebe266f48ac16e7e","modified":1533026095000},{"_id":"source/_posts/Xcode无证书打包/4.png","hash":"f7326ab9ef199f26325eb5bb43df99252e5c8a36","modified":1533026197000},{"_id":"source/_posts/Xcode无证书打包/3.png","hash":"91d16252deca97c8a6cc331fc0b92cc176dd6630","modified":1533026151000},{"_id":"source/_posts/Webpack从入门到上手/使用npm start 打包代码.png","hash":"84a5f8532f566b435b20c18e29d44635f341a554","modified":1518083688000},{"_id":"source/_posts/Webpack从入门到上手/使用命令行打包.png","hash":"16e6489a370d0c57cfd255ecaa924fa46884bf1f","modified":1518083652000},{"_id":"source/_posts/dva的几个核心概念/dvaeightconcepts.png","hash":"842116a4424c24e6b9146071b39860d6583b11a2","modified":1516700180000},{"_id":"source/_posts/Xcode无证书打包/5.png","hash":"67a1b56c4f31d7e602f42f81ba756f99379ee8e5","modified":1533027837000},{"_id":"source/_posts/Webpack从入门到上手/配合配置文件进行打包.png","hash":"ec43479adcbfe339644eb0a3e3b063b5ad21ed7f","modified":1518083673000},{"_id":"source/_posts/前端常见跨域解决方案/常见跨域场景.png","hash":"04e758d052fe71d02e466880b037d8053ff8b5a2","modified":1520565631000},{"_id":"source/_posts/Xcode无证书打包/1.png","hash":"5819d056f5b37f905603a8115f8c9da5194f6cf8","modified":1533026055000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1515054271000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515053633000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1515054271000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1515054271000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1515054271000},{"_id":"themes/next/.git/packed-refs","hash":"dfe8009e72774dab9b854ff143156a046c53d9f6","modified":1515054271000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1515054271000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1515054271000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1515065291000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1515054271000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1515054271000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1515054271000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1515054271000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1515054271000},{"_id":"themes/next/scripts/.DS_Store","hash":"8f265d8cb9ab363e6e8d8b55ff103965067d0a1a","modified":1515374739000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1515054271000},{"_id":"themes/next/.git/index","hash":"cf3144776e356955e58585c168eb9b733a61bdd0","modified":1534818384000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1515054271000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1515054271000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1515054271000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1515054271000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1515054271000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1515065300000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1515054271000},{"_id":"source/_posts/Webpack从入门到上手/压缩后的代码.png","hash":"d718cb014647b04fb5406f964533dfe4df0362b0","modified":1518083877000},{"_id":"themes/next/layout/.DS_Store","hash":"5d79b28cfa63b981e8cbaec0d8fd4ee713b171c9","modified":1515374739000},{"_id":"themes/next/source/.DS_Store","hash":"0ebcbc5f4996571e9b6ab9f9fe496dc537cab6ad","modified":1515374783000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1515054271000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1515054271000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1515054271000},{"_id":"themes/next/layout/post.swig","hash":"2708e7c5b88c6aefb97b5893a624df0cc42ac515","modified":1515142678000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1515054271000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1515054271000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1515054271000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1515054271000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1515054271000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1515054271000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1515054271000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1515054271000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"source/_posts/Webpack从入门到上手/开启本地服务器.png","hash":"fe86b7db11821ff6400ce57e08548092c39723ce","modified":1518083796000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1515054271000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1515054271000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1515054271000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515053633000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515053633000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515053633000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515053633000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515053633000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515053633000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1515053633000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1515053633000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515053633000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1515053633000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515053633000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1515054271000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1515054271000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1515054271000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1515054271000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1515054271000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1515054271000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1515054271000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1515054271000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1515054271000},{"_id":"themes/next/.git/logs/HEAD","hash":"1305480622068c3c81d2319d18e3ce17cf7130e5","modified":1515054271000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515054271000},{"_id":"themes/next/source/images/avatar.png","hash":"719e5e18b757f7aaee992b0ca337c335549c24f8","modified":1515066796000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1515054271000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1515054271000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1515054271000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1515054271000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1515054271000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1515054271000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1515054271000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1515054271000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1515054271000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1515054271000},{"_id":"themes/next/source/images/favicon-16x16-next1.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1515054271000},{"_id":"themes/next/source/images/favicon-32x32-next1.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1515054271000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"3570335dfdaff212cd96001f522f98d7bf759b1c","modified":1515120844000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1515054271000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1515054271000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515054271000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1515054271000},{"_id":"source/_posts/Vim命令笔记/vim快捷操作.png","hash":"956b1bcccc491701918663ddc4874acd76174475","modified":1494982933000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515054271000},{"_id":"themes/next/source/lib/.DS_Store","hash":"95cc6f282aa6f4cd43e2719cdfd8c7670b072368","modified":1515374739000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515054271000},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515120915000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1515054271000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1515054271000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1515054271000},{"_id":"themes/next/layout/_partials/header.swig","hash":"d4acc0c9e7ae045bdd179958befcfdd151b5b288","modified":1515115387000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1515054271000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1515054271000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515054271000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515054271000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1515054271000},{"_id":"themes/next/layout/_macro/post.swig","hash":"137a74f11c3bd647c5e96977226504739d34c461","modified":1515064750000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1515054271000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1515054271000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1515054271000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1515054271000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1515054271000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"1570b5816101ce0a20d4087b0eed60a0bbc48cce","modified":1515064620000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1515054271000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1515054271000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1515054271000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1515054271000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1515054271000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1515054271000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1515054271000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1515054271000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1515054271000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515054271000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1515054271000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1515054271000},{"_id":"themes/next/.git/refs/heads/master","hash":"87a4f55ff395b4fe825e166c41c1e92c6f5dc18f","modified":1515054271000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1515054271000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1515054271000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1515054271000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1515054271000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1515054271000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1515054271000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1515054271000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1515054271000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1515054271000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1515054271000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1515054271000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1515054271000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1515054271000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1515054271000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1515054271000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1515054271000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1515054271000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1515054271000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515054271000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1515054271000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1515054271000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1515054271000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1515054271000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1515054271000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1515054271000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1515054271000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1515054271000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1515054271000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1515054271000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1515054271000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1515054271000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1515054271000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1515054271000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1515054271000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1515054271000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1515054271000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1515054271000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515054271000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1515054271000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1515054271000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515054271000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1515054271000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1515054271000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1515054271000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1515054271000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1515054271000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1515054271000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1515054271000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1515054271000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1515054271000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1515054271000},{"_id":"themes/next/layout/_partials/share/sharesdk.swig","hash":"f58e18925643e5c77377c28659ddb582d28e4565","modified":1515149125000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1515054271000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1515054271000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1515054271000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1515054271000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1515054271000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1515054271000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1515054271000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1515054271000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1515054271000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515054271000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515054271000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"1305480622068c3c81d2319d18e3ce17cf7130e5","modified":1515054271000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1515054271000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515054271000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1515054271000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1515054271000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1515054271000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1515054271000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1515054271000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1515054271000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1515054271000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1515054271000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1515054271000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1515054271000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1515054271000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1515054271000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1515054271000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515054271000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1515054271000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"1305480622068c3c81d2319d18e3ce17cf7130e5","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"1cd3dee2dbe1ed30ec24ebc2df3f255f0388c178","modified":1515115565000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"5045ed56b50b49826d43f459588ea56922fb4628","modified":1515064397000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"316789385aaac5cc9d7f66816874454a601aba65","modified":1515062992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1515054271000},{"_id":"themes/next/source/css/_common/components/third-party/sharesdk.styl","hash":"e53b3b04e5bab9955a4a1e95a18469908570ccd9","modified":1515150087000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"b3642f369b11eed8159193f378053bbb58cf658a","modified":1515149489000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515054271000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1515054271000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515054271000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515054271000},{"_id":"themes/next/.git/objects/pack/pack-d9ba63f0bf74d1eb862ffa9cb8660f457e991b53.idx","hash":"3725fa2e7b0bd4d35d35900eb92fca1fc8482966","modified":1515054271000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1515054271000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1515054271000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1515054271000},{"_id":"source/_posts/dva的几个核心概念/dvaIntroduce.jpg","hash":"7f87c9391302dcd142bd8e698af887f5c787e92b","modified":1515463190000},{"_id":"themes/next/.git/objects/pack/pack-d9ba63f0bf74d1eb862ffa9cb8660f457e991b53.pack","hash":"cff20867f63a612e438dc4fb0dcd20bea8b4cff4","modified":1515054271000},{"_id":"public/sitemap.xml","hash":"fdcd45f7e4d85b949faa3ff1d845121b18a5743b","modified":1534818719021},{"_id":"public/404.html","hash":"34188e5822c06bf3f3e3c407ed44be352d4c9a5d","modified":1534818719064},{"_id":"public/tags/index.html","hash":"21a5aad5efeac67a66cdb8a7e32cb00435c55886","modified":1534818719064},{"_id":"public/categories/index.html","hash":"280c575802538be604d696f39dfa9c0dc63a9c4d","modified":1534818719064},{"_id":"public/archives/2017/page/2/index.html","hash":"71cf900426847466f7484abf85458e546317c209","modified":1534818719064},{"_id":"public/archives/2017/06/index.html","hash":"386fa492d26212fe70b29e771df567a1f3118f76","modified":1534818719064},{"_id":"public/archives/2017/07/index.html","hash":"62c63ebed5abac1234701b367f90819179bf2b47","modified":1534818719064},{"_id":"public/archives/2017/08/index.html","hash":"5ae3a21f8846236845fdf51c1e727bcde3a82a44","modified":1534818719064},{"_id":"public/archives/2017/09/index.html","hash":"d7b4dbe96244955dff4707e4bf1865c36516a19e","modified":1534818719065},{"_id":"public/archives/2017/10/index.html","hash":"92f411232ac09dc823c3a38c7739272d5c9bde87","modified":1534818719065},{"_id":"public/archives/2017/11/index.html","hash":"76d4c1c506e15be40dd0add6a245d4f8fba5eaf4","modified":1534818719065},{"_id":"public/archives/2017/12/index.html","hash":"38be39d72c6bb8f3584f2753275856222299d069","modified":1534818719065},{"_id":"public/archives/2018/01/index.html","hash":"a75aa08116b8db4faefc3c4fb4d24f808f7a9383","modified":1534818719065},{"_id":"public/archives/2018/03/index.html","hash":"5e8f19c0fee32e359ad0084dab1bb885abb889c5","modified":1534818719065},{"_id":"public/archives/2018/04/index.html","hash":"e62d23a43f7f2676aef76f7fce9663da7a405644","modified":1534818719065},{"_id":"public/archives/2018/06/index.html","hash":"455555bde1dfc267d473a5c75611b6043134f034","modified":1534818719065},{"_id":"public/archives/2018/07/index.html","hash":"029192e954aff1f490c54189d27caa82fcd79122","modified":1534818719065},{"_id":"public/categories/前端/index.html","hash":"dfd62155da9513a0011074a46e171e0efcf2899c","modified":1534818719065},{"_id":"public/categories/React-Native/index.html","hash":"ac2fb9fab253f6f9642e744506854e123262f591","modified":1534818719065},{"_id":"public/categories/Linux/index.html","hash":"9de155c055b8ee4c2939664eae235d2271271abd","modified":1534818719066},{"_id":"public/categories/Vim/index.html","hash":"b679371bfae6731f632606f0ef2adfded5f42f58","modified":1534818719066},{"_id":"public/categories/Webpack/index.html","hash":"6fad82211ef4f2110325eb6b47f0da4c5f5e728b","modified":1534818719066},{"_id":"public/categories/模块化/index.html","hash":"04132fde5356b3770a8e6b788553161b5e570f17","modified":1534818719066},{"_id":"public/categories/框架/index.html","hash":"9272ef6b24733753b1a6e04bd90e1659fdba2ddb","modified":1534818719066},{"_id":"public/categories/React/index.html","hash":"8d1c214ad531e87c0a37ac11feea206746a7e9b3","modified":1534818719066},{"_id":"public/categories/JavaScript/index.html","hash":"844333710f2039e4789874255d409037d9c15e4a","modified":1534818719066},{"_id":"public/tags/CSS/index.html","hash":"6269855280a9a094c67dd1e5f3ca91732f4bcc0b","modified":1534818719066},{"_id":"public/tags/爬坑/index.html","hash":"a3fcab511f05a62de16a4b68daf443c6de61bbc3","modified":1534818719066},{"_id":"public/tags/React-Native/index.html","hash":"e0cbd5801dccf05147bc2857e143db6ac4e933f5","modified":1534818719066},{"_id":"public/tags/Linux/index.html","hash":"47ac42c3cd2a4a3c293c34651a178bba639942c2","modified":1534818719066},{"_id":"public/tags/Vim/index.html","hash":"60c32a2adf90c8646a33124d073ae1890b2a11f5","modified":1534818719066},{"_id":"public/tags/Webpack/index.html","hash":"06bfbbd42e88dc3ed2642f8dc490470e465b13f2","modified":1534818719066},{"_id":"public/tags/模块化/index.html","hash":"4fc3d34f4e7f3b6c20a5e21052638036cdecc731","modified":1534818719067},{"_id":"public/tags/Hexo/index.html","hash":"9c658294c25b6ef2838eeb8b80a53d98fab0977d","modified":1534818719067},{"_id":"public/tags/Dva/index.html","hash":"81f5ace1706f00f9426fe4b2e52aa9b161eabdf1","modified":1534818719067},{"_id":"public/tags/PropTypes/index.html","hash":"44abebd8fe27b558293ab47ddcc396482bd14fa0","modified":1534818719067},{"_id":"public/tags/跨域/index.html","hash":"51d290fa62f81707c2196b1808894c0909745e30","modified":1534818719067},{"_id":"public/tags/JavaScript/index.html","hash":"5813b25dd943f8024c01dd9fb52d8000258ea478","modified":1534818719067},{"_id":"public/tags/ES6/index.html","hash":"124fd5ea68e6f1c4a9b0c52afa347ae6536400da","modified":1534818719067},{"_id":"public/tags/Redux/index.html","hash":"d4d81e47241aca3e81962427ec2831483e21b9f5","modified":1534818719067},{"_id":"public/about/index.html","hash":"3d2d0e9d657219b3022fcf86250108dca6f869d0","modified":1534818719067},{"_id":"public/2018/07/13/Xcode无证书打包/index.html","hash":"da500d6f0c3fe44e763f2fecea0336827a209df1","modified":1534818719068},{"_id":"public/2018/07/07/Android-Studio-gradle插件由2-2-3升级到3-1-0/index.html","hash":"dcd597870ceb6546b02957f1a161a6b5632ab11c","modified":1534818719068},{"_id":"public/2018/06/24/RN开发之调用WebView爬坑记/index.html","hash":"5eb12d1a12369b39bcd1fa3a5e00bb8d5498e0d7","modified":1534818719068},{"_id":"public/2018/04/04/redux-saga的入门基础/index.html","hash":"44b784772c9e4c4ce0320c75c6138349ebe951a3","modified":1534818719068},{"_id":"public/2018/03/08/前端常见跨域解决方案/index.html","hash":"b68b18f7a8bae921f438bd2d400d67def0e4f4fe","modified":1534818719068},{"_id":"public/2018/01/06/dva的几个核心概念/index.html","hash":"8318e67925b393482f877ecfe8cb9faec315ec0b","modified":1534818719068},{"_id":"public/2018/01/05/dva入门开发的小总结/index.html","hash":"ad67c074a7371e414a3818b6774d9775d1a8c215","modified":1534818719068},{"_id":"public/2017/12/18/Vim命令笔记/index.html","hash":"085a743ab315542727c02ba91d92cf20db99d5fc","modified":1534818719068},{"_id":"public/2017/11/23/深入分析javascript中的错误处理机制/index.html","hash":"21e21f3f0620b6101c7d46a0107ded8692824a75","modified":1534818719068},{"_id":"public/2017/11/09/Webpack从入门到上手/index.html","hash":"b332a5d7afe04cb331b1706167e86b5b27b96a48","modified":1534818719068},{"_id":"public/2017/10/23/Linux实用命令/index.html","hash":"14f8e14ba2840bdc5cc3f3eb28dc3c882863565c","modified":1534818719068},{"_id":"public/2017/10/18/exports、module-exports-和-export、export-default-之间的关系与区别/index.html","hash":"8e2d5f41d7236bc6fc2648b1642cca134bc08356","modified":1534818719068},{"_id":"public/2017/10/12/使用PropTypes进行类型检查/index.html","hash":"0f3fe34854df050d0b65b26cd7f725891c57e586","modified":1534818719068},{"_id":"public/2017/09/28/需要了解的几个最佳ES6特性/index.html","hash":"d4881f90d4c109cefbc0cbee38ca53e158ae2861","modified":1534818719069},{"_id":"public/2017/08/05/30个你必须记住的CSS选择符/index.html","hash":"12886e1c8931c28ea9a1e9cf7f6a239a8e1f270b","modified":1534818719069},{"_id":"public/2017/07/06/CSS清除浮动方法汇总/index.html","hash":"f0cd04e4404b0b6f7117edd55099af4505339719","modified":1534818719069},{"_id":"public/2017/07/02/React-Native的组件通信方式/index.html","hash":"2f3e7bf41045065883a5ff8877f11ce8f1e5e241","modified":1534818719069},{"_id":"public/2017/06/08/hello-hexo/index.html","hash":"723630a94a92b3a1fb78bf7a78739c3f8a4bd744","modified":1534818719069},{"_id":"public/archives/index.html","hash":"7ed21d0cb8edb6f4d74d4bc21a411a1a12da41e4","modified":1534818719069},{"_id":"public/archives/page/2/index.html","hash":"75c026795aa47f15943ef2eba2085b68137f851c","modified":1534818719069},{"_id":"public/archives/2017/index.html","hash":"4fdffc50cb062ebe18c42a3e71066ddb364b96f9","modified":1534818719069},{"_id":"public/archives/2018/index.html","hash":"fb677a0eb89195884751525e60b9f0bb924a24de","modified":1534818719069},{"_id":"public/index.html","hash":"004202a1603c464b3a73f87c8de02bf40672dfbb","modified":1534818719069},{"_id":"public/page/2/index.html","hash":"247c3de9f1bec07d0a2822f928d558b0fd10d28c","modified":1534818719069},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534818719270},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534818719270},{"_id":"public/images/avatar.png","hash":"719e5e18b757f7aaee992b0ca337c335549c24f8","modified":1534818719270},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534818719270},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534818719270},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534818719271},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534818719271},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534818719271},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534818719271},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534818719271},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534818719271},{"_id":"public/images/favicon-16x16-next1.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534818719271},{"_id":"public/images/favicon-32x32-next.png","hash":"3570335dfdaff212cd96001f522f98d7bf759b1c","modified":1534818719271},{"_id":"public/images/favicon-32x32-next1.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534818719271},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534818719272},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534818719272},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534818719272},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534818719285},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534818719300},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534818719356},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1534818719356},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534818719356},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534818719357},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534818719370},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534818719370},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534818719377},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1534818719378},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534818719378},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534818719378},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1534818719385},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1534818719385},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1534818719385},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1534818719391},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1534818719392},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534818719392},{"_id":"public/2017/10/18/exports、module-exports-和-export、export-default-之间的关系与区别/内存结构示意图.png","hash":"329154731d2009c1aafcabe6b998b75c01fe346f","modified":1534818719468},{"_id":"public/2018/07/13/Xcode无证书打包/2.png","hash":"d05c115dbf5429f6c3ecf1e3ebe266f48ac16e7e","modified":1534818719475},{"_id":"public/2018/07/13/Xcode无证书打包/4.png","hash":"f7326ab9ef199f26325eb5bb43df99252e5c8a36","modified":1534818719475},{"_id":"public/2018/07/13/Xcode无证书打包/3.png","hash":"91d16252deca97c8a6cc331fc0b92cc176dd6630","modified":1534818719477},{"_id":"public/2017/11/09/Webpack从入门到上手/Grunt和Gulp的工作流程.png","hash":"4fe8145513b0fe5c2eaeb814974abda6d829dc1d","modified":1534818719477},{"_id":"public/2017/11/09/Webpack从入门到上手/build文件夹.png","hash":"426438fe1f0b49e2fa6ec5e70065e95120db863f","modified":1534818719477},{"_id":"public/2018/07/13/Xcode无证书打包/5.png","hash":"67a1b56c4f31d7e602f42f81ba756f99379ee8e5","modified":1534818719478},{"_id":"public/2017/11/09/Webpack从入门到上手/htmlResult1.png","hash":"df90163cb436b0283322adfbaf6c6d54123cd75f","modified":1534818719478},{"_id":"public/2017/11/09/Webpack从入门到上手/Webpack工作方式.png","hash":"206364a58a4d7bdde20ae53c9241fe9ab91c79f1","modified":1534818719489},{"_id":"public/2017/11/09/Webpack从入门到上手/localhost-8080.png","hash":"8fcf7fbc3212038dafd85cf75ee8d7adfc25ee3f","modified":1534818719489},{"_id":"public/2017/11/09/Webpack从入门到上手/应用了css module后的样式.png","hash":"f4011ed17ea393f1964ae38b57d1f261b4cb76c4","modified":1534818719493},{"_id":"public/2017/11/09/Webpack从入门到上手/带hash值的js名.png","hash":"5725d889de9f013a09779838f302074d70857158","modified":1534818719494},{"_id":"public/2017/11/09/Webpack从入门到上手/版权所有.png","hash":"2c7f4c7d9d78b9ca5cc85a7a480e7beaca207051","modified":1534818719498},{"_id":"public/2017/11/09/Webpack从入门到上手/项目结构.png","hash":"bf0d4d9fabe19f0e68c602e1577b37ab5905db16","modified":1534818719502},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534818721366},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1534818721368},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1534818721380},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534818721380},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1534818721380},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1534818721381},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1534818721381},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1534818721381},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534818721381},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1534818721381},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1534818721381},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1534818721381},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1534818721381},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1534818721381},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1534818721381},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1534818721381},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1534818721381},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1534818721381},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1534818721381},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1534818721381},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1534818721381},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1534818721381},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1534818721382},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1534818721382},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1534818721382},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534818721382},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1534818721382},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1534818721383},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1534818721383},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1534818721383},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534818721383},{"_id":"public/css/main.css","hash":"d7b69407916a7057db5f0edc02a3af6c629feda4","modified":1534818721383},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1534818721383},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1534818721383},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1534818721383},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1534818721383},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1534818721383},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534818721383},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534818721384},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1534818721384},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1534818721384},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1534818721384},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1534818721384},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1534818721384},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1534818721384},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534818721384},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534818721384},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534818721384},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534818721384},{"_id":"public/2018/03/08/前端常见跨域解决方案/常见跨域场景.png","hash":"04e758d052fe71d02e466880b037d8053ff8b5a2","modified":1534818721384},{"_id":"public/2018/01/06/dva的几个核心概念/dvaeightconcepts.png","hash":"842116a4424c24e6b9146071b39860d6583b11a2","modified":1534818721385},{"_id":"public/2017/11/09/Webpack从入门到上手/使用npm start 打包代码.png","hash":"84a5f8532f566b435b20c18e29d44635f341a554","modified":1534818721385},{"_id":"public/2017/11/09/Webpack从入门到上手/使用命令行打包.png","hash":"16e6489a370d0c57cfd255ecaa924fa46884bf1f","modified":1534818721385},{"_id":"public/2018/07/13/Xcode无证书打包/1.png","hash":"5819d056f5b37f905603a8115f8c9da5194f6cf8","modified":1534818721385},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534818721493},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534818721494},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1534818721497},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1534818721497},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534818721497},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1534818721497},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534818721498},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1534818721498},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534818721498},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1534818721498},{"_id":"public/2017/11/09/Webpack从入门到上手/配合配置文件进行打包.png","hash":"ec43479adcbfe339644eb0a3e3b063b5ad21ed7f","modified":1534818721498},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1534818721498},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534818721498},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1534818721498},{"_id":"public/2017/11/09/Webpack从入门到上手/压缩后的代码.png","hash":"d718cb014647b04fb5406f964533dfe4df0362b0","modified":1534818721499},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1534818721513},{"_id":"public/2017/11/09/Webpack从入门到上手/开启本地服务器.png","hash":"fe86b7db11821ff6400ce57e08548092c39723ce","modified":1534818721513},{"_id":"public/2017/12/18/Vim命令笔记/vim快捷操作.png","hash":"956b1bcccc491701918663ddc4874acd76174475","modified":1534818721532},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1534818721538},{"_id":"public/2018/01/06/dva的几个核心概念/dvaIntroduce.jpg","hash":"7f87c9391302dcd142bd8e698af887f5c787e92b","modified":1534818721600}],"Category":[{"name":"前端","_id":"cjl33fhdg0003lxnd0wwdo8nl"},{"name":"React Native","_id":"cjl33fhe2000clxndboctagz8"},{"name":"Linux","_id":"cjl33fhe7000olxnd18pwm1xu"},{"name":"Vim","_id":"cjl33fhkj000xlxnddzrm6sqk"},{"name":"Webpack","_id":"cjl33fhkl0012lxndw2aknobo"},{"name":"模块化","_id":"cjl33fhmi001clxndvbgu6qxd"},{"name":"框架","_id":"cjl33fhmo001ilxndbpep7nuz"},{"name":"React","_id":"cjl33fhmt001olxndmyz3q4rb"},{"name":"JavaScript","_id":"cjl33fhn20021lxndlon4uca8"}],"Data":[],"Page":[{"title":"404-找不到页面","date":"2018-01-05T01:17:16.000Z","comments":0,"_content":"\n\n<center>404 Not Found</center>\n\n-------\n\n\n\n<center>**对不起，您访问的页面不存在或已删除**</center>","source":"404/index.md","raw":"---\ntitle: 404-找不到页面\ndate: 2018-01-05 09:17:16\ncomments: false\npermalink: /404\n---\n\n\n<center>404 Not Found</center>\n\n-------\n\n\n\n<center>**对不起，您访问的页面不存在或已删除**</center>","updated":"2018-01-05T01:20:27.000Z","path":"/404.html","layout":"page","_id":"cjl33fhdb0001lxndxruvcb3i","content":"<center>404 Not Found</center>\n\n<hr>\n<center><strong>对不起，您访问的页面不存在或已删除</strong></center>","site":{"data":{}},"excerpt":"","more":"<center>404 Not Found</center>\n\n<hr>\n<center><strong>对不起，您访问的页面不存在或已删除</strong></center>"},{"title":"标签","date":"2018-01-04T09:00:08.000Z","type":"tags","_content":"\n## 标签","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-04 17:00:08\ntype: \"tags\"\n---\n\n## 标签","updated":"2018-01-04T11:00:58.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjl33fhmf0019lxnd4rmwqfhy","content":"<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2>"},{"title":"分类","date":"2018-01-04T08:57:04.000Z","type":"categories","_content":"\n## 分类","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-04 16:57:04\ntype: \"categories\"\n---\n\n## 分类","updated":"2018-01-04T11:00:38.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjl33fhmh001blxndud1nv2a6","content":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2>"},{"title":"关于","date":"2018-01-06T09:00:23.000Z","type":"about","_content":"\n### Introduce\n\n- 90后、React-Native跨平台开发、web开发、H5开发、iOS探索者、代码强迫症、新技术热衷者\n- 积累技术，努力工作，坚持学习，认真生活\n\n### Production\n\n##### App:\n\n- 有数征信（有数简查App的前身）\n\n- 有数简查（有数征信App2.0的升级版，AppStore与各大主流Android应用市场可下载）\n\n- 郡县数治（AppStore与各大主流Android应用市场可下载）\n\n- 企数宝（[iOS版下载](https://www.pgyer.com/uuuZ)、[Android版下载](https://www.pgyer.com/ZAXO)）\n\n##### Web:\n\n- [简查（web端）](https://jc.yscredit.com/)\n\n- [郡县数治（web端）](https://data-town.yscredit.com/index)\n\n- [长三院投资管理系统](http://www.thhzim.com/loginIndex)\n\n- [CRM客户关系管理系统](http://crm.yscredit.com/login)\n\n- [有数后台管理系统](http://ysadmin.yscredit.com/login)\n\n##### H5:\n\n- 湖州绿贷通企业端H5（关注《湖州绿贷通》微信公众号 -> 点击申请融资）\n\n### Values\n\n进取、担当、自驱力、专业、创新、执行力\n\n### Find Me\n\n[GitHub](https://github.com/FengXianSen)、[Blog](https://fengxiansen.github.io/)、[E-Mail](https://fengxiansen333@gmail.com)\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-01-06 17:00:23\ntype: \"about\"\n---\n\n### Introduce\n\n- 90后、React-Native跨平台开发、web开发、H5开发、iOS探索者、代码强迫症、新技术热衷者\n- 积累技术，努力工作，坚持学习，认真生活\n\n### Production\n\n##### App:\n\n- 有数征信（有数简查App的前身）\n\n- 有数简查（有数征信App2.0的升级版，AppStore与各大主流Android应用市场可下载）\n\n- 郡县数治（AppStore与各大主流Android应用市场可下载）\n\n- 企数宝（[iOS版下载](https://www.pgyer.com/uuuZ)、[Android版下载](https://www.pgyer.com/ZAXO)）\n\n##### Web:\n\n- [简查（web端）](https://jc.yscredit.com/)\n\n- [郡县数治（web端）](https://data-town.yscredit.com/index)\n\n- [长三院投资管理系统](http://www.thhzim.com/loginIndex)\n\n- [CRM客户关系管理系统](http://crm.yscredit.com/login)\n\n- [有数后台管理系统](http://ysadmin.yscredit.com/login)\n\n##### H5:\n\n- 湖州绿贷通企业端H5（关注《湖州绿贷通》微信公众号 -> 点击申请融资）\n\n### Values\n\n进取、担当、自驱力、专业、创新、执行力\n\n### Find Me\n\n[GitHub](https://github.com/FengXianSen)、[Blog](https://fengxiansen.github.io/)、[E-Mail](https://fengxiansen333@gmail.com)\n","updated":"2018-08-01T01:34:23.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjl33fhmj001flxnd16z690ht","content":"<h3 id=\"Introduce\"><a href=\"#Introduce\" class=\"headerlink\" title=\"Introduce\"></a>Introduce</h3><ul>\n<li>90后、React-Native跨平台开发、web开发、H5开发、iOS探索者、代码强迫症、新技术热衷者</li>\n<li>积累技术，努力工作，坚持学习，认真生活</li>\n</ul>\n<h3 id=\"Production\"><a href=\"#Production\" class=\"headerlink\" title=\"Production\"></a>Production</h3><h5 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App:\"></a>App:</h5><ul>\n<li><p>有数征信（有数简查App的前身）</p>\n</li>\n<li><p>有数简查（有数征信App2.0的升级版，AppStore与各大主流Android应用市场可下载）</p>\n</li>\n<li><p>郡县数治（AppStore与各大主流Android应用市场可下载）</p>\n</li>\n<li><p>企数宝（<a href=\"https://www.pgyer.com/uuuZ\" target=\"_blank\" rel=\"noopener\">iOS版下载</a>、<a href=\"https://www.pgyer.com/ZAXO\" target=\"_blank\" rel=\"noopener\">Android版下载</a>）</p>\n</li>\n</ul>\n<h5 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web:\"></a>Web:</h5><ul>\n<li><p><a href=\"https://jc.yscredit.com/\" target=\"_blank\" rel=\"noopener\">简查（web端）</a></p>\n</li>\n<li><p><a href=\"https://data-town.yscredit.com/index\" target=\"_blank\" rel=\"noopener\">郡县数治（web端）</a></p>\n</li>\n<li><p><a href=\"http://www.thhzim.com/loginIndex\" target=\"_blank\" rel=\"noopener\">长三院投资管理系统</a></p>\n</li>\n<li><p><a href=\"http://crm.yscredit.com/login\" target=\"_blank\" rel=\"noopener\">CRM客户关系管理系统</a></p>\n</li>\n<li><p><a href=\"http://ysadmin.yscredit.com/login\" target=\"_blank\" rel=\"noopener\">有数后台管理系统</a></p>\n</li>\n</ul>\n<h5 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5:\"></a>H5:</h5><ul>\n<li>湖州绿贷通企业端H5（关注《湖州绿贷通》微信公众号 -&gt; 点击申请融资）</li>\n</ul>\n<h3 id=\"Values\"><a href=\"#Values\" class=\"headerlink\" title=\"Values\"></a>Values</h3><p>进取、担当、自驱力、专业、创新、执行力</p>\n<h3 id=\"Find-Me\"><a href=\"#Find-Me\" class=\"headerlink\" title=\"Find Me\"></a>Find Me</h3><p><a href=\"https://github.com/FengXianSen\" target=\"_blank\" rel=\"noopener\">GitHub</a>、<a href=\"https://fengxiansen.github.io/\">Blog</a>、<a href=\"https://fengxiansen333@gmail.com\" target=\"_blank\" rel=\"noopener\">E-Mail</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Introduce\"><a href=\"#Introduce\" class=\"headerlink\" title=\"Introduce\"></a>Introduce</h3><ul>\n<li>90后、React-Native跨平台开发、web开发、H5开发、iOS探索者、代码强迫症、新技术热衷者</li>\n<li>积累技术，努力工作，坚持学习，认真生活</li>\n</ul>\n<h3 id=\"Production\"><a href=\"#Production\" class=\"headerlink\" title=\"Production\"></a>Production</h3><h5 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App:\"></a>App:</h5><ul>\n<li><p>有数征信（有数简查App的前身）</p>\n</li>\n<li><p>有数简查（有数征信App2.0的升级版，AppStore与各大主流Android应用市场可下载）</p>\n</li>\n<li><p>郡县数治（AppStore与各大主流Android应用市场可下载）</p>\n</li>\n<li><p>企数宝（<a href=\"https://www.pgyer.com/uuuZ\" target=\"_blank\" rel=\"noopener\">iOS版下载</a>、<a href=\"https://www.pgyer.com/ZAXO\" target=\"_blank\" rel=\"noopener\">Android版下载</a>）</p>\n</li>\n</ul>\n<h5 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web:\"></a>Web:</h5><ul>\n<li><p><a href=\"https://jc.yscredit.com/\" target=\"_blank\" rel=\"noopener\">简查（web端）</a></p>\n</li>\n<li><p><a href=\"https://data-town.yscredit.com/index\" target=\"_blank\" rel=\"noopener\">郡县数治（web端）</a></p>\n</li>\n<li><p><a href=\"http://www.thhzim.com/loginIndex\" target=\"_blank\" rel=\"noopener\">长三院投资管理系统</a></p>\n</li>\n<li><p><a href=\"http://crm.yscredit.com/login\" target=\"_blank\" rel=\"noopener\">CRM客户关系管理系统</a></p>\n</li>\n<li><p><a href=\"http://ysadmin.yscredit.com/login\" target=\"_blank\" rel=\"noopener\">有数后台管理系统</a></p>\n</li>\n</ul>\n<h5 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5:\"></a>H5:</h5><ul>\n<li>湖州绿贷通企业端H5（关注《湖州绿贷通》微信公众号 -&gt; 点击申请融资）</li>\n</ul>\n<h3 id=\"Values\"><a href=\"#Values\" class=\"headerlink\" title=\"Values\"></a>Values</h3><p>进取、担当、自驱力、专业、创新、执行力</p>\n<h3 id=\"Find-Me\"><a href=\"#Find-Me\" class=\"headerlink\" title=\"Find Me\"></a>Find Me</h3><p><a href=\"https://github.com/FengXianSen\" target=\"_blank\" rel=\"noopener\">GitHub</a>、<a href=\"https://fengxiansen.github.io/\">Blog</a>、<a href=\"https://fengxiansen333@gmail.com\" target=\"_blank\" rel=\"noopener\">E-Mail</a></p>\n"}],"Post":[{"title":"30个你必须记住的CSS选择符","date":"2017-08-05T13:06:20.000Z","_content":"\n## 30个你必须记住的CSS选择符\n你学会了基础的id，类和后代选择符，然后你就一直用它们了吗？如果是这样，你丢失了CSS巨大的灵活性。在本文中提到的很多选择器属于CSS3规范的一部分，因此，只有在现代浏览器中才可使用。\n\n#### 1.`*`\n```\n* {\n margin: 0;\n padding: 0;\n}\n```\n对于初学者，在学习更多高级选择器之前，`*`是最应先了解的选择器。\n\n星号选择器将匹配页面里的每一个元素。很多开发者使用这个技巧将外边距和内边距重置为零。虽然在快速测试时这确实很好用，但我建议你永远不要在生产代码中使用它。它给浏览器带来大量不必要的负担。\n\n`*`也能作为子选择符使用。\n```\n#container * {\n border: 1px solid black;\n}\n```\n这将匹配`#container div`的每一个后代元素。再次强调，尽量不要使用这种技术。\n\n#### 2.`#X`\n```\n#container {\n   width: 960px;\n   margin: auto;\n}\n```\n`#`号前缀允许我们选择id。这是最常见的用法，不过应该慎重使用ID选择器。\n\nid选择符是唯一的，不允许重复使用。如果可能的话，先尝试使用一个标签名称，一个新的HTML5元素，甚至是一个伪类。\n\n<!--more-->\n\n#### 3. `.X`\n```\n.error {\n  color: red;\n}\n```\n现在介绍的是类选择符。id和类的不同之处在于后者可以多次使用。当你想给一组元素应用样式的时候可以使用类选择符。另外，当你紧想给特殊元素应用样式的时候才使用id。\n\n#### 4. `X Y`\n```\nli a {\n  text-decoration: none;\n}\n```\n下一个最常用的选择符是后代选择符。当你需要给你的选择符增加特殊性的时候你可以使用。例如，如果你只想匹配无序列表下的锚元素？此时后代选择符派上用场。\n\n#### 5. `X`\n```\na { color: red; }\nul { margin-left: 0; }\n```\n如果你想匹配页面上的所有的元素，根据他们的类型，而不是id或类名？显而易见，使用类型选择符。如果你需要选择所有的无序列表，请使用`ul {}`。\n\n#### 6. `X:visited` and `X:link`\n```\na:link { color: red; }\na:visted { color: purple; }\n```\n我们使用`:link` 伪类选择符选择所有已经被点击过的锚标签。\n\n此外，我们也有`:visited`伪类选择符，正如你期望的，允许我们仅给页面上被点击过的或被访问过的锚标签应用样式。\n\n#### 7. `X + Y`\n```\nul + p {\n   color: red;\n}\n```\n这被称作相邻选择符。它将只选择紧贴在X元素之后Y元素。上面的例子，仅每一个ul之后的第一个段落元素的文本为红色。\n\n#### 8. `X > Y`\n```\ndiv#container > ul {\n  border: 1px solid black;\n}\n```\n`X Y`和`X > Y`之间的不同点是后者只选择直接子代。例如，考虑如下的标记。\n```\n<div id=\"container\">\n   <ul>\n      <li> List Item\n        <ul>\n           <li> Child </li>\n        </ul>\n      </li>\n      <li> List Item </li>\n      <li> List Item </li>\n      <li> List Item </li>\n   </ul>\n</div>\n```\n选择符`#container > ul`将只选择id为container的div的直接子代ul。它不匹配更深层的li的子代的ul。\n\n因此，使用子代选择符有性能上的优势。事实上，这同样适用于基于css选择器的javascript引擎。\n\n#### 9.` X ~ Y`\n```\nul ~ p {\n   color: red;\n}\n```\n这是兄弟选择符和`X + Y`一样，然而，它没有约束。与相邻选择符（ul + li）仅选择前一个选择符后面的第一个元素比起来，兄弟选择符更宽泛。它会选择，我们上面例子中跟在ul后面的任何p元素。\n\n#### 10. `X[title]`\n```\na[title] {\n   color: green;\n}\n```\n被称为属性选择器，在我们上面的例子里，这只会选择有title属性的锚标签。没有此属性的锚标签将不受影像。\n\n#### 11. `X[href=”foo”]`\n```\na[href=\"http://net.tutsplus.com\"] {\n  color: #1f6053; /* nettuts green */\n}\n```\n上面的代码段将给所有`href`属性为`http://net.tutsplus.com`的锚标签添加样式；他们将会显示为我们的品牌绿色。所有其他的锚标签将不受影响。\n\n注意我们将href值用引号包裹。记住，当使用javascript的css选择符引擎时也这么做。如果可能的话，尽可能使用css3选择符代替非官方的方法。\n\n这工作的很好，但有点不够灵活。如果链接确实直接连接到Nettus+还好，但是，也许路径是到nettust的相对路径呢？在这种情况下，我们可以使用一点正则表达式语法。\n\n#### 12. `X[href*=”nettuts”]`\n```\na[href*=\"tuts\"] {\n  color: #1f6053; /* nettuts green */\n}\n```\n来了不是~这就是我们需要的代码。`*`号指定了包含该属性的值必须包含定义的值。就是说，这句代码包含了href值为` nettuts.com`，`net.tutsplus.com`或者`tutsplus.com`。\n\n记住这个描述过于宽泛，如果是某个锚点标签链接到某个连接中带有tuts非Envato的网站（tutsplus属于Envato旗下网站）呢？因此你需要更多特性来限制，分别使用^和&来限定字符串的开始和结束。\n\n\n#### 13. `X[href^=”http”]`\n```\na[href^=\"http\"] {\n   background: url(path/to/external/icon.png) no-repeat;\n   padding-left: 10px;\n}\n```\n有没有想过某些网站是如何定义一个图标的链接的？我确定你肯定看到过。这些链接很容易让你跳转到另一个网站。\n\n使用`^(carat)`符灰常简单啦。这个符号常常在正则表达式中表示字符串的开始。如果我们想指向所有以`”http”`开头的`”href”`属性的锚点的话，我们就可以使用类似于上面的那段代码啦。\n\n注意啦，我们不需要搜索`”http://”`,完全没必要，因为我们还要包含以`https://`开头的链接呢。\n\n如果我们想为所有链接到图片的链接定义样式咋办？这种情况下，我们得搜索字符串的结束了不是。\n\n\n#### 14. `X[href$=”.jpg”]`\n```\na[href$=\".jpg\"] {\n   color: red;\n}\n```\n又来了，我们还是使用正则表达式符号，`$(dolor)`，来作为字符串的结束标记。这种情况下，我们就会搜索所有url以.jpg为结尾的锚点啦。记住记住这种情况下gif和png格式的图片不会被选择哦。\n\n\n#### 15. `X[data-*=”foo”]`\n```\na[data-filetype=\"image\"] {\n   color: red;\n}\n```\n回顾最近一条，我们如何能包含各种图片类型:png,jpeg,jpg,gif?很容易想到，我们能通过多个选择器来不是，像这样：\n\n```\na[href$=\".jpg\"],\na[href$=\".jpeg\"],\na[href$=\".png\"],\na[href$=\".gif\"] {\n   color: red;\n}\n```\n不过，这样很蛋疼，效率极低。另一个解决办法是使用自定义属性。如果我们加了一种自己的 `data-filetype` 属性给每一个链接到图片的锚点的话呢？\n\n`<a href=\"path/to/image.jpg\" data-filetype=\"image\"> Image Link </a>  `\n\n这样关联后，我们就能使用标准的属性选择器来指定这些链接啦。看下面：\n\n```\na[data-filetype=\"image\"] {\n   color: red;\n}\n```\n\n#### 16.` X[foo~=”bar”]`\n```\na[data-info~=\"external\"] {\n   color: red;\n}\n\na[data-info~=\"image\"] {\n   border: 1px solid black;\n}\n```\n这儿有个鲜为人知的特殊技巧，绝对让你印象时刻。`~(tilda)`符，它可以帮助我们指向那些以空格隔开多个值的属性的元素（真拗口，这翻译我自己都看不懂，水平问题）\n\n以我们第15条的自定义属性为例，上面的代码中我们创建了 `data-info`属性，这个属性可以定义以空格分隔的多个值。这样，这个链接本身就是个icon，并且指向的也是一个图片链接，像下面这样。\n\n`<a href=\"path/to/image.jpg\" data-info=\"external image\"> Click Me, Fool </a>  `\n有了这样适当的标记，通过使用 ~ 属性选择器的技巧，我们就可以指向任何具有着两种属性的任何一种啦。\n\n```\n/* Target data-info attr that contains the value \"external\" */\na[data-info~=\"external\"] {\n   color: red;\n}\n\n/* And which contain the value \"image\" */\na[data-info~=\"image\"] {\n  border: 1px solid black;\n}\n```\n很棒，不是吗？\n\n\n#### 17.` X:checked`\n```\ninput[type=radio]:checked {\n   border: 1px solid black;\n}\n```\n这种伪类只会匹配已经被选中的单选元素。就是这么简单。\n\n\n#### 18. `X:after`\nbefore 和 after 伪元素也很蛋疼。貌似人们每天都能找到或者发明一些新办法来有效地使用它们。它们很容易控制选择器周围的内容。\n\n很多第一次使用是因为他们需要对`clear-fix`进行改进。\n```\n.clearfix:after {\n    content: \"\";\n    display: block;\n    clear: both;\n    visibility: hidden;\n    font-size: 0;\n    height: 0;\n}\n\n.clearfix {\n   *display: inline-block;\n   _height: 1%;\n}\n```\n这个改进使用了:after伪类元素来在元素后增加一个空间，然后清除它。这个牛X的技巧你应该收藏到工具包里，特别是当`overflow:hidden`方法无能为力的时候。\n\n通过Css3选择器的标准说明书，你应该有技巧地使用这些伪类语法——双冒号::。不过为了兼容，浏览器会接受一个双引号。\n\n\n#### 19. `X:hover`\n```\ndiv:hover {\n  background: #e3e3e3;\n}\n```\n我去，这个你必须懂。典型的官方形式的用户触发伪类。听起来会有点迷惑，不过实际上并非如此。想在用户在某个元素上面悬停时定义个特别的样式？这个属性就是做这个的。\n\n记住啦，较old版本的IE，只能在锚点标签后使用这个hover。\n\n这个选择器你用得最多的情况，估计可能就是在锚点的悬停时加个`border-bottom`啦。\n```\na:hover {\n border-bottom: 1px solid black;\n}\n```\n小贴士： `border-bottom:1px solid black;`比 `text-decoration:underline;`好看一点哦。（真的？我去）\n\n\n#### 20. `X:not(selector)`\n```\ndiv:not(#container) {\n   color: blue;\n}\n```\nnot伪类灰常有用。例如我要选择所有的div，除了有id为container的。上面那个代码片段就能完美的实现。\n\n如果我想选择除了p以外的所有元素，我可以这么做：\n```\n*:not(p) {\n  color: green;\n}\n```\n\n#### 21. `X::pseudoElement`\n```\np::first-line {\n   font-weight: bold;\n   font-size: 1.2em;\n}\n```\n我们可以使用伪元素（以::为表示）来定义元素的样式。例如第一行，第一个字符，记住啦，这种方法只能应用于同级元素才有效。\n\n伪元素由两个冒号组成：::\n\n指定p的第一个字符的样式\n\n```\np::first-letter {\n   float: left;\n   font-size: 2em;\n   font-weight: bold;\n   font-family: cursive;\n   padding-right: 2px;\n}\n```\n这段代码会找到所有段落，然后再从中定义这些段落的第一个字符。\n\n这常常使用在仿报纸的文章首字母样式。\n\n指定p的首行样式:\n```\np::first-line {\n   font-weight: bold;\n   font-size: 1.2em;\n}\n```\n同样，这个::first-line伪元素会像我们期望的那样，只定义段落的第一行的样式。\n\n\n#### 22. `X:nth-child(n)`\n```\nli:nth-child(3) {\n   color: red;\n}\n```\n想想那些没法从元素堆中选择元素的日子。`nth-child`伪类解决了这个问题。\n\n请注意 `nth-child`接收整数和变量，不过不是从0开始的，如果你想选定第二个li，使用 `li:nth-child(2)`.\n\n我们甚至使用这个办法来选择任意的子元素。例如，我们可以用` li:nth-child(4n)`来完成4为倍数的所有元素的选择。\n\n\n#### 23. `X:nth-last-child(n)`\n```\nli:nth-last-child(2) {\n   color: red;\n}\n```\n如果我有灰常多的li在ul里面，我只想要最后3个li怎么办？不必使用`li:nth-child(397)`,你可以使用`nth-last-child`伪类。\n\n这种技巧和第六条几乎一样有效，不过两者的不同之处在于它从结束开始收集，用回溯的方式进行。\n\n\n#### 24. `X:nth-of-type(n)`\n```\nul:nth-of-type(3) {\n   border: 1px solid black;\n}\n```\n你应该有很多时候想要元素类型来选择元素而不是通过孩子。\n\n想象一下标记5个无序列表（UL）。如果你想定义第三个ul，并且没有一个唯一的id来找到它，你就可以使用 nth-of-type(3)伪类了。在上面这个代码段中，只有第三个ul才会有黑色的边框。\n\n\n#### 25. `X:nth-last-of-type(n)`\n```\nul:nth-last-of-type(3) {\n   border: 1px solid black;\n}\n```\n没错，我们一样可以使用`nth-last-of-type`来从结束开始回溯这个选择器，来找到我们想要的元素\n\n#### 26.` X:first-child`\n```\nul li:first-child {\n   border-top: none;\n}\n```\n这个结构的伪类让我们可以选择某个元素的第一个子孩子。你通常可以使用这个办法来删除第一个或者最后一个元素的边框。\n\n例如，你有一系列的rows，每一个都有`border-top` 和`border-bottom`。这种情况下，第一行和最后一行看起来会灰常怪。\n\n很多设计师会使用first和last类来弥补这个缺陷。相反，你可以使用这些伪类来解决这些问题。\n\n\n#### 27.` X:last-child`\n```\nul > li:last-child {\n   color: green;\n}\n```\n与first-child相反，last-child会选择父节点的最后一个子节点。\n\n##### 例子：\n\n我们建立一些例子来示范这些类的可能的用法。我们会建立一种风格来展示。\n\n##### 标记\n```\n<ul>\n   <li> List Item </li>\n   <li> List Item </li>\n   <li> List Item </li>\n</ul>\n```\n没啥特别的，就是一个简单的序列。\n\n##### CSS\n\n```\nul {\n width: 200px;\n background: #292929;\n color: white;\n list-style: none;\n padding-left: 0;\n}\n\nli {\n padding: 10px;\n border-bottom: 1px solid black;\n border-top: 1px solid #3c3c3c;\n}\n```\n这个样式会设置一个背景，删除浏览器默认的ul的padding值，并定义边框给每一个li来提供一点深度。\n\n如上图所示，唯一的问题是最上面的边框和最下面的边框看起来有点儿怪。让我们来使用:first-child和:last-child来解决这个问题。\n```\nli:first-child {\n    border-top: none;\n}\n\nli:last-child {\n   border-bottom: none;\n}\n```\n看上面，解决了不是。\n\n是滴，IE8支持 first-child 不过不支持last-child。\n\n#### 28. `X:only-child`\n```\ndiv p:only-child {\n   color: red;\n}\n```\n实话说，你很可能会发现你不会经常使用 only-child伪类。尽管如此，它确实有用，你应该需要它。\n\n它可以帮助你选择是父节点的独生子（没别的孩子啦）的元素。例如，使用上面的代码，只有是div的唯一子孩子的p段落才会定义其颜色为red。\n\n让我们来假定下面的标记。\n\n```\n<div><p> My paragraph here. </p></div>\n\n<div>\n   <p> Two paragraphs total. </p>\n   <p> Two paragraphs total. </p>\n</div>\n```\n这样，第二个div的p标签的内容不会被选中。只有第一个div的p才会被选中。\n\n\n#### 29. `X:only-of-type`\n```\nli:only-of-type {\n   font-weight: bold;\n}\n```\n这种结构的伪类有几种灰常聪明的用法。它可以选定在其父节点内没有兄弟节点的元素。例如，我们可以选择只有一个li作为其子孩子的ul。\n\n首先，取决于你想怎样完成这一目标。你可以使用 ul li，不过，这回选择所有li元素。唯一的办法是使用`only-of-type`。\n\n```\nul > li:only-of-type {\n   font-weight: bold;\n}\n```\n\n#### 30.` X:first-of-type`\n`first-of-type `伪类可以让你选择该类型的第一个兄弟节点。\n\n为了更好地理解它，让我们来测试一下啊。拷贝下面的标记到你的编辑器。\n```\n<div>\n   <p> My paragraph here. </p>\n   <ul>\n      <li> List Item 1 </li>\n      <li> List Item 2 </li>\n   </ul>\n\n   <ul>\n      <li> List Item 3 </li>\n      <li> List Item 4 </li>\n   </ul>\n</div>\n```\n现在，别急着往下读，试试看如何能只选择’LIST ITEM 2’?如果你搞定了（或者放弃了），继续读。\n\n##### 解决办法1\n\n有很多办法能搞定这个测试。我们回顾其中一小部分。以使用first-of-type开始。\n\n```\nul:first-of-type > li:nth-child(2) {\n   font-weight: bold;\n}\n```\n这个代码段本质上表示，“找到第一个无序列表，然后找到这里面的li，然后，继续使用过滤器直到找到第二个li。\n\n##### 解决办法2\n\n另一个可行的办法是毗邻选择器。\n\n```\np + ul li:last-child {\n   font-weight: bold;\n}\n```\n在这个方案中，我们找到p的临近节点ul，然后找到ul的li的最后一个孩子。\n\n##### 解决办法3\n我们可以随心所欲滴选择这些选择器。\n```\nul:first-of-type li:nth-last-child(1) {\n   font-weight: bold;\n}\n```\n这次，我们取到第一个ul，然后找到第一个元素，不过是从最后一个开始数。哈哈。\n\n\n#### 结论\n如果你仍在为解决old浏览器的缺陷而纠结，如IE6。在使用这些新的选择器方面，你仍然需要非常小心。不过，别因为这个阻碍了你对这些新玩意儿的学习。别虐待自己。确保关注这里的兼容性列表。应一方面，你可以使用` Dean Edward’s excellent IE9.js script `来为旧浏览器提供新的选择器支持。（我去。cool）\n\n其次，当使用`javascript`库时，如流行的`jQuery`，最好尽可能使用这些`css3`本身的选择器而不是使用库的自定义方法/选择器。这能让你的代码更快哦，因为这些选择器引擎本身就能被浏览器解析，而不是用这些库选择器。\n","source":"_posts/30个你必须记住的CSS选择符.md","raw":"---\ntitle: 30个你必须记住的CSS选择符\ndate: 2017-08-05 21:06:20\ncategories: 前端\ntags: CSS\n---\n\n## 30个你必须记住的CSS选择符\n你学会了基础的id，类和后代选择符，然后你就一直用它们了吗？如果是这样，你丢失了CSS巨大的灵活性。在本文中提到的很多选择器属于CSS3规范的一部分，因此，只有在现代浏览器中才可使用。\n\n#### 1.`*`\n```\n* {\n margin: 0;\n padding: 0;\n}\n```\n对于初学者，在学习更多高级选择器之前，`*`是最应先了解的选择器。\n\n星号选择器将匹配页面里的每一个元素。很多开发者使用这个技巧将外边距和内边距重置为零。虽然在快速测试时这确实很好用，但我建议你永远不要在生产代码中使用它。它给浏览器带来大量不必要的负担。\n\n`*`也能作为子选择符使用。\n```\n#container * {\n border: 1px solid black;\n}\n```\n这将匹配`#container div`的每一个后代元素。再次强调，尽量不要使用这种技术。\n\n#### 2.`#X`\n```\n#container {\n   width: 960px;\n   margin: auto;\n}\n```\n`#`号前缀允许我们选择id。这是最常见的用法，不过应该慎重使用ID选择器。\n\nid选择符是唯一的，不允许重复使用。如果可能的话，先尝试使用一个标签名称，一个新的HTML5元素，甚至是一个伪类。\n\n<!--more-->\n\n#### 3. `.X`\n```\n.error {\n  color: red;\n}\n```\n现在介绍的是类选择符。id和类的不同之处在于后者可以多次使用。当你想给一组元素应用样式的时候可以使用类选择符。另外，当你紧想给特殊元素应用样式的时候才使用id。\n\n#### 4. `X Y`\n```\nli a {\n  text-decoration: none;\n}\n```\n下一个最常用的选择符是后代选择符。当你需要给你的选择符增加特殊性的时候你可以使用。例如，如果你只想匹配无序列表下的锚元素？此时后代选择符派上用场。\n\n#### 5. `X`\n```\na { color: red; }\nul { margin-left: 0; }\n```\n如果你想匹配页面上的所有的元素，根据他们的类型，而不是id或类名？显而易见，使用类型选择符。如果你需要选择所有的无序列表，请使用`ul {}`。\n\n#### 6. `X:visited` and `X:link`\n```\na:link { color: red; }\na:visted { color: purple; }\n```\n我们使用`:link` 伪类选择符选择所有已经被点击过的锚标签。\n\n此外，我们也有`:visited`伪类选择符，正如你期望的，允许我们仅给页面上被点击过的或被访问过的锚标签应用样式。\n\n#### 7. `X + Y`\n```\nul + p {\n   color: red;\n}\n```\n这被称作相邻选择符。它将只选择紧贴在X元素之后Y元素。上面的例子，仅每一个ul之后的第一个段落元素的文本为红色。\n\n#### 8. `X > Y`\n```\ndiv#container > ul {\n  border: 1px solid black;\n}\n```\n`X Y`和`X > Y`之间的不同点是后者只选择直接子代。例如，考虑如下的标记。\n```\n<div id=\"container\">\n   <ul>\n      <li> List Item\n        <ul>\n           <li> Child </li>\n        </ul>\n      </li>\n      <li> List Item </li>\n      <li> List Item </li>\n      <li> List Item </li>\n   </ul>\n</div>\n```\n选择符`#container > ul`将只选择id为container的div的直接子代ul。它不匹配更深层的li的子代的ul。\n\n因此，使用子代选择符有性能上的优势。事实上，这同样适用于基于css选择器的javascript引擎。\n\n#### 9.` X ~ Y`\n```\nul ~ p {\n   color: red;\n}\n```\n这是兄弟选择符和`X + Y`一样，然而，它没有约束。与相邻选择符（ul + li）仅选择前一个选择符后面的第一个元素比起来，兄弟选择符更宽泛。它会选择，我们上面例子中跟在ul后面的任何p元素。\n\n#### 10. `X[title]`\n```\na[title] {\n   color: green;\n}\n```\n被称为属性选择器，在我们上面的例子里，这只会选择有title属性的锚标签。没有此属性的锚标签将不受影像。\n\n#### 11. `X[href=”foo”]`\n```\na[href=\"http://net.tutsplus.com\"] {\n  color: #1f6053; /* nettuts green */\n}\n```\n上面的代码段将给所有`href`属性为`http://net.tutsplus.com`的锚标签添加样式；他们将会显示为我们的品牌绿色。所有其他的锚标签将不受影响。\n\n注意我们将href值用引号包裹。记住，当使用javascript的css选择符引擎时也这么做。如果可能的话，尽可能使用css3选择符代替非官方的方法。\n\n这工作的很好，但有点不够灵活。如果链接确实直接连接到Nettus+还好，但是，也许路径是到nettust的相对路径呢？在这种情况下，我们可以使用一点正则表达式语法。\n\n#### 12. `X[href*=”nettuts”]`\n```\na[href*=\"tuts\"] {\n  color: #1f6053; /* nettuts green */\n}\n```\n来了不是~这就是我们需要的代码。`*`号指定了包含该属性的值必须包含定义的值。就是说，这句代码包含了href值为` nettuts.com`，`net.tutsplus.com`或者`tutsplus.com`。\n\n记住这个描述过于宽泛，如果是某个锚点标签链接到某个连接中带有tuts非Envato的网站（tutsplus属于Envato旗下网站）呢？因此你需要更多特性来限制，分别使用^和&来限定字符串的开始和结束。\n\n\n#### 13. `X[href^=”http”]`\n```\na[href^=\"http\"] {\n   background: url(path/to/external/icon.png) no-repeat;\n   padding-left: 10px;\n}\n```\n有没有想过某些网站是如何定义一个图标的链接的？我确定你肯定看到过。这些链接很容易让你跳转到另一个网站。\n\n使用`^(carat)`符灰常简单啦。这个符号常常在正则表达式中表示字符串的开始。如果我们想指向所有以`”http”`开头的`”href”`属性的锚点的话，我们就可以使用类似于上面的那段代码啦。\n\n注意啦，我们不需要搜索`”http://”`,完全没必要，因为我们还要包含以`https://`开头的链接呢。\n\n如果我们想为所有链接到图片的链接定义样式咋办？这种情况下，我们得搜索字符串的结束了不是。\n\n\n#### 14. `X[href$=”.jpg”]`\n```\na[href$=\".jpg\"] {\n   color: red;\n}\n```\n又来了，我们还是使用正则表达式符号，`$(dolor)`，来作为字符串的结束标记。这种情况下，我们就会搜索所有url以.jpg为结尾的锚点啦。记住记住这种情况下gif和png格式的图片不会被选择哦。\n\n\n#### 15. `X[data-*=”foo”]`\n```\na[data-filetype=\"image\"] {\n   color: red;\n}\n```\n回顾最近一条，我们如何能包含各种图片类型:png,jpeg,jpg,gif?很容易想到，我们能通过多个选择器来不是，像这样：\n\n```\na[href$=\".jpg\"],\na[href$=\".jpeg\"],\na[href$=\".png\"],\na[href$=\".gif\"] {\n   color: red;\n}\n```\n不过，这样很蛋疼，效率极低。另一个解决办法是使用自定义属性。如果我们加了一种自己的 `data-filetype` 属性给每一个链接到图片的锚点的话呢？\n\n`<a href=\"path/to/image.jpg\" data-filetype=\"image\"> Image Link </a>  `\n\n这样关联后，我们就能使用标准的属性选择器来指定这些链接啦。看下面：\n\n```\na[data-filetype=\"image\"] {\n   color: red;\n}\n```\n\n#### 16.` X[foo~=”bar”]`\n```\na[data-info~=\"external\"] {\n   color: red;\n}\n\na[data-info~=\"image\"] {\n   border: 1px solid black;\n}\n```\n这儿有个鲜为人知的特殊技巧，绝对让你印象时刻。`~(tilda)`符，它可以帮助我们指向那些以空格隔开多个值的属性的元素（真拗口，这翻译我自己都看不懂，水平问题）\n\n以我们第15条的自定义属性为例，上面的代码中我们创建了 `data-info`属性，这个属性可以定义以空格分隔的多个值。这样，这个链接本身就是个icon，并且指向的也是一个图片链接，像下面这样。\n\n`<a href=\"path/to/image.jpg\" data-info=\"external image\"> Click Me, Fool </a>  `\n有了这样适当的标记，通过使用 ~ 属性选择器的技巧，我们就可以指向任何具有着两种属性的任何一种啦。\n\n```\n/* Target data-info attr that contains the value \"external\" */\na[data-info~=\"external\"] {\n   color: red;\n}\n\n/* And which contain the value \"image\" */\na[data-info~=\"image\"] {\n  border: 1px solid black;\n}\n```\n很棒，不是吗？\n\n\n#### 17.` X:checked`\n```\ninput[type=radio]:checked {\n   border: 1px solid black;\n}\n```\n这种伪类只会匹配已经被选中的单选元素。就是这么简单。\n\n\n#### 18. `X:after`\nbefore 和 after 伪元素也很蛋疼。貌似人们每天都能找到或者发明一些新办法来有效地使用它们。它们很容易控制选择器周围的内容。\n\n很多第一次使用是因为他们需要对`clear-fix`进行改进。\n```\n.clearfix:after {\n    content: \"\";\n    display: block;\n    clear: both;\n    visibility: hidden;\n    font-size: 0;\n    height: 0;\n}\n\n.clearfix {\n   *display: inline-block;\n   _height: 1%;\n}\n```\n这个改进使用了:after伪类元素来在元素后增加一个空间，然后清除它。这个牛X的技巧你应该收藏到工具包里，特别是当`overflow:hidden`方法无能为力的时候。\n\n通过Css3选择器的标准说明书，你应该有技巧地使用这些伪类语法——双冒号::。不过为了兼容，浏览器会接受一个双引号。\n\n\n#### 19. `X:hover`\n```\ndiv:hover {\n  background: #e3e3e3;\n}\n```\n我去，这个你必须懂。典型的官方形式的用户触发伪类。听起来会有点迷惑，不过实际上并非如此。想在用户在某个元素上面悬停时定义个特别的样式？这个属性就是做这个的。\n\n记住啦，较old版本的IE，只能在锚点标签后使用这个hover。\n\n这个选择器你用得最多的情况，估计可能就是在锚点的悬停时加个`border-bottom`啦。\n```\na:hover {\n border-bottom: 1px solid black;\n}\n```\n小贴士： `border-bottom:1px solid black;`比 `text-decoration:underline;`好看一点哦。（真的？我去）\n\n\n#### 20. `X:not(selector)`\n```\ndiv:not(#container) {\n   color: blue;\n}\n```\nnot伪类灰常有用。例如我要选择所有的div，除了有id为container的。上面那个代码片段就能完美的实现。\n\n如果我想选择除了p以外的所有元素，我可以这么做：\n```\n*:not(p) {\n  color: green;\n}\n```\n\n#### 21. `X::pseudoElement`\n```\np::first-line {\n   font-weight: bold;\n   font-size: 1.2em;\n}\n```\n我们可以使用伪元素（以::为表示）来定义元素的样式。例如第一行，第一个字符，记住啦，这种方法只能应用于同级元素才有效。\n\n伪元素由两个冒号组成：::\n\n指定p的第一个字符的样式\n\n```\np::first-letter {\n   float: left;\n   font-size: 2em;\n   font-weight: bold;\n   font-family: cursive;\n   padding-right: 2px;\n}\n```\n这段代码会找到所有段落，然后再从中定义这些段落的第一个字符。\n\n这常常使用在仿报纸的文章首字母样式。\n\n指定p的首行样式:\n```\np::first-line {\n   font-weight: bold;\n   font-size: 1.2em;\n}\n```\n同样，这个::first-line伪元素会像我们期望的那样，只定义段落的第一行的样式。\n\n\n#### 22. `X:nth-child(n)`\n```\nli:nth-child(3) {\n   color: red;\n}\n```\n想想那些没法从元素堆中选择元素的日子。`nth-child`伪类解决了这个问题。\n\n请注意 `nth-child`接收整数和变量，不过不是从0开始的，如果你想选定第二个li，使用 `li:nth-child(2)`.\n\n我们甚至使用这个办法来选择任意的子元素。例如，我们可以用` li:nth-child(4n)`来完成4为倍数的所有元素的选择。\n\n\n#### 23. `X:nth-last-child(n)`\n```\nli:nth-last-child(2) {\n   color: red;\n}\n```\n如果我有灰常多的li在ul里面，我只想要最后3个li怎么办？不必使用`li:nth-child(397)`,你可以使用`nth-last-child`伪类。\n\n这种技巧和第六条几乎一样有效，不过两者的不同之处在于它从结束开始收集，用回溯的方式进行。\n\n\n#### 24. `X:nth-of-type(n)`\n```\nul:nth-of-type(3) {\n   border: 1px solid black;\n}\n```\n你应该有很多时候想要元素类型来选择元素而不是通过孩子。\n\n想象一下标记5个无序列表（UL）。如果你想定义第三个ul，并且没有一个唯一的id来找到它，你就可以使用 nth-of-type(3)伪类了。在上面这个代码段中，只有第三个ul才会有黑色的边框。\n\n\n#### 25. `X:nth-last-of-type(n)`\n```\nul:nth-last-of-type(3) {\n   border: 1px solid black;\n}\n```\n没错，我们一样可以使用`nth-last-of-type`来从结束开始回溯这个选择器，来找到我们想要的元素\n\n#### 26.` X:first-child`\n```\nul li:first-child {\n   border-top: none;\n}\n```\n这个结构的伪类让我们可以选择某个元素的第一个子孩子。你通常可以使用这个办法来删除第一个或者最后一个元素的边框。\n\n例如，你有一系列的rows，每一个都有`border-top` 和`border-bottom`。这种情况下，第一行和最后一行看起来会灰常怪。\n\n很多设计师会使用first和last类来弥补这个缺陷。相反，你可以使用这些伪类来解决这些问题。\n\n\n#### 27.` X:last-child`\n```\nul > li:last-child {\n   color: green;\n}\n```\n与first-child相反，last-child会选择父节点的最后一个子节点。\n\n##### 例子：\n\n我们建立一些例子来示范这些类的可能的用法。我们会建立一种风格来展示。\n\n##### 标记\n```\n<ul>\n   <li> List Item </li>\n   <li> List Item </li>\n   <li> List Item </li>\n</ul>\n```\n没啥特别的，就是一个简单的序列。\n\n##### CSS\n\n```\nul {\n width: 200px;\n background: #292929;\n color: white;\n list-style: none;\n padding-left: 0;\n}\n\nli {\n padding: 10px;\n border-bottom: 1px solid black;\n border-top: 1px solid #3c3c3c;\n}\n```\n这个样式会设置一个背景，删除浏览器默认的ul的padding值，并定义边框给每一个li来提供一点深度。\n\n如上图所示，唯一的问题是最上面的边框和最下面的边框看起来有点儿怪。让我们来使用:first-child和:last-child来解决这个问题。\n```\nli:first-child {\n    border-top: none;\n}\n\nli:last-child {\n   border-bottom: none;\n}\n```\n看上面，解决了不是。\n\n是滴，IE8支持 first-child 不过不支持last-child。\n\n#### 28. `X:only-child`\n```\ndiv p:only-child {\n   color: red;\n}\n```\n实话说，你很可能会发现你不会经常使用 only-child伪类。尽管如此，它确实有用，你应该需要它。\n\n它可以帮助你选择是父节点的独生子（没别的孩子啦）的元素。例如，使用上面的代码，只有是div的唯一子孩子的p段落才会定义其颜色为red。\n\n让我们来假定下面的标记。\n\n```\n<div><p> My paragraph here. </p></div>\n\n<div>\n   <p> Two paragraphs total. </p>\n   <p> Two paragraphs total. </p>\n</div>\n```\n这样，第二个div的p标签的内容不会被选中。只有第一个div的p才会被选中。\n\n\n#### 29. `X:only-of-type`\n```\nli:only-of-type {\n   font-weight: bold;\n}\n```\n这种结构的伪类有几种灰常聪明的用法。它可以选定在其父节点内没有兄弟节点的元素。例如，我们可以选择只有一个li作为其子孩子的ul。\n\n首先，取决于你想怎样完成这一目标。你可以使用 ul li，不过，这回选择所有li元素。唯一的办法是使用`only-of-type`。\n\n```\nul > li:only-of-type {\n   font-weight: bold;\n}\n```\n\n#### 30.` X:first-of-type`\n`first-of-type `伪类可以让你选择该类型的第一个兄弟节点。\n\n为了更好地理解它，让我们来测试一下啊。拷贝下面的标记到你的编辑器。\n```\n<div>\n   <p> My paragraph here. </p>\n   <ul>\n      <li> List Item 1 </li>\n      <li> List Item 2 </li>\n   </ul>\n\n   <ul>\n      <li> List Item 3 </li>\n      <li> List Item 4 </li>\n   </ul>\n</div>\n```\n现在，别急着往下读，试试看如何能只选择’LIST ITEM 2’?如果你搞定了（或者放弃了），继续读。\n\n##### 解决办法1\n\n有很多办法能搞定这个测试。我们回顾其中一小部分。以使用first-of-type开始。\n\n```\nul:first-of-type > li:nth-child(2) {\n   font-weight: bold;\n}\n```\n这个代码段本质上表示，“找到第一个无序列表，然后找到这里面的li，然后，继续使用过滤器直到找到第二个li。\n\n##### 解决办法2\n\n另一个可行的办法是毗邻选择器。\n\n```\np + ul li:last-child {\n   font-weight: bold;\n}\n```\n在这个方案中，我们找到p的临近节点ul，然后找到ul的li的最后一个孩子。\n\n##### 解决办法3\n我们可以随心所欲滴选择这些选择器。\n```\nul:first-of-type li:nth-last-child(1) {\n   font-weight: bold;\n}\n```\n这次，我们取到第一个ul，然后找到第一个元素，不过是从最后一个开始数。哈哈。\n\n\n#### 结论\n如果你仍在为解决old浏览器的缺陷而纠结，如IE6。在使用这些新的选择器方面，你仍然需要非常小心。不过，别因为这个阻碍了你对这些新玩意儿的学习。别虐待自己。确保关注这里的兼容性列表。应一方面，你可以使用` Dean Edward’s excellent IE9.js script `来为旧浏览器提供新的选择器支持。（我去。cool）\n\n其次，当使用`javascript`库时，如流行的`jQuery`，最好尽可能使用这些`css3`本身的选择器而不是使用库的自定义方法/选择器。这能让你的代码更快哦，因为这些选择器引擎本身就能被浏览器解析，而不是用这些库选择器。\n","slug":"30个你必须记住的CSS选择符","published":1,"updated":"2018-02-07T03:35:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhd20000lxnd0apojh45","content":"<h2 id=\"30个你必须记住的CSS选择符\"><a href=\"#30个你必须记住的CSS选择符\" class=\"headerlink\" title=\"30个你必须记住的CSS选择符\"></a>30个你必须记住的CSS选择符</h2><p>你学会了基础的id，类和后代选择符，然后你就一直用它们了吗？如果是这样，你丢失了CSS巨大的灵活性。在本文中提到的很多选择器属于CSS3规范的一部分，因此，只有在现代浏览器中才可使用。</p>\n<h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.*\"></a>1.<code>*</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\"> margin: 0;</span><br><span class=\"line\"> padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于初学者，在学习更多高级选择器之前，<code>*</code>是最应先了解的选择器。</p>\n<p>星号选择器将匹配页面里的每一个元素。很多开发者使用这个技巧将外边距和内边距重置为零。虽然在快速测试时这确实很好用，但我建议你永远不要在生产代码中使用它。它给浏览器带来大量不必要的负担。</p>\n<p><code>*</code>也能作为子选择符使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container * &#123;</span><br><span class=\"line\"> border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这将匹配<code>#container div</code>的每一个后代元素。再次强调，尽量不要使用这种技术。</p>\n<h4 id=\"2-X\"><a href=\"#2-X\" class=\"headerlink\" title=\"2.#X\"></a>2.<code>#X</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container &#123;</span><br><span class=\"line\">   width: 960px;</span><br><span class=\"line\">   margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>#</code>号前缀允许我们选择id。这是最常见的用法，不过应该慎重使用ID选择器。</p>\n<p>id选择符是唯一的，不允许重复使用。如果可能的话，先尝试使用一个标签名称，一个新的HTML5元素，甚至是一个伪类。</p>\n<a id=\"more\"></a>\n<h4 id=\"3-X\"><a href=\"#3-X\" class=\"headerlink\" title=\"3. .X\"></a>3. <code>.X</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.error &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在介绍的是类选择符。id和类的不同之处在于后者可以多次使用。当你想给一组元素应用样式的时候可以使用类选择符。另外，当你紧想给特殊元素应用样式的时候才使用id。</p>\n<h4 id=\"4-X-Y\"><a href=\"#4-X-Y\" class=\"headerlink\" title=\"4. X Y\"></a>4. <code>X Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li a &#123;</span><br><span class=\"line\">  text-decoration: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一个最常用的选择符是后代选择符。当你需要给你的选择符增加特殊性的时候你可以使用。例如，如果你只想匹配无序列表下的锚元素？此时后代选择符派上用场。</p>\n<h4 id=\"5-X\"><a href=\"#5-X\" class=\"headerlink\" title=\"5. X\"></a>5. <code>X</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#123; color: red; &#125;</span><br><span class=\"line\">ul &#123; margin-left: 0; &#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想匹配页面上的所有的元素，根据他们的类型，而不是id或类名？显而易见，使用类型选择符。如果你需要选择所有的无序列表，请使用<code>ul {}</code>。</p>\n<h4 id=\"6-X-visited-and-X-link\"><a href=\"#6-X-visited-and-X-link\" class=\"headerlink\" title=\"6. X:visited and X:link\"></a>6. <code>X:visited</code> and <code>X:link</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:link &#123; color: red; &#125;</span><br><span class=\"line\">a:visted &#123; color: purple; &#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>:link</code> 伪类选择符选择所有已经被点击过的锚标签。</p>\n<p>此外，我们也有<code>:visited</code>伪类选择符，正如你期望的，允许我们仅给页面上被点击过的或被访问过的锚标签应用样式。</p>\n<h4 id=\"7-X-Y\"><a href=\"#7-X-Y\" class=\"headerlink\" title=\"7. X + Y\"></a>7. <code>X + Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul + p &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这被称作相邻选择符。它将只选择紧贴在X元素之后Y元素。上面的例子，仅每一个ul之后的第一个段落元素的文本为红色。</p>\n<h4 id=\"8-X-gt-Y\"><a href=\"#8-X-gt-Y\" class=\"headerlink\" title=\"8. X &gt; Y\"></a>8. <code>X &gt; Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div#container &gt; ul &#123;</span><br><span class=\"line\">  border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>X Y</code>和<code>X &gt; Y</code>之间的不同点是后者只选择直接子代。例如，考虑如下的标记。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">           &lt;li&gt; Child &lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">   &lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>选择符<code>#container &gt; ul</code>将只选择id为container的div的直接子代ul。它不匹配更深层的li的子代的ul。</p>\n<p>因此，使用子代选择符有性能上的优势。事实上，这同样适用于基于css选择器的javascript引擎。</p>\n<h4 id=\"9-X-Y\"><a href=\"#9-X-Y\" class=\"headerlink\" title=\"9.X ~ Y\"></a>9.<code>X ~ Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul ~ p &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是兄弟选择符和<code>X + Y</code>一样，然而，它没有约束。与相邻选择符（ul + li）仅选择前一个选择符后面的第一个元素比起来，兄弟选择符更宽泛。它会选择，我们上面例子中跟在ul后面的任何p元素。</p>\n<h4 id=\"10-X-title\"><a href=\"#10-X-title\" class=\"headerlink\" title=\"10. X[title]\"></a>10. <code>X[title]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[title] &#123;</span><br><span class=\"line\">   color: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>被称为属性选择器，在我们上面的例子里，这只会选择有title属性的锚标签。没有此属性的锚标签将不受影像。</p>\n<h4 id=\"11-X-href-”foo”\"><a href=\"#11-X-href-”foo”\" class=\"headerlink\" title=\"11. X[href=”foo”]\"></a>11. <code>X[href=”foo”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href=&quot;http://net.tutsplus.com&quot;] &#123;</span><br><span class=\"line\">  color: #1f6053; /* nettuts green */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码段将给所有<code>href</code>属性为<code>http://net.tutsplus.com</code>的锚标签添加样式；他们将会显示为我们的品牌绿色。所有其他的锚标签将不受影响。</p>\n<p>注意我们将href值用引号包裹。记住，当使用javascript的css选择符引擎时也这么做。如果可能的话，尽可能使用css3选择符代替非官方的方法。</p>\n<p>这工作的很好，但有点不够灵活。如果链接确实直接连接到Nettus+还好，但是，也许路径是到nettust的相对路径呢？在这种情况下，我们可以使用一点正则表达式语法。</p>\n<h4 id=\"12-X-href-”nettuts”\"><a href=\"#12-X-href-”nettuts”\" class=\"headerlink\" title=\"12. X[href*=”nettuts”]\"></a>12. <code>X[href*=”nettuts”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href*=&quot;tuts&quot;] &#123;</span><br><span class=\"line\">  color: #1f6053; /* nettuts green */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来了不是~这就是我们需要的代码。<code>*</code>号指定了包含该属性的值必须包含定义的值。就是说，这句代码包含了href值为<code>nettuts.com</code>，<code>net.tutsplus.com</code>或者<code>tutsplus.com</code>。</p>\n<p>记住这个描述过于宽泛，如果是某个锚点标签链接到某个连接中带有tuts非Envato的网站（tutsplus属于Envato旗下网站）呢？因此你需要更多特性来限制，分别使用^和&amp;来限定字符串的开始和结束。</p>\n<h4 id=\"13-X-href-”http”\"><a href=\"#13-X-href-”http”\" class=\"headerlink\" title=\"13. X[href^=”http”]\"></a>13. <code>X[href^=”http”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href^=&quot;http&quot;] &#123;</span><br><span class=\"line\">   background: url(path/to/external/icon.png) no-repeat;</span><br><span class=\"line\">   padding-left: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有没有想过某些网站是如何定义一个图标的链接的？我确定你肯定看到过。这些链接很容易让你跳转到另一个网站。</p>\n<p>使用<code>^(carat)</code>符灰常简单啦。这个符号常常在正则表达式中表示字符串的开始。如果我们想指向所有以<code>”http”</code>开头的<code>”href”</code>属性的锚点的话，我们就可以使用类似于上面的那段代码啦。</p>\n<p>注意啦，我们不需要搜索<code>”http://”</code>,完全没必要，因为我们还要包含以<code>https://</code>开头的链接呢。</p>\n<p>如果我们想为所有链接到图片的链接定义样式咋办？这种情况下，我们得搜索字符串的结束了不是。</p>\n<h4 id=\"14-X-href-”-jpg”\"><a href=\"#14-X-href-”-jpg”\" class=\"headerlink\" title=\"14. X[href$=”.jpg”]\"></a>14. <code>X[href$=”.jpg”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href$=&quot;.jpg&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>又来了，我们还是使用正则表达式符号，<code>$(dolor)</code>，来作为字符串的结束标记。这种情况下，我们就会搜索所有url以.jpg为结尾的锚点啦。记住记住这种情况下gif和png格式的图片不会被选择哦。</p>\n<h4 id=\"15-X-data-”foo”\"><a href=\"#15-X-data-”foo”\" class=\"headerlink\" title=\"15. X[data-*=”foo”]\"></a>15. <code>X[data-*=”foo”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[data-filetype=&quot;image&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回顾最近一条，我们如何能包含各种图片类型:png,jpeg,jpg,gif?很容易想到，我们能通过多个选择器来不是，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href$=&quot;.jpg&quot;],</span><br><span class=\"line\">a[href$=&quot;.jpeg&quot;],</span><br><span class=\"line\">a[href$=&quot;.png&quot;],</span><br><span class=\"line\">a[href$=&quot;.gif&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过，这样很蛋疼，效率极低。另一个解决办法是使用自定义属性。如果我们加了一种自己的 <code>data-filetype</code> 属性给每一个链接到图片的锚点的话呢？</p>\n<p><code>&lt;a href=&quot;path/to/image.jpg&quot; data-filetype=&quot;image&quot;&gt; Image Link &lt;/a&gt;</code></p>\n<p>这样关联后，我们就能使用标准的属性选择器来指定这些链接啦。看下面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[data-filetype=&quot;image&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"16-X-foo-”bar”\"><a href=\"#16-X-foo-”bar”\" class=\"headerlink\" title=\"16.X[foo~=”bar”]\"></a>16.<code>X[foo~=”bar”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[data-info~=&quot;external&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a[data-info~=&quot;image&quot;] &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这儿有个鲜为人知的特殊技巧，绝对让你印象时刻。<code>~(tilda)</code>符，它可以帮助我们指向那些以空格隔开多个值的属性的元素（真拗口，这翻译我自己都看不懂，水平问题）</p>\n<p>以我们第15条的自定义属性为例，上面的代码中我们创建了 <code>data-info</code>属性，这个属性可以定义以空格分隔的多个值。这样，这个链接本身就是个icon，并且指向的也是一个图片链接，像下面这样。</p>\n<p><code>&lt;a href=&quot;path/to/image.jpg&quot; data-info=&quot;external image&quot;&gt; Click Me, Fool &lt;/a&gt;</code><br>有了这样适当的标记，通过使用 ~ 属性选择器的技巧，我们就可以指向任何具有着两种属性的任何一种啦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Target data-info attr that contains the value &quot;external&quot; */</span><br><span class=\"line\">a[data-info~=&quot;external&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* And which contain the value &quot;image&quot; */</span><br><span class=\"line\">a[data-info~=&quot;image&quot;] &#123;</span><br><span class=\"line\">  border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很棒，不是吗？</p>\n<h4 id=\"17-X-checked\"><a href=\"#17-X-checked\" class=\"headerlink\" title=\"17.X:checked\"></a>17.<code>X:checked</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input[type=radio]:checked &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种伪类只会匹配已经被选中的单选元素。就是这么简单。</p>\n<h4 id=\"18-X-after\"><a href=\"#18-X-after\" class=\"headerlink\" title=\"18. X:after\"></a>18. <code>X:after</code></h4><p>before 和 after 伪元素也很蛋疼。貌似人们每天都能找到或者发明一些新办法来有效地使用它们。它们很容易控制选择器周围的内容。</p>\n<p>很多第一次使用是因为他们需要对<code>clear-fix</code>进行改进。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    content: &quot;&quot;;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    visibility: hidden;</span><br><span class=\"line\">    font-size: 0;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">   *display: inline-block;</span><br><span class=\"line\">   _height: 1%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个改进使用了:after伪类元素来在元素后增加一个空间，然后清除它。这个牛X的技巧你应该收藏到工具包里，特别是当<code>overflow:hidden</code>方法无能为力的时候。</p>\n<p>通过Css3选择器的标准说明书，你应该有技巧地使用这些伪类语法——双冒号::。不过为了兼容，浏览器会接受一个双引号。</p>\n<h4 id=\"19-X-hover\"><a href=\"#19-X-hover\" class=\"headerlink\" title=\"19. X:hover\"></a>19. <code>X:hover</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div:hover &#123;</span><br><span class=\"line\">  background: #e3e3e3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我去，这个你必须懂。典型的官方形式的用户触发伪类。听起来会有点迷惑，不过实际上并非如此。想在用户在某个元素上面悬停时定义个特别的样式？这个属性就是做这个的。</p>\n<p>记住啦，较old版本的IE，只能在锚点标签后使用这个hover。</p>\n<p>这个选择器你用得最多的情况，估计可能就是在锚点的悬停时加个<code>border-bottom</code>啦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:hover &#123;</span><br><span class=\"line\"> border-bottom: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>小贴士： <code>border-bottom:1px solid black;</code>比 <code>text-decoration:underline;</code>好看一点哦。（真的？我去）</p>\n<h4 id=\"20-X-not-selector\"><a href=\"#20-X-not-selector\" class=\"headerlink\" title=\"20. X:not(selector)\"></a>20. <code>X:not(selector)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div:not(#container) &#123;</span><br><span class=\"line\">   color: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>not伪类灰常有用。例如我要选择所有的div，除了有id为container的。上面那个代码片段就能完美的实现。</p>\n<p>如果我想选择除了p以外的所有元素，我可以这么做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*:not(p) &#123;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"21-X-pseudoElement\"><a href=\"#21-X-pseudoElement\" class=\"headerlink\" title=\"21. X::pseudoElement\"></a>21. <code>X::pseudoElement</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-line &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">   font-size: 1.2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以使用伪元素（以::为表示）来定义元素的样式。例如第一行，第一个字符，记住啦，这种方法只能应用于同级元素才有效。</p>\n<p>伪元素由两个冒号组成：::</p>\n<p>指定p的第一个字符的样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-letter &#123;</span><br><span class=\"line\">   float: left;</span><br><span class=\"line\">   font-size: 2em;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">   font-family: cursive;</span><br><span class=\"line\">   padding-right: 2px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码会找到所有段落，然后再从中定义这些段落的第一个字符。</p>\n<p>这常常使用在仿报纸的文章首字母样式。</p>\n<p>指定p的首行样式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-line &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">   font-size: 1.2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样，这个::first-line伪元素会像我们期望的那样，只定义段落的第一行的样式。</p>\n<h4 id=\"22-X-nth-child-n\"><a href=\"#22-X-nth-child-n\" class=\"headerlink\" title=\"22. X:nth-child(n)\"></a>22. <code>X:nth-child(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:nth-child(3) &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想想那些没法从元素堆中选择元素的日子。<code>nth-child</code>伪类解决了这个问题。</p>\n<p>请注意 <code>nth-child</code>接收整数和变量，不过不是从0开始的，如果你想选定第二个li，使用 <code>li:nth-child(2)</code>.</p>\n<p>我们甚至使用这个办法来选择任意的子元素。例如，我们可以用<code>li:nth-child(4n)</code>来完成4为倍数的所有元素的选择。</p>\n<h4 id=\"23-X-nth-last-child-n\"><a href=\"#23-X-nth-last-child-n\" class=\"headerlink\" title=\"23. X:nth-last-child(n)\"></a>23. <code>X:nth-last-child(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:nth-last-child(2) &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我有灰常多的li在ul里面，我只想要最后3个li怎么办？不必使用<code>li:nth-child(397)</code>,你可以使用<code>nth-last-child</code>伪类。</p>\n<p>这种技巧和第六条几乎一样有效，不过两者的不同之处在于它从结束开始收集，用回溯的方式进行。</p>\n<h4 id=\"24-X-nth-of-type-n\"><a href=\"#24-X-nth-of-type-n\" class=\"headerlink\" title=\"24. X:nth-of-type(n)\"></a>24. <code>X:nth-of-type(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:nth-of-type(3) &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你应该有很多时候想要元素类型来选择元素而不是通过孩子。</p>\n<p>想象一下标记5个无序列表（UL）。如果你想定义第三个ul，并且没有一个唯一的id来找到它，你就可以使用 nth-of-type(3)伪类了。在上面这个代码段中，只有第三个ul才会有黑色的边框。</p>\n<h4 id=\"25-X-nth-last-of-type-n\"><a href=\"#25-X-nth-last-of-type-n\" class=\"headerlink\" title=\"25. X:nth-last-of-type(n)\"></a>25. <code>X:nth-last-of-type(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:nth-last-of-type(3) &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，我们一样可以使用<code>nth-last-of-type</code>来从结束开始回溯这个选择器，来找到我们想要的元素</p>\n<h4 id=\"26-X-first-child\"><a href=\"#26-X-first-child\" class=\"headerlink\" title=\"26.X:first-child\"></a>26.<code>X:first-child</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul li:first-child &#123;</span><br><span class=\"line\">   border-top: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个结构的伪类让我们可以选择某个元素的第一个子孩子。你通常可以使用这个办法来删除第一个或者最后一个元素的边框。</p>\n<p>例如，你有一系列的rows，每一个都有<code>border-top</code> 和<code>border-bottom</code>。这种情况下，第一行和最后一行看起来会灰常怪。</p>\n<p>很多设计师会使用first和last类来弥补这个缺陷。相反，你可以使用这些伪类来解决这些问题。</p>\n<h4 id=\"27-X-last-child\"><a href=\"#27-X-last-child\" class=\"headerlink\" title=\"27.X:last-child\"></a>27.<code>X:last-child</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &gt; li:last-child &#123;</span><br><span class=\"line\">   color: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与first-child相反，last-child会选择父节点的最后一个子节点。</p>\n<h5 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h5><p>我们建立一些例子来示范这些类的可能的用法。我们会建立一种风格来展示。</p>\n<h5 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>没啥特别的，就是一个简单的序列。</p>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &#123;</span><br><span class=\"line\"> width: 200px;</span><br><span class=\"line\"> background: #292929;</span><br><span class=\"line\"> color: white;</span><br><span class=\"line\"> list-style: none;</span><br><span class=\"line\"> padding-left: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">li &#123;</span><br><span class=\"line\"> padding: 10px;</span><br><span class=\"line\"> border-bottom: 1px solid black;</span><br><span class=\"line\"> border-top: 1px solid #3c3c3c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个样式会设置一个背景，删除浏览器默认的ul的padding值，并定义边框给每一个li来提供一点深度。</p>\n<p>如上图所示，唯一的问题是最上面的边框和最下面的边框看起来有点儿怪。让我们来使用:first-child和:last-child来解决这个问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:first-child &#123;</span><br><span class=\"line\">    border-top: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">li:last-child &#123;</span><br><span class=\"line\">   border-bottom: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看上面，解决了不是。</p>\n<p>是滴，IE8支持 first-child 不过不支持last-child。</p>\n<h4 id=\"28-X-only-child\"><a href=\"#28-X-only-child\" class=\"headerlink\" title=\"28. X:only-child\"></a>28. <code>X:only-child</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div p:only-child &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实话说，你很可能会发现你不会经常使用 only-child伪类。尽管如此，它确实有用，你应该需要它。</p>\n<p>它可以帮助你选择是父节点的独生子（没别的孩子啦）的元素。例如，使用上面的代码，只有是div的唯一子孩子的p段落才会定义其颜色为red。</p>\n<p>让我们来假定下面的标记。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&lt;p&gt; My paragraph here. &lt;/p&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">   &lt;p&gt; Two paragraphs total. &lt;/p&gt;</span><br><span class=\"line\">   &lt;p&gt; Two paragraphs total. &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这样，第二个div的p标签的内容不会被选中。只有第一个div的p才会被选中。</p>\n<h4 id=\"29-X-only-of-type\"><a href=\"#29-X-only-of-type\" class=\"headerlink\" title=\"29. X:only-of-type\"></a>29. <code>X:only-of-type</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:only-of-type &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种结构的伪类有几种灰常聪明的用法。它可以选定在其父节点内没有兄弟节点的元素。例如，我们可以选择只有一个li作为其子孩子的ul。</p>\n<p>首先，取决于你想怎样完成这一目标。你可以使用 ul li，不过，这回选择所有li元素。唯一的办法是使用<code>only-of-type</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &gt; li:only-of-type &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"30-X-first-of-type\"><a href=\"#30-X-first-of-type\" class=\"headerlink\" title=\"30.X:first-of-type\"></a>30.<code>X:first-of-type</code></h4><p><code>first-of-type</code>伪类可以让你选择该类型的第一个兄弟节点。</p>\n<p>为了更好地理解它，让我们来测试一下啊。拷贝下面的标记到你的编辑器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">   &lt;p&gt; My paragraph here. &lt;/p&gt;</span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 1 &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 2 &lt;/li&gt;</span><br><span class=\"line\">   &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 3 &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 4 &lt;/li&gt;</span><br><span class=\"line\">   &lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>现在，别急着往下读，试试看如何能只选择’LIST ITEM 2’?如果你搞定了（或者放弃了），继续读。</p>\n<h5 id=\"解决办法1\"><a href=\"#解决办法1\" class=\"headerlink\" title=\"解决办法1\"></a>解决办法1</h5><p>有很多办法能搞定这个测试。我们回顾其中一小部分。以使用first-of-type开始。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:first-of-type &gt; li:nth-child(2) &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个代码段本质上表示，“找到第一个无序列表，然后找到这里面的li，然后，继续使用过滤器直到找到第二个li。</p>\n<h5 id=\"解决办法2\"><a href=\"#解决办法2\" class=\"headerlink\" title=\"解决办法2\"></a>解决办法2</h5><p>另一个可行的办法是毗邻选择器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p + ul li:last-child &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个方案中，我们找到p的临近节点ul，然后找到ul的li的最后一个孩子。</p>\n<h5 id=\"解决办法3\"><a href=\"#解决办法3\" class=\"headerlink\" title=\"解决办法3\"></a>解决办法3</h5><p>我们可以随心所欲滴选择这些选择器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:first-of-type li:nth-last-child(1) &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这次，我们取到第一个ul，然后找到第一个元素，不过是从最后一个开始数。哈哈。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>如果你仍在为解决old浏览器的缺陷而纠结，如IE6。在使用这些新的选择器方面，你仍然需要非常小心。不过，别因为这个阻碍了你对这些新玩意儿的学习。别虐待自己。确保关注这里的兼容性列表。应一方面，你可以使用<code>Dean Edward’s excellent IE9.js script</code>来为旧浏览器提供新的选择器支持。（我去。cool）</p>\n<p>其次，当使用<code>javascript</code>库时，如流行的<code>jQuery</code>，最好尽可能使用这些<code>css3</code>本身的选择器而不是使用库的自定义方法/选择器。这能让你的代码更快哦，因为这些选择器引擎本身就能被浏览器解析，而不是用这些库选择器。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"30个你必须记住的CSS选择符\"><a href=\"#30个你必须记住的CSS选择符\" class=\"headerlink\" title=\"30个你必须记住的CSS选择符\"></a>30个你必须记住的CSS选择符</h2><p>你学会了基础的id，类和后代选择符，然后你就一直用它们了吗？如果是这样，你丢失了CSS巨大的灵活性。在本文中提到的很多选择器属于CSS3规范的一部分，因此，只有在现代浏览器中才可使用。</p>\n<h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.*\"></a>1.<code>*</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\"> margin: 0;</span><br><span class=\"line\"> padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于初学者，在学习更多高级选择器之前，<code>*</code>是最应先了解的选择器。</p>\n<p>星号选择器将匹配页面里的每一个元素。很多开发者使用这个技巧将外边距和内边距重置为零。虽然在快速测试时这确实很好用，但我建议你永远不要在生产代码中使用它。它给浏览器带来大量不必要的负担。</p>\n<p><code>*</code>也能作为子选择符使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container * &#123;</span><br><span class=\"line\"> border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这将匹配<code>#container div</code>的每一个后代元素。再次强调，尽量不要使用这种技术。</p>\n<h4 id=\"2-X\"><a href=\"#2-X\" class=\"headerlink\" title=\"2.#X\"></a>2.<code>#X</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container &#123;</span><br><span class=\"line\">   width: 960px;</span><br><span class=\"line\">   margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>#</code>号前缀允许我们选择id。这是最常见的用法，不过应该慎重使用ID选择器。</p>\n<p>id选择符是唯一的，不允许重复使用。如果可能的话，先尝试使用一个标签名称，一个新的HTML5元素，甚至是一个伪类。</p>","more":"<h4 id=\"3-X\"><a href=\"#3-X\" class=\"headerlink\" title=\"3. .X\"></a>3. <code>.X</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.error &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在介绍的是类选择符。id和类的不同之处在于后者可以多次使用。当你想给一组元素应用样式的时候可以使用类选择符。另外，当你紧想给特殊元素应用样式的时候才使用id。</p>\n<h4 id=\"4-X-Y\"><a href=\"#4-X-Y\" class=\"headerlink\" title=\"4. X Y\"></a>4. <code>X Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li a &#123;</span><br><span class=\"line\">  text-decoration: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一个最常用的选择符是后代选择符。当你需要给你的选择符增加特殊性的时候你可以使用。例如，如果你只想匹配无序列表下的锚元素？此时后代选择符派上用场。</p>\n<h4 id=\"5-X\"><a href=\"#5-X\" class=\"headerlink\" title=\"5. X\"></a>5. <code>X</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#123; color: red; &#125;</span><br><span class=\"line\">ul &#123; margin-left: 0; &#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想匹配页面上的所有的元素，根据他们的类型，而不是id或类名？显而易见，使用类型选择符。如果你需要选择所有的无序列表，请使用<code>ul {}</code>。</p>\n<h4 id=\"6-X-visited-and-X-link\"><a href=\"#6-X-visited-and-X-link\" class=\"headerlink\" title=\"6. X:visited and X:link\"></a>6. <code>X:visited</code> and <code>X:link</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:link &#123; color: red; &#125;</span><br><span class=\"line\">a:visted &#123; color: purple; &#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>:link</code> 伪类选择符选择所有已经被点击过的锚标签。</p>\n<p>此外，我们也有<code>:visited</code>伪类选择符，正如你期望的，允许我们仅给页面上被点击过的或被访问过的锚标签应用样式。</p>\n<h4 id=\"7-X-Y\"><a href=\"#7-X-Y\" class=\"headerlink\" title=\"7. X + Y\"></a>7. <code>X + Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul + p &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这被称作相邻选择符。它将只选择紧贴在X元素之后Y元素。上面的例子，仅每一个ul之后的第一个段落元素的文本为红色。</p>\n<h4 id=\"8-X-gt-Y\"><a href=\"#8-X-gt-Y\" class=\"headerlink\" title=\"8. X &gt; Y\"></a>8. <code>X &gt; Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div#container &gt; ul &#123;</span><br><span class=\"line\">  border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>X Y</code>和<code>X &gt; Y</code>之间的不同点是后者只选择直接子代。例如，考虑如下的标记。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">           &lt;li&gt; Child &lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">   &lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>选择符<code>#container &gt; ul</code>将只选择id为container的div的直接子代ul。它不匹配更深层的li的子代的ul。</p>\n<p>因此，使用子代选择符有性能上的优势。事实上，这同样适用于基于css选择器的javascript引擎。</p>\n<h4 id=\"9-X-Y\"><a href=\"#9-X-Y\" class=\"headerlink\" title=\"9.X ~ Y\"></a>9.<code>X ~ Y</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul ~ p &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是兄弟选择符和<code>X + Y</code>一样，然而，它没有约束。与相邻选择符（ul + li）仅选择前一个选择符后面的第一个元素比起来，兄弟选择符更宽泛。它会选择，我们上面例子中跟在ul后面的任何p元素。</p>\n<h4 id=\"10-X-title\"><a href=\"#10-X-title\" class=\"headerlink\" title=\"10. X[title]\"></a>10. <code>X[title]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[title] &#123;</span><br><span class=\"line\">   color: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>被称为属性选择器，在我们上面的例子里，这只会选择有title属性的锚标签。没有此属性的锚标签将不受影像。</p>\n<h4 id=\"11-X-href-”foo”\"><a href=\"#11-X-href-”foo”\" class=\"headerlink\" title=\"11. X[href=”foo”]\"></a>11. <code>X[href=”foo”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href=&quot;http://net.tutsplus.com&quot;] &#123;</span><br><span class=\"line\">  color: #1f6053; /* nettuts green */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码段将给所有<code>href</code>属性为<code>http://net.tutsplus.com</code>的锚标签添加样式；他们将会显示为我们的品牌绿色。所有其他的锚标签将不受影响。</p>\n<p>注意我们将href值用引号包裹。记住，当使用javascript的css选择符引擎时也这么做。如果可能的话，尽可能使用css3选择符代替非官方的方法。</p>\n<p>这工作的很好，但有点不够灵活。如果链接确实直接连接到Nettus+还好，但是，也许路径是到nettust的相对路径呢？在这种情况下，我们可以使用一点正则表达式语法。</p>\n<h4 id=\"12-X-href-”nettuts”\"><a href=\"#12-X-href-”nettuts”\" class=\"headerlink\" title=\"12. X[href*=”nettuts”]\"></a>12. <code>X[href*=”nettuts”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href*=&quot;tuts&quot;] &#123;</span><br><span class=\"line\">  color: #1f6053; /* nettuts green */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来了不是~这就是我们需要的代码。<code>*</code>号指定了包含该属性的值必须包含定义的值。就是说，这句代码包含了href值为<code>nettuts.com</code>，<code>net.tutsplus.com</code>或者<code>tutsplus.com</code>。</p>\n<p>记住这个描述过于宽泛，如果是某个锚点标签链接到某个连接中带有tuts非Envato的网站（tutsplus属于Envato旗下网站）呢？因此你需要更多特性来限制，分别使用^和&amp;来限定字符串的开始和结束。</p>\n<h4 id=\"13-X-href-”http”\"><a href=\"#13-X-href-”http”\" class=\"headerlink\" title=\"13. X[href^=”http”]\"></a>13. <code>X[href^=”http”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href^=&quot;http&quot;] &#123;</span><br><span class=\"line\">   background: url(path/to/external/icon.png) no-repeat;</span><br><span class=\"line\">   padding-left: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有没有想过某些网站是如何定义一个图标的链接的？我确定你肯定看到过。这些链接很容易让你跳转到另一个网站。</p>\n<p>使用<code>^(carat)</code>符灰常简单啦。这个符号常常在正则表达式中表示字符串的开始。如果我们想指向所有以<code>”http”</code>开头的<code>”href”</code>属性的锚点的话，我们就可以使用类似于上面的那段代码啦。</p>\n<p>注意啦，我们不需要搜索<code>”http://”</code>,完全没必要，因为我们还要包含以<code>https://</code>开头的链接呢。</p>\n<p>如果我们想为所有链接到图片的链接定义样式咋办？这种情况下，我们得搜索字符串的结束了不是。</p>\n<h4 id=\"14-X-href-”-jpg”\"><a href=\"#14-X-href-”-jpg”\" class=\"headerlink\" title=\"14. X[href$=”.jpg”]\"></a>14. <code>X[href$=”.jpg”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href$=&quot;.jpg&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>又来了，我们还是使用正则表达式符号，<code>$(dolor)</code>，来作为字符串的结束标记。这种情况下，我们就会搜索所有url以.jpg为结尾的锚点啦。记住记住这种情况下gif和png格式的图片不会被选择哦。</p>\n<h4 id=\"15-X-data-”foo”\"><a href=\"#15-X-data-”foo”\" class=\"headerlink\" title=\"15. X[data-*=”foo”]\"></a>15. <code>X[data-*=”foo”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[data-filetype=&quot;image&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回顾最近一条，我们如何能包含各种图片类型:png,jpeg,jpg,gif?很容易想到，我们能通过多个选择器来不是，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[href$=&quot;.jpg&quot;],</span><br><span class=\"line\">a[href$=&quot;.jpeg&quot;],</span><br><span class=\"line\">a[href$=&quot;.png&quot;],</span><br><span class=\"line\">a[href$=&quot;.gif&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过，这样很蛋疼，效率极低。另一个解决办法是使用自定义属性。如果我们加了一种自己的 <code>data-filetype</code> 属性给每一个链接到图片的锚点的话呢？</p>\n<p><code>&lt;a href=&quot;path/to/image.jpg&quot; data-filetype=&quot;image&quot;&gt; Image Link &lt;/a&gt;</code></p>\n<p>这样关联后，我们就能使用标准的属性选择器来指定这些链接啦。看下面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[data-filetype=&quot;image&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"16-X-foo-”bar”\"><a href=\"#16-X-foo-”bar”\" class=\"headerlink\" title=\"16.X[foo~=”bar”]\"></a>16.<code>X[foo~=”bar”]</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[data-info~=&quot;external&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a[data-info~=&quot;image&quot;] &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这儿有个鲜为人知的特殊技巧，绝对让你印象时刻。<code>~(tilda)</code>符，它可以帮助我们指向那些以空格隔开多个值的属性的元素（真拗口，这翻译我自己都看不懂，水平问题）</p>\n<p>以我们第15条的自定义属性为例，上面的代码中我们创建了 <code>data-info</code>属性，这个属性可以定义以空格分隔的多个值。这样，这个链接本身就是个icon，并且指向的也是一个图片链接，像下面这样。</p>\n<p><code>&lt;a href=&quot;path/to/image.jpg&quot; data-info=&quot;external image&quot;&gt; Click Me, Fool &lt;/a&gt;</code><br>有了这样适当的标记，通过使用 ~ 属性选择器的技巧，我们就可以指向任何具有着两种属性的任何一种啦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Target data-info attr that contains the value &quot;external&quot; */</span><br><span class=\"line\">a[data-info~=&quot;external&quot;] &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* And which contain the value &quot;image&quot; */</span><br><span class=\"line\">a[data-info~=&quot;image&quot;] &#123;</span><br><span class=\"line\">  border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很棒，不是吗？</p>\n<h4 id=\"17-X-checked\"><a href=\"#17-X-checked\" class=\"headerlink\" title=\"17.X:checked\"></a>17.<code>X:checked</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input[type=radio]:checked &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种伪类只会匹配已经被选中的单选元素。就是这么简单。</p>\n<h4 id=\"18-X-after\"><a href=\"#18-X-after\" class=\"headerlink\" title=\"18. X:after\"></a>18. <code>X:after</code></h4><p>before 和 after 伪元素也很蛋疼。貌似人们每天都能找到或者发明一些新办法来有效地使用它们。它们很容易控制选择器周围的内容。</p>\n<p>很多第一次使用是因为他们需要对<code>clear-fix</code>进行改进。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    content: &quot;&quot;;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    visibility: hidden;</span><br><span class=\"line\">    font-size: 0;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">   *display: inline-block;</span><br><span class=\"line\">   _height: 1%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个改进使用了:after伪类元素来在元素后增加一个空间，然后清除它。这个牛X的技巧你应该收藏到工具包里，特别是当<code>overflow:hidden</code>方法无能为力的时候。</p>\n<p>通过Css3选择器的标准说明书，你应该有技巧地使用这些伪类语法——双冒号::。不过为了兼容，浏览器会接受一个双引号。</p>\n<h4 id=\"19-X-hover\"><a href=\"#19-X-hover\" class=\"headerlink\" title=\"19. X:hover\"></a>19. <code>X:hover</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div:hover &#123;</span><br><span class=\"line\">  background: #e3e3e3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我去，这个你必须懂。典型的官方形式的用户触发伪类。听起来会有点迷惑，不过实际上并非如此。想在用户在某个元素上面悬停时定义个特别的样式？这个属性就是做这个的。</p>\n<p>记住啦，较old版本的IE，只能在锚点标签后使用这个hover。</p>\n<p>这个选择器你用得最多的情况，估计可能就是在锚点的悬停时加个<code>border-bottom</code>啦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:hover &#123;</span><br><span class=\"line\"> border-bottom: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>小贴士： <code>border-bottom:1px solid black;</code>比 <code>text-decoration:underline;</code>好看一点哦。（真的？我去）</p>\n<h4 id=\"20-X-not-selector\"><a href=\"#20-X-not-selector\" class=\"headerlink\" title=\"20. X:not(selector)\"></a>20. <code>X:not(selector)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div:not(#container) &#123;</span><br><span class=\"line\">   color: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>not伪类灰常有用。例如我要选择所有的div，除了有id为container的。上面那个代码片段就能完美的实现。</p>\n<p>如果我想选择除了p以外的所有元素，我可以这么做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*:not(p) &#123;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"21-X-pseudoElement\"><a href=\"#21-X-pseudoElement\" class=\"headerlink\" title=\"21. X::pseudoElement\"></a>21. <code>X::pseudoElement</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-line &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">   font-size: 1.2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以使用伪元素（以::为表示）来定义元素的样式。例如第一行，第一个字符，记住啦，这种方法只能应用于同级元素才有效。</p>\n<p>伪元素由两个冒号组成：::</p>\n<p>指定p的第一个字符的样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-letter &#123;</span><br><span class=\"line\">   float: left;</span><br><span class=\"line\">   font-size: 2em;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">   font-family: cursive;</span><br><span class=\"line\">   padding-right: 2px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码会找到所有段落，然后再从中定义这些段落的第一个字符。</p>\n<p>这常常使用在仿报纸的文章首字母样式。</p>\n<p>指定p的首行样式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-line &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">   font-size: 1.2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样，这个::first-line伪元素会像我们期望的那样，只定义段落的第一行的样式。</p>\n<h4 id=\"22-X-nth-child-n\"><a href=\"#22-X-nth-child-n\" class=\"headerlink\" title=\"22. X:nth-child(n)\"></a>22. <code>X:nth-child(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:nth-child(3) &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想想那些没法从元素堆中选择元素的日子。<code>nth-child</code>伪类解决了这个问题。</p>\n<p>请注意 <code>nth-child</code>接收整数和变量，不过不是从0开始的，如果你想选定第二个li，使用 <code>li:nth-child(2)</code>.</p>\n<p>我们甚至使用这个办法来选择任意的子元素。例如，我们可以用<code>li:nth-child(4n)</code>来完成4为倍数的所有元素的选择。</p>\n<h4 id=\"23-X-nth-last-child-n\"><a href=\"#23-X-nth-last-child-n\" class=\"headerlink\" title=\"23. X:nth-last-child(n)\"></a>23. <code>X:nth-last-child(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:nth-last-child(2) &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我有灰常多的li在ul里面，我只想要最后3个li怎么办？不必使用<code>li:nth-child(397)</code>,你可以使用<code>nth-last-child</code>伪类。</p>\n<p>这种技巧和第六条几乎一样有效，不过两者的不同之处在于它从结束开始收集，用回溯的方式进行。</p>\n<h4 id=\"24-X-nth-of-type-n\"><a href=\"#24-X-nth-of-type-n\" class=\"headerlink\" title=\"24. X:nth-of-type(n)\"></a>24. <code>X:nth-of-type(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:nth-of-type(3) &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你应该有很多时候想要元素类型来选择元素而不是通过孩子。</p>\n<p>想象一下标记5个无序列表（UL）。如果你想定义第三个ul，并且没有一个唯一的id来找到它，你就可以使用 nth-of-type(3)伪类了。在上面这个代码段中，只有第三个ul才会有黑色的边框。</p>\n<h4 id=\"25-X-nth-last-of-type-n\"><a href=\"#25-X-nth-last-of-type-n\" class=\"headerlink\" title=\"25. X:nth-last-of-type(n)\"></a>25. <code>X:nth-last-of-type(n)</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:nth-last-of-type(3) &#123;</span><br><span class=\"line\">   border: 1px solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，我们一样可以使用<code>nth-last-of-type</code>来从结束开始回溯这个选择器，来找到我们想要的元素</p>\n<h4 id=\"26-X-first-child\"><a href=\"#26-X-first-child\" class=\"headerlink\" title=\"26.X:first-child\"></a>26.<code>X:first-child</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul li:first-child &#123;</span><br><span class=\"line\">   border-top: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个结构的伪类让我们可以选择某个元素的第一个子孩子。你通常可以使用这个办法来删除第一个或者最后一个元素的边框。</p>\n<p>例如，你有一系列的rows，每一个都有<code>border-top</code> 和<code>border-bottom</code>。这种情况下，第一行和最后一行看起来会灰常怪。</p>\n<p>很多设计师会使用first和last类来弥补这个缺陷。相反，你可以使用这些伪类来解决这些问题。</p>\n<h4 id=\"27-X-last-child\"><a href=\"#27-X-last-child\" class=\"headerlink\" title=\"27.X:last-child\"></a>27.<code>X:last-child</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &gt; li:last-child &#123;</span><br><span class=\"line\">   color: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与first-child相反，last-child会选择父节点的最后一个子节点。</p>\n<h5 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h5><p>我们建立一些例子来示范这些类的可能的用法。我们会建立一种风格来展示。</p>\n<h5 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt; List Item &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>没啥特别的，就是一个简单的序列。</p>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &#123;</span><br><span class=\"line\"> width: 200px;</span><br><span class=\"line\"> background: #292929;</span><br><span class=\"line\"> color: white;</span><br><span class=\"line\"> list-style: none;</span><br><span class=\"line\"> padding-left: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">li &#123;</span><br><span class=\"line\"> padding: 10px;</span><br><span class=\"line\"> border-bottom: 1px solid black;</span><br><span class=\"line\"> border-top: 1px solid #3c3c3c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个样式会设置一个背景，删除浏览器默认的ul的padding值，并定义边框给每一个li来提供一点深度。</p>\n<p>如上图所示，唯一的问题是最上面的边框和最下面的边框看起来有点儿怪。让我们来使用:first-child和:last-child来解决这个问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:first-child &#123;</span><br><span class=\"line\">    border-top: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">li:last-child &#123;</span><br><span class=\"line\">   border-bottom: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看上面，解决了不是。</p>\n<p>是滴，IE8支持 first-child 不过不支持last-child。</p>\n<h4 id=\"28-X-only-child\"><a href=\"#28-X-only-child\" class=\"headerlink\" title=\"28. X:only-child\"></a>28. <code>X:only-child</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div p:only-child &#123;</span><br><span class=\"line\">   color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实话说，你很可能会发现你不会经常使用 only-child伪类。尽管如此，它确实有用，你应该需要它。</p>\n<p>它可以帮助你选择是父节点的独生子（没别的孩子啦）的元素。例如，使用上面的代码，只有是div的唯一子孩子的p段落才会定义其颜色为red。</p>\n<p>让我们来假定下面的标记。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&lt;p&gt; My paragraph here. &lt;/p&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">   &lt;p&gt; Two paragraphs total. &lt;/p&gt;</span><br><span class=\"line\">   &lt;p&gt; Two paragraphs total. &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这样，第二个div的p标签的内容不会被选中。只有第一个div的p才会被选中。</p>\n<h4 id=\"29-X-only-of-type\"><a href=\"#29-X-only-of-type\" class=\"headerlink\" title=\"29. X:only-of-type\"></a>29. <code>X:only-of-type</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li:only-of-type &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种结构的伪类有几种灰常聪明的用法。它可以选定在其父节点内没有兄弟节点的元素。例如，我们可以选择只有一个li作为其子孩子的ul。</p>\n<p>首先，取决于你想怎样完成这一目标。你可以使用 ul li，不过，这回选择所有li元素。唯一的办法是使用<code>only-of-type</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul &gt; li:only-of-type &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"30-X-first-of-type\"><a href=\"#30-X-first-of-type\" class=\"headerlink\" title=\"30.X:first-of-type\"></a>30.<code>X:first-of-type</code></h4><p><code>first-of-type</code>伪类可以让你选择该类型的第一个兄弟节点。</p>\n<p>为了更好地理解它，让我们来测试一下啊。拷贝下面的标记到你的编辑器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">   &lt;p&gt; My paragraph here. &lt;/p&gt;</span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 1 &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 2 &lt;/li&gt;</span><br><span class=\"line\">   &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;ul&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 3 &lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt; List Item 4 &lt;/li&gt;</span><br><span class=\"line\">   &lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>现在，别急着往下读，试试看如何能只选择’LIST ITEM 2’?如果你搞定了（或者放弃了），继续读。</p>\n<h5 id=\"解决办法1\"><a href=\"#解决办法1\" class=\"headerlink\" title=\"解决办法1\"></a>解决办法1</h5><p>有很多办法能搞定这个测试。我们回顾其中一小部分。以使用first-of-type开始。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:first-of-type &gt; li:nth-child(2) &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个代码段本质上表示，“找到第一个无序列表，然后找到这里面的li，然后，继续使用过滤器直到找到第二个li。</p>\n<h5 id=\"解决办法2\"><a href=\"#解决办法2\" class=\"headerlink\" title=\"解决办法2\"></a>解决办法2</h5><p>另一个可行的办法是毗邻选择器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p + ul li:last-child &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个方案中，我们找到p的临近节点ul，然后找到ul的li的最后一个孩子。</p>\n<h5 id=\"解决办法3\"><a href=\"#解决办法3\" class=\"headerlink\" title=\"解决办法3\"></a>解决办法3</h5><p>我们可以随心所欲滴选择这些选择器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul:first-of-type li:nth-last-child(1) &#123;</span><br><span class=\"line\">   font-weight: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这次，我们取到第一个ul，然后找到第一个元素，不过是从最后一个开始数。哈哈。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>如果你仍在为解决old浏览器的缺陷而纠结，如IE6。在使用这些新的选择器方面，你仍然需要非常小心。不过，别因为这个阻碍了你对这些新玩意儿的学习。别虐待自己。确保关注这里的兼容性列表。应一方面，你可以使用<code>Dean Edward’s excellent IE9.js script</code>来为旧浏览器提供新的选择器支持。（我去。cool）</p>\n<p>其次，当使用<code>javascript</code>库时，如流行的<code>jQuery</code>，最好尽可能使用这些<code>css3</code>本身的选择器而不是使用库的自定义方法/选择器。这能让你的代码更快哦，因为这些选择器引擎本身就能被浏览器解析，而不是用这些库选择器。</p>"},{"title":"CSS清除浮动方法汇总","date":"2017-07-06T11:42:39.000Z","_content":"\n## CSS清除浮动方法汇总\n\n##### 在清除浮动前我们要了解两个重要的定义：\n\n- **浮动的定义**：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。\n\n- **高度塌陷**：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）\n\n知道浮动和为什么要清除浮动之后我们可以开始学习如何清除浮动了，这时候我们就需要用到清除浮动的属性`clear`：\n\n- clear:left | right | both | none | inherit：元素的某个方向上不能有浮动元素\n- clear:both：在左右两侧均不允许浮动元素。\n\n<!--more-->\n\n##### 具体清楚浮动的方法主要一下几种：\n\n##### 1、clear清除浮动（添加空div法）\n\n```\n在浮动元素下方添加空div,并给该元素写css样式：   {clear:both;height:0;overflow:hidden;}\n```\n\n##### 2、方法：给浮动元素父级设置高度\n\n```\n我们知道了高度塌陷是应为给浮动元素的父级高度是自适应导致的，那么我们给它的设置适当的高度就可以解决这个问题了。\n\n缺点：在浮动元素高度不确定的时候不适用\n```\n\n##### 3、方法：以浮制浮（父级同时浮动）\n\n```\n何谓“以浮制浮”呢？就是让 浮动元素的父级也浮动 。\n\n缺点：需要给每个浮动元素父级添加浮动，浮动多了容易出现问题。\n```\n\n##### 4、方法：父级设置成inline-block\n\n```\n缺点：父级的margin左右auto失效，无法使用margin: 0 auto;居中了\n```\n\n##### 5、 br 清浮动\n\n```\n<div class=\"box\">\n    <div class=\"top\"></div>\n    <br clear=\"both\" />\n</div>\n```\n\nbr 标签自带clear属性，将它设置成both其实和添加空div原理是一样的。\n\n问题：不符合工作中：结构、样式、行为，三者分离的要求。\n\n\n##### 6、给父级添加overflow:hidden 清浮动方法；\n\n```\n问题：需要配合 宽度 或者 zoom 兼容IE6 IE7；\n\noverflow: hidden;\n*zoom: 1;\n```\n\n##### 7、万能清除法 after伪类 清浮动（现在主流方法，推荐使用）\n\n```\n选择符:after{\n    content:\".\";\n    clear:both;\n    display:block;\n    height:0;\n    overflow:hidden;\n    visibility:hidden;\n}\n```\n\n同时为了兼容 IE6，7 同样需要配合zoom使用例如：\n\n```\n.clear:after{content:'';display:block;clear:both;height:0;overflow:hidden;visibility:hidden;}\n\n.clear{zoom:1;}\n```\n\n\n需要注意的东西：\n\n```\nafter伪类： 元素内部末尾添加内容；\n    :after{content\"添加的内容\";} IE6，7下不兼容\n\nzoom 缩放\n    a、触发 IE下 haslayout，使元素根据自身内容计算宽高；\n    b、FF 不支持。\n```\n\n\n[尊重原创，感谢原创分享](http://blog.csdn.net/promiseCao/article/details/52771856)","source":"_posts/CSS清除浮动方法汇总.md","raw":"---\ntitle: CSS清除浮动方法汇总\ndate: 2017-07-06 19:42:39\ncategories: 前端\ntags: CSS\n---\n\n## CSS清除浮动方法汇总\n\n##### 在清除浮动前我们要了解两个重要的定义：\n\n- **浮动的定义**：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。\n\n- **高度塌陷**：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）\n\n知道浮动和为什么要清除浮动之后我们可以开始学习如何清除浮动了，这时候我们就需要用到清除浮动的属性`clear`：\n\n- clear:left | right | both | none | inherit：元素的某个方向上不能有浮动元素\n- clear:both：在左右两侧均不允许浮动元素。\n\n<!--more-->\n\n##### 具体清楚浮动的方法主要一下几种：\n\n##### 1、clear清除浮动（添加空div法）\n\n```\n在浮动元素下方添加空div,并给该元素写css样式：   {clear:both;height:0;overflow:hidden;}\n```\n\n##### 2、方法：给浮动元素父级设置高度\n\n```\n我们知道了高度塌陷是应为给浮动元素的父级高度是自适应导致的，那么我们给它的设置适当的高度就可以解决这个问题了。\n\n缺点：在浮动元素高度不确定的时候不适用\n```\n\n##### 3、方法：以浮制浮（父级同时浮动）\n\n```\n何谓“以浮制浮”呢？就是让 浮动元素的父级也浮动 。\n\n缺点：需要给每个浮动元素父级添加浮动，浮动多了容易出现问题。\n```\n\n##### 4、方法：父级设置成inline-block\n\n```\n缺点：父级的margin左右auto失效，无法使用margin: 0 auto;居中了\n```\n\n##### 5、 br 清浮动\n\n```\n<div class=\"box\">\n    <div class=\"top\"></div>\n    <br clear=\"both\" />\n</div>\n```\n\nbr 标签自带clear属性，将它设置成both其实和添加空div原理是一样的。\n\n问题：不符合工作中：结构、样式、行为，三者分离的要求。\n\n\n##### 6、给父级添加overflow:hidden 清浮动方法；\n\n```\n问题：需要配合 宽度 或者 zoom 兼容IE6 IE7；\n\noverflow: hidden;\n*zoom: 1;\n```\n\n##### 7、万能清除法 after伪类 清浮动（现在主流方法，推荐使用）\n\n```\n选择符:after{\n    content:\".\";\n    clear:both;\n    display:block;\n    height:0;\n    overflow:hidden;\n    visibility:hidden;\n}\n```\n\n同时为了兼容 IE6，7 同样需要配合zoom使用例如：\n\n```\n.clear:after{content:'';display:block;clear:both;height:0;overflow:hidden;visibility:hidden;}\n\n.clear{zoom:1;}\n```\n\n\n需要注意的东西：\n\n```\nafter伪类： 元素内部末尾添加内容；\n    :after{content\"添加的内容\";} IE6，7下不兼容\n\nzoom 缩放\n    a、触发 IE下 haslayout，使元素根据自身内容计算宽高；\n    b、FF 不支持。\n```\n\n\n[尊重原创，感谢原创分享](http://blog.csdn.net/promiseCao/article/details/52771856)","slug":"CSS清除浮动方法汇总","published":1,"updated":"2018-02-09T03:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhdc0002lxndqf1xnx78","content":"<h2 id=\"CSS清除浮动方法汇总\"><a href=\"#CSS清除浮动方法汇总\" class=\"headerlink\" title=\"CSS清除浮动方法汇总\"></a>CSS清除浮动方法汇总</h2><h5 id=\"在清除浮动前我们要了解两个重要的定义：\"><a href=\"#在清除浮动前我们要了解两个重要的定义：\" class=\"headerlink\" title=\"在清除浮动前我们要了解两个重要的定义：\"></a>在清除浮动前我们要了解两个重要的定义：</h5><ul>\n<li><p><strong>浮动的定义</strong>：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。</p>\n</li>\n<li><p><strong>高度塌陷</strong>：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）</p>\n</li>\n</ul>\n<p>知道浮动和为什么要清除浮动之后我们可以开始学习如何清除浮动了，这时候我们就需要用到清除浮动的属性<code>clear</code>：</p>\n<ul>\n<li>clear:left | right | both | none | inherit：元素的某个方向上不能有浮动元素</li>\n<li>clear:both：在左右两侧均不允许浮动元素。</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"具体清楚浮动的方法主要一下几种：\"><a href=\"#具体清楚浮动的方法主要一下几种：\" class=\"headerlink\" title=\"具体清楚浮动的方法主要一下几种：\"></a>具体清楚浮动的方法主要一下几种：</h5><h5 id=\"1、clear清除浮动（添加空div法）\"><a href=\"#1、clear清除浮动（添加空div法）\" class=\"headerlink\" title=\"1、clear清除浮动（添加空div法）\"></a>1、clear清除浮动（添加空div法）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在浮动元素下方添加空div,并给该元素写css样式：   &#123;clear:both;height:0;overflow:hidden;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、方法：给浮动元素父级设置高度\"><a href=\"#2、方法：给浮动元素父级设置高度\" class=\"headerlink\" title=\"2、方法：给浮动元素父级设置高度\"></a>2、方法：给浮动元素父级设置高度</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们知道了高度塌陷是应为给浮动元素的父级高度是自适应导致的，那么我们给它的设置适当的高度就可以解决这个问题了。</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：在浮动元素高度不确定的时候不适用</span><br></pre></td></tr></table></figure>\n<h5 id=\"3、方法：以浮制浮（父级同时浮动）\"><a href=\"#3、方法：以浮制浮（父级同时浮动）\" class=\"headerlink\" title=\"3、方法：以浮制浮（父级同时浮动）\"></a>3、方法：以浮制浮（父级同时浮动）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">何谓“以浮制浮”呢？就是让 浮动元素的父级也浮动 。</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：需要给每个浮动元素父级添加浮动，浮动多了容易出现问题。</span><br></pre></td></tr></table></figure>\n<h5 id=\"4、方法：父级设置成inline-block\"><a href=\"#4、方法：父级设置成inline-block\" class=\"headerlink\" title=\"4、方法：父级设置成inline-block\"></a>4、方法：父级设置成inline-block</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缺点：父级的margin左右auto失效，无法使用margin: 0 auto;居中了</span><br></pre></td></tr></table></figure>\n<h5 id=\"5、-br-清浮动\"><a href=\"#5、-br-清浮动\" class=\"headerlink\" title=\"5、 br 清浮动\"></a>5、 br 清浮动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;top&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;br clear=&quot;both&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>br 标签自带clear属性，将它设置成both其实和添加空div原理是一样的。</p>\n<p>问题：不符合工作中：结构、样式、行为，三者分离的要求。</p>\n<h5 id=\"6、给父级添加overflow-hidden-清浮动方法；\"><a href=\"#6、给父级添加overflow-hidden-清浮动方法；\" class=\"headerlink\" title=\"6、给父级添加overflow:hidden 清浮动方法；\"></a>6、给父级添加overflow:hidden 清浮动方法；</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题：需要配合 宽度 或者 zoom 兼容IE6 IE7；</span><br><span class=\"line\"></span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">*zoom: 1;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7、万能清除法-after伪类-清浮动（现在主流方法，推荐使用）\"><a href=\"#7、万能清除法-after伪类-清浮动（现在主流方法，推荐使用）\" class=\"headerlink\" title=\"7、万能清除法 after伪类 清浮动（现在主流方法，推荐使用）\"></a>7、万能清除法 after伪类 清浮动（现在主流方法，推荐使用）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择符:after&#123;</span><br><span class=\"line\">    content:&quot;.&quot;;</span><br><span class=\"line\">    clear:both;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    height:0;</span><br><span class=\"line\">    overflow:hidden;</span><br><span class=\"line\">    visibility:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时为了兼容 IE6，7 同样需要配合zoom使用例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clear:after&#123;content:&apos;&apos;;display:block;clear:both;height:0;overflow:hidden;visibility:hidden;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clear&#123;zoom:1;&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的东西：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after伪类： 元素内部末尾添加内容；</span><br><span class=\"line\">    :after&#123;content&quot;添加的内容&quot;;&#125; IE6，7下不兼容</span><br><span class=\"line\"></span><br><span class=\"line\">zoom 缩放</span><br><span class=\"line\">    a、触发 IE下 haslayout，使元素根据自身内容计算宽高；</span><br><span class=\"line\">    b、FF 不支持。</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/promiseCao/article/details/52771856\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"CSS清除浮动方法汇总\"><a href=\"#CSS清除浮动方法汇总\" class=\"headerlink\" title=\"CSS清除浮动方法汇总\"></a>CSS清除浮动方法汇总</h2><h5 id=\"在清除浮动前我们要了解两个重要的定义：\"><a href=\"#在清除浮动前我们要了解两个重要的定义：\" class=\"headerlink\" title=\"在清除浮动前我们要了解两个重要的定义：\"></a>在清除浮动前我们要了解两个重要的定义：</h5><ul>\n<li><p><strong>浮动的定义</strong>：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。</p>\n</li>\n<li><p><strong>高度塌陷</strong>：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷）</p>\n</li>\n</ul>\n<p>知道浮动和为什么要清除浮动之后我们可以开始学习如何清除浮动了，这时候我们就需要用到清除浮动的属性<code>clear</code>：</p>\n<ul>\n<li>clear:left | right | both | none | inherit：元素的某个方向上不能有浮动元素</li>\n<li>clear:both：在左右两侧均不允许浮动元素。</li>\n</ul>","more":"<h5 id=\"具体清楚浮动的方法主要一下几种：\"><a href=\"#具体清楚浮动的方法主要一下几种：\" class=\"headerlink\" title=\"具体清楚浮动的方法主要一下几种：\"></a>具体清楚浮动的方法主要一下几种：</h5><h5 id=\"1、clear清除浮动（添加空div法）\"><a href=\"#1、clear清除浮动（添加空div法）\" class=\"headerlink\" title=\"1、clear清除浮动（添加空div法）\"></a>1、clear清除浮动（添加空div法）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在浮动元素下方添加空div,并给该元素写css样式：   &#123;clear:both;height:0;overflow:hidden;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、方法：给浮动元素父级设置高度\"><a href=\"#2、方法：给浮动元素父级设置高度\" class=\"headerlink\" title=\"2、方法：给浮动元素父级设置高度\"></a>2、方法：给浮动元素父级设置高度</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们知道了高度塌陷是应为给浮动元素的父级高度是自适应导致的，那么我们给它的设置适当的高度就可以解决这个问题了。</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：在浮动元素高度不确定的时候不适用</span><br></pre></td></tr></table></figure>\n<h5 id=\"3、方法：以浮制浮（父级同时浮动）\"><a href=\"#3、方法：以浮制浮（父级同时浮动）\" class=\"headerlink\" title=\"3、方法：以浮制浮（父级同时浮动）\"></a>3、方法：以浮制浮（父级同时浮动）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">何谓“以浮制浮”呢？就是让 浮动元素的父级也浮动 。</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：需要给每个浮动元素父级添加浮动，浮动多了容易出现问题。</span><br></pre></td></tr></table></figure>\n<h5 id=\"4、方法：父级设置成inline-block\"><a href=\"#4、方法：父级设置成inline-block\" class=\"headerlink\" title=\"4、方法：父级设置成inline-block\"></a>4、方法：父级设置成inline-block</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缺点：父级的margin左右auto失效，无法使用margin: 0 auto;居中了</span><br></pre></td></tr></table></figure>\n<h5 id=\"5、-br-清浮动\"><a href=\"#5、-br-清浮动\" class=\"headerlink\" title=\"5、 br 清浮动\"></a>5、 br 清浮动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;top&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;br clear=&quot;both&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>br 标签自带clear属性，将它设置成both其实和添加空div原理是一样的。</p>\n<p>问题：不符合工作中：结构、样式、行为，三者分离的要求。</p>\n<h5 id=\"6、给父级添加overflow-hidden-清浮动方法；\"><a href=\"#6、给父级添加overflow-hidden-清浮动方法；\" class=\"headerlink\" title=\"6、给父级添加overflow:hidden 清浮动方法；\"></a>6、给父级添加overflow:hidden 清浮动方法；</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题：需要配合 宽度 或者 zoom 兼容IE6 IE7；</span><br><span class=\"line\"></span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">*zoom: 1;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7、万能清除法-after伪类-清浮动（现在主流方法，推荐使用）\"><a href=\"#7、万能清除法-after伪类-清浮动（现在主流方法，推荐使用）\" class=\"headerlink\" title=\"7、万能清除法 after伪类 清浮动（现在主流方法，推荐使用）\"></a>7、万能清除法 after伪类 清浮动（现在主流方法，推荐使用）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择符:after&#123;</span><br><span class=\"line\">    content:&quot;.&quot;;</span><br><span class=\"line\">    clear:both;</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    height:0;</span><br><span class=\"line\">    overflow:hidden;</span><br><span class=\"line\">    visibility:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时为了兼容 IE6，7 同样需要配合zoom使用例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clear:after&#123;content:&apos;&apos;;display:block;clear:both;height:0;overflow:hidden;visibility:hidden;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clear&#123;zoom:1;&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的东西：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after伪类： 元素内部末尾添加内容；</span><br><span class=\"line\">    :after&#123;content&quot;添加的内容&quot;;&#125; IE6，7下不兼容</span><br><span class=\"line\"></span><br><span class=\"line\">zoom 缩放</span><br><span class=\"line\">    a、触发 IE下 haslayout，使元素根据自身内容计算宽高；</span><br><span class=\"line\">    b、FF 不支持。</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/promiseCao/article/details/52771856\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>"},{"title":"RN开发之调用WebView爬坑记","date":"2018-06-24T10:56:28.000Z","_content":"## RN开发之调用WebView爬坑记\n\n#### 解决React Native之Android手机中WebView不能调用相机相册的问题\n\n记录最近在RN开发中踩的一个坑以及分享我的爬坑记：Android手机不能在WebView中调用相机相册；我刚开始很困惑，大家都一致认为这是链接的第三方写的H5中调用相机相册的方法有问题所导致的，后来我通过查找原因，发现这是Android原生WebView中没有实现调用相机相册的功能；soga，知道原因后开始在网上查找解决方法，大概找到两三个类似的依赖包，于是开始尝试集成到现在的项目中去，结果全部jj：不是和其他依赖包冲突就是gradle build失败；唉，各种心塞心累，于是决定自己尝试桥接原生WebView，桥接的过程也是各种蜿蜒曲折啊；下面开始分享我桥接的过程，希望可以帮助有需要的人少踩点坑。\n\n<!--more-->\n\n##### 1. 为什么RN的android端webview不支持上传图片和调用相机？\nandroid原生的webview，本身就需要配置一个方法来配合上传图片，所以RN封装的webView没有配置这个方法\n\n```\n// For Android 4.1\n        public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture) {\n            if (mUploadMessage != null) {\n                mUploadMessage.onReceiveValue(null);\n            }\n            mUploadMessage = uploadMsg;\n            showPopSelectPic();\n        }\n\n        public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {\n            if (mUploadMessage != null) {\n                mUploadMessage.onReceiveValue(null);\n            }\n            mUploadMessage = filePathCallback;\n            showPopSelectPic();\n            return true;\n        }\n```\n\n\n##### 2. 如何给RN的webview配置上这个方法？\n在js代码中暂时没办法处理，那只好改原生的方法，原生的webview封装在react native包里，没办法改，只好重新封装一个webview.\n\n\n##### 3. 怎么重新封装一个RN组件？\n[可参考封装RN组件的教程](https://reactnative.cn/docs/0.45/native-component-android.html#content)\n\n1. 首先把`/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/webview`中的ReactWebViewManager的复制到自己的src的java包目录里\n2. 然后根据自己的需求进行更改，比如现在的需求事添加选择图片的配置\n\n(1). 新建一个ActivityResultInterface 接口回调\n\n```\ninterface ActivityResultInterface {\n    void callback(int requestCode, int resultCode, Intent data);\n}\n```\n\n(2). PickerActivityEventListener onActivityResult回调和自定义回调链接\n\n```\npublic class PickerActivityEventListener extends BaseActivityEventListener {\n\n    private ActivityResultInterface mCallback;\n\n    public PickerActivityEventListener(ReactApplicationContext reactContext, ActivityResultInterface callback) {\n        reactContext.addActivityEventListener(this);\n        mCallback = callback;\n    }\n\n    // < RN 0.33.0\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        mCallback.callback(requestCode, resultCode, data);\n    }\n\n    // >= RN 0.33.0\n    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {\n        mCallback.callback(requestCode, resultCode, data);\n    }\n}\n```\n\n(3). ReactWebViewManager 自定义添加配置\n\n```\npublic class ReactWebViewManager extends SimpleViewManager<WebView> implements ActivityResultInterface {\n    //一些初始化变量\n    private ReactApplicationContext reactApplicationContext;\n    private ValueCallback mUploadMessage;\n    private Uri imageUri;\n    private static final int TAKE_PHOTO = 10001;\n    private static final int CHOOSE_PHOTO = 10002;\n    protected static final String REACT_CLASS = \"RCTWebView2\";\n    ......\n    //修改构造方法\n    public ReactWebViewManager(ReactApplicationContext reactApplicationContext) {\n        this.reactApplicationContext = reactApplicationContext;\n        new PickerActivityEventListener(reactApplicationContext, this);\n        mWebViewConfig = new WebViewConfig() {\n            public void configWebView(WebView webView) {\n            }\n        };\n    }\n    ......\n     protected WebView createViewInstance(final ThemedReactContext reactContext) {\n        ReactWebView webView = createReactWebViewInstance(reactContext);\n        webView.setWebChromeClient(new WebChromeClient() {\n          ......\n            // For Android 4.1\n            public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture) {\n                if (mUploadMessage != null) {\n                    mUploadMessage.onReceiveValue(null);\n                }\n                mUploadMessage = uploadMsg;\n                showPopSelectPic(reactContext);\n            }\n\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {\n                if (mUploadMessage != null) {\n                    mUploadMessage.onReceiveValue(null);\n                }\n                mUploadMessage = filePathCallback;\n                showPopSelectPic(reactContext);\n                return true;\n            }\n\n        });\n        ......\n    }\n\n    private void showPopSelectPic(final ThemedReactContext Context) {\n        String[] items = new String[]{\"相机\", \"相册\"};\n        AlertDialog.Builder builder = new AlertDialog.Builder(Context);\n        builder.setTitle(\"提示\")\n                .setSingleChoiceItems(items, 0, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        dialog.dismiss();\n                        if (which == 0) {\n                            //openCamera\n                            File outputImage = new File(Context.getExternalCacheDir(), \"output_image.jpg\");\n                            try {\n                                if (outputImage.exists()) {\n                                    outputImage.delete();\n                                }\n                                outputImage.createNewFile();\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                            if (Build.VERSION.SDK_INT < 24) {\n                                imageUri = Uri.fromFile(outputImage);\n                            } else {\n                                imageUri = FileProvider.getUriForFile(Context, Context.getPackageName() + \".provider\", outputImage);\n                            }\n                            // 启动相机程序\n                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\n                                //ActivityCompat.requestPermissions(Context, new String[]{Manifest.permission.CAMERA}, 2);\n                            } else {\n                                openCamera();\n                            }\n                        } else if (which == 1) {\n                            //openAlbum\n                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                                //ActivityCompat.requestPermissions(Context, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);\n                            } else {\n                                openAlbum();\n                            }\n                        }\n                    }\n                })\n                .setOnCancelListener(new DialogInterface.OnCancelListener() {\n                    @Override\n                    public void onCancel(DialogInterface dialog) {\n                        if (mUploadMessage != null) {\n                            mUploadMessage.onReceiveValue(null);\n                            mUploadMessage = null;\n                        }\n                    }\n                });\n        builder.create().show();\n    }\n\n    void openCamera() {\n        Intent intent = new Intent(\"android.media.action.IMAGE_CAPTURE\");\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);\n        Activity currentActivity = reactApplicationContext.getCurrentActivity();\n        currentActivity.startActivityForResult(intent, TAKE_PHOTO);\n    }\n\n    void openAlbum() {\n        Intent intent = new Intent(\"android.intent.action.GET_CONTENT\");\n        intent.setType(\"image/*\");\n        Activity currentActivity = reactApplicationContext.getCurrentActivity();\n        currentActivity.startActivityForResult(intent, CHOOSE_PHOTO); // 打开相册\n    }\n\n    @Override\n    public void callback(int requestCode, int resultCode, Intent data) {\n        switch (requestCode) {\n            case TAKE_PHOTO:\n                if (resultCode == RESULT_OK) {\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                        mUploadMessage.onReceiveValue(new Uri[]{imageUri});\n                    } else {\n                        mUploadMessage.onReceiveValue(imageUri);\n                    }\n                    mUploadMessage = null;\n                } else {\n                    mUploadMessage.onReceiveValue(null);\n                    mUploadMessage = null;\n                    return;\n                }\n                break;\n            case CHOOSE_PHOTO:\n                if (resultCode == RESULT_OK) {\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                        mUploadMessage.onReceiveValue(new Uri[]{data.getData()});\n                    } else {\n                        mUploadMessage.onReceiveValue(data.getData());\n                    }\n                    mUploadMessage = null;\n                } else {\n                    mUploadMessage.onReceiveValue(null);\n                    mUploadMessage = null;\n                    return;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n```\n\n(4). 注意 需要注册FileProvider和设置xml path\n(注意此处可能会和其他上传图片的依赖包中的清单文件冲突，原因是配置的authorities冲突，只要修改一致即可)\n\n```\n//清单文件中注册\n<application\n    ...>\n\n   <provider\n        android:name=\"android.support.v4.content.FileProvider\"\n        android:authorities=\"com.company.app.provider\" //最好是包名+'.provider', 如果你的工程里集成有图片上传的依赖包，那么编译可能会有冲突，解决：你将此处修改成与冲突的依赖包一致即可，注意桥接方法里的图片路径(FileProvider)也要同步修改\n        android:exported=\"false\"\n        android:grantUriPermissions=\"true\">\n        <meta-data\n            android:name=\"android.support.FILE_PROVIDER_PATHS\"\n            android:resource=\"@xml/provider_paths\" //注意和冲突的依赖包进行比对修改\n        />\n    </provider>\n</application\n```\n\n(5). res资源文件中新建xml文件夹新建文件provider_paths.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <external-path name=\"app_images\" path=\".\" />\n</paths>\n```\n\n\n##### 4. 新建WebViewReactPackage.java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\n\n```\npublic class WebViewReactPackage implements ReactPackage {\n\n    public List<Class<? extends JavaScriptModule>> createJSModules() {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<ViewManager> createViewManagers(ReactApplicationContext reactApplicationContext) {\n        return Arrays.<ViewManager>asList(\n                new ReactWebViewManager(reactApplicationContext)\n        );\n    }\n\n    @Override\n    public List<NativeModule> createNativeModules(\n            ReactApplicationContext reactApplicationContext) {\n        return Collections.emptyList();\n    }\n}\n```\n\n\n##### 5. 将WebViewReactPackage写入MainApplication中\n\n```\npublic class MainApplication extends Application implements ReactApplication {\n......\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n  ......\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n          new MainReactPackage(),\n            new WebViewReactPackage()\n      );\n    }\n ......\n  };\n......\n}\n```\n\n\n##### 6. 在项目新建BridgeWebView.js文件，把`/node_modules/react-native/Libraries/Components/WebView`中的webview.android.js,复制到自己的js文件夹中，做一定的修改\n\n```\n// 修改部分\nvar RCT_WEBVIEW_REF = 'webview';\n......\nclass WebViewBridge extends React.Component {\n    ......\n    var RCTWebView = requireNativeComponent('RCTWebViewOpenImg', WebViewBridge, WebViewBridge.extraNativeComponentConfig); //RCTWebViewOpenImg与ReactWebViewManager的REACT_CLASS对应\nmodule.exports = WebViewBridge;\n```\n\n\n##### 7. 最后你在需要用的js文件，引入BridgeWebView.js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView.","source":"_posts/RN开发之调用WebView爬坑记.md","raw":"---\ntitle: RN开发之调用WebView爬坑记\ndate: 2018-06-24 18:56:28\ncategories: React Native\ntags: 爬坑\n---\n## RN开发之调用WebView爬坑记\n\n#### 解决React Native之Android手机中WebView不能调用相机相册的问题\n\n记录最近在RN开发中踩的一个坑以及分享我的爬坑记：Android手机不能在WebView中调用相机相册；我刚开始很困惑，大家都一致认为这是链接的第三方写的H5中调用相机相册的方法有问题所导致的，后来我通过查找原因，发现这是Android原生WebView中没有实现调用相机相册的功能；soga，知道原因后开始在网上查找解决方法，大概找到两三个类似的依赖包，于是开始尝试集成到现在的项目中去，结果全部jj：不是和其他依赖包冲突就是gradle build失败；唉，各种心塞心累，于是决定自己尝试桥接原生WebView，桥接的过程也是各种蜿蜒曲折啊；下面开始分享我桥接的过程，希望可以帮助有需要的人少踩点坑。\n\n<!--more-->\n\n##### 1. 为什么RN的android端webview不支持上传图片和调用相机？\nandroid原生的webview，本身就需要配置一个方法来配合上传图片，所以RN封装的webView没有配置这个方法\n\n```\n// For Android 4.1\n        public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture) {\n            if (mUploadMessage != null) {\n                mUploadMessage.onReceiveValue(null);\n            }\n            mUploadMessage = uploadMsg;\n            showPopSelectPic();\n        }\n\n        public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {\n            if (mUploadMessage != null) {\n                mUploadMessage.onReceiveValue(null);\n            }\n            mUploadMessage = filePathCallback;\n            showPopSelectPic();\n            return true;\n        }\n```\n\n\n##### 2. 如何给RN的webview配置上这个方法？\n在js代码中暂时没办法处理，那只好改原生的方法，原生的webview封装在react native包里，没办法改，只好重新封装一个webview.\n\n\n##### 3. 怎么重新封装一个RN组件？\n[可参考封装RN组件的教程](https://reactnative.cn/docs/0.45/native-component-android.html#content)\n\n1. 首先把`/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/webview`中的ReactWebViewManager的复制到自己的src的java包目录里\n2. 然后根据自己的需求进行更改，比如现在的需求事添加选择图片的配置\n\n(1). 新建一个ActivityResultInterface 接口回调\n\n```\ninterface ActivityResultInterface {\n    void callback(int requestCode, int resultCode, Intent data);\n}\n```\n\n(2). PickerActivityEventListener onActivityResult回调和自定义回调链接\n\n```\npublic class PickerActivityEventListener extends BaseActivityEventListener {\n\n    private ActivityResultInterface mCallback;\n\n    public PickerActivityEventListener(ReactApplicationContext reactContext, ActivityResultInterface callback) {\n        reactContext.addActivityEventListener(this);\n        mCallback = callback;\n    }\n\n    // < RN 0.33.0\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        mCallback.callback(requestCode, resultCode, data);\n    }\n\n    // >= RN 0.33.0\n    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {\n        mCallback.callback(requestCode, resultCode, data);\n    }\n}\n```\n\n(3). ReactWebViewManager 自定义添加配置\n\n```\npublic class ReactWebViewManager extends SimpleViewManager<WebView> implements ActivityResultInterface {\n    //一些初始化变量\n    private ReactApplicationContext reactApplicationContext;\n    private ValueCallback mUploadMessage;\n    private Uri imageUri;\n    private static final int TAKE_PHOTO = 10001;\n    private static final int CHOOSE_PHOTO = 10002;\n    protected static final String REACT_CLASS = \"RCTWebView2\";\n    ......\n    //修改构造方法\n    public ReactWebViewManager(ReactApplicationContext reactApplicationContext) {\n        this.reactApplicationContext = reactApplicationContext;\n        new PickerActivityEventListener(reactApplicationContext, this);\n        mWebViewConfig = new WebViewConfig() {\n            public void configWebView(WebView webView) {\n            }\n        };\n    }\n    ......\n     protected WebView createViewInstance(final ThemedReactContext reactContext) {\n        ReactWebView webView = createReactWebViewInstance(reactContext);\n        webView.setWebChromeClient(new WebChromeClient() {\n          ......\n            // For Android 4.1\n            public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture) {\n                if (mUploadMessage != null) {\n                    mUploadMessage.onReceiveValue(null);\n                }\n                mUploadMessage = uploadMsg;\n                showPopSelectPic(reactContext);\n            }\n\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {\n                if (mUploadMessage != null) {\n                    mUploadMessage.onReceiveValue(null);\n                }\n                mUploadMessage = filePathCallback;\n                showPopSelectPic(reactContext);\n                return true;\n            }\n\n        });\n        ......\n    }\n\n    private void showPopSelectPic(final ThemedReactContext Context) {\n        String[] items = new String[]{\"相机\", \"相册\"};\n        AlertDialog.Builder builder = new AlertDialog.Builder(Context);\n        builder.setTitle(\"提示\")\n                .setSingleChoiceItems(items, 0, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        dialog.dismiss();\n                        if (which == 0) {\n                            //openCamera\n                            File outputImage = new File(Context.getExternalCacheDir(), \"output_image.jpg\");\n                            try {\n                                if (outputImage.exists()) {\n                                    outputImage.delete();\n                                }\n                                outputImage.createNewFile();\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                            if (Build.VERSION.SDK_INT < 24) {\n                                imageUri = Uri.fromFile(outputImage);\n                            } else {\n                                imageUri = FileProvider.getUriForFile(Context, Context.getPackageName() + \".provider\", outputImage);\n                            }\n                            // 启动相机程序\n                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\n                                //ActivityCompat.requestPermissions(Context, new String[]{Manifest.permission.CAMERA}, 2);\n                            } else {\n                                openCamera();\n                            }\n                        } else if (which == 1) {\n                            //openAlbum\n                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                                //ActivityCompat.requestPermissions(Context, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);\n                            } else {\n                                openAlbum();\n                            }\n                        }\n                    }\n                })\n                .setOnCancelListener(new DialogInterface.OnCancelListener() {\n                    @Override\n                    public void onCancel(DialogInterface dialog) {\n                        if (mUploadMessage != null) {\n                            mUploadMessage.onReceiveValue(null);\n                            mUploadMessage = null;\n                        }\n                    }\n                });\n        builder.create().show();\n    }\n\n    void openCamera() {\n        Intent intent = new Intent(\"android.media.action.IMAGE_CAPTURE\");\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);\n        Activity currentActivity = reactApplicationContext.getCurrentActivity();\n        currentActivity.startActivityForResult(intent, TAKE_PHOTO);\n    }\n\n    void openAlbum() {\n        Intent intent = new Intent(\"android.intent.action.GET_CONTENT\");\n        intent.setType(\"image/*\");\n        Activity currentActivity = reactApplicationContext.getCurrentActivity();\n        currentActivity.startActivityForResult(intent, CHOOSE_PHOTO); // 打开相册\n    }\n\n    @Override\n    public void callback(int requestCode, int resultCode, Intent data) {\n        switch (requestCode) {\n            case TAKE_PHOTO:\n                if (resultCode == RESULT_OK) {\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                        mUploadMessage.onReceiveValue(new Uri[]{imageUri});\n                    } else {\n                        mUploadMessage.onReceiveValue(imageUri);\n                    }\n                    mUploadMessage = null;\n                } else {\n                    mUploadMessage.onReceiveValue(null);\n                    mUploadMessage = null;\n                    return;\n                }\n                break;\n            case CHOOSE_PHOTO:\n                if (resultCode == RESULT_OK) {\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                        mUploadMessage.onReceiveValue(new Uri[]{data.getData()});\n                    } else {\n                        mUploadMessage.onReceiveValue(data.getData());\n                    }\n                    mUploadMessage = null;\n                } else {\n                    mUploadMessage.onReceiveValue(null);\n                    mUploadMessage = null;\n                    return;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n```\n\n(4). 注意 需要注册FileProvider和设置xml path\n(注意此处可能会和其他上传图片的依赖包中的清单文件冲突，原因是配置的authorities冲突，只要修改一致即可)\n\n```\n//清单文件中注册\n<application\n    ...>\n\n   <provider\n        android:name=\"android.support.v4.content.FileProvider\"\n        android:authorities=\"com.company.app.provider\" //最好是包名+'.provider', 如果你的工程里集成有图片上传的依赖包，那么编译可能会有冲突，解决：你将此处修改成与冲突的依赖包一致即可，注意桥接方法里的图片路径(FileProvider)也要同步修改\n        android:exported=\"false\"\n        android:grantUriPermissions=\"true\">\n        <meta-data\n            android:name=\"android.support.FILE_PROVIDER_PATHS\"\n            android:resource=\"@xml/provider_paths\" //注意和冲突的依赖包进行比对修改\n        />\n    </provider>\n</application\n```\n\n(5). res资源文件中新建xml文件夹新建文件provider_paths.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <external-path name=\"app_images\" path=\".\" />\n</paths>\n```\n\n\n##### 4. 新建WebViewReactPackage.java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\n\n```\npublic class WebViewReactPackage implements ReactPackage {\n\n    public List<Class<? extends JavaScriptModule>> createJSModules() {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<ViewManager> createViewManagers(ReactApplicationContext reactApplicationContext) {\n        return Arrays.<ViewManager>asList(\n                new ReactWebViewManager(reactApplicationContext)\n        );\n    }\n\n    @Override\n    public List<NativeModule> createNativeModules(\n            ReactApplicationContext reactApplicationContext) {\n        return Collections.emptyList();\n    }\n}\n```\n\n\n##### 5. 将WebViewReactPackage写入MainApplication中\n\n```\npublic class MainApplication extends Application implements ReactApplication {\n......\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n  ......\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n          new MainReactPackage(),\n            new WebViewReactPackage()\n      );\n    }\n ......\n  };\n......\n}\n```\n\n\n##### 6. 在项目新建BridgeWebView.js文件，把`/node_modules/react-native/Libraries/Components/WebView`中的webview.android.js,复制到自己的js文件夹中，做一定的修改\n\n```\n// 修改部分\nvar RCT_WEBVIEW_REF = 'webview';\n......\nclass WebViewBridge extends React.Component {\n    ......\n    var RCTWebView = requireNativeComponent('RCTWebViewOpenImg', WebViewBridge, WebViewBridge.extraNativeComponentConfig); //RCTWebViewOpenImg与ReactWebViewManager的REACT_CLASS对应\nmodule.exports = WebViewBridge;\n```\n\n\n##### 7. 最后你在需要用的js文件，引入BridgeWebView.js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView.","slug":"RN开发之调用WebView爬坑记","published":1,"updated":"2018-07-24T07:36:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhdl0005lxndqmsx4wzi","content":"<h2 id=\"RN开发之调用WebView爬坑记\"><a href=\"#RN开发之调用WebView爬坑记\" class=\"headerlink\" title=\"RN开发之调用WebView爬坑记\"></a>RN开发之调用WebView爬坑记</h2><h4 id=\"解决React-Native之Android手机中WebView不能调用相机相册的问题\"><a href=\"#解决React-Native之Android手机中WebView不能调用相机相册的问题\" class=\"headerlink\" title=\"解决React Native之Android手机中WebView不能调用相机相册的问题\"></a>解决React Native之Android手机中WebView不能调用相机相册的问题</h4><p>记录最近在RN开发中踩的一个坑以及分享我的爬坑记：Android手机不能在WebView中调用相机相册；我刚开始很困惑，大家都一致认为这是链接的第三方写的H5中调用相机相册的方法有问题所导致的，后来我通过查找原因，发现这是Android原生WebView中没有实现调用相机相册的功能；soga，知道原因后开始在网上查找解决方法，大概找到两三个类似的依赖包，于是开始尝试集成到现在的项目中去，结果全部jj：不是和其他依赖包冲突就是gradle build失败；唉，各种心塞心累，于是决定自己尝试桥接原生WebView，桥接的过程也是各种蜿蜒曲折啊；下面开始分享我桥接的过程，希望可以帮助有需要的人少踩点坑。</p>\n<a id=\"more\"></a>\n<h5 id=\"1-为什么RN的android端webview不支持上传图片和调用相机？\"><a href=\"#1-为什么RN的android端webview不支持上传图片和调用相机？\" class=\"headerlink\" title=\"1. 为什么RN的android端webview不支持上传图片和调用相机？\"></a>1. 为什么RN的android端webview不支持上传图片和调用相机？</h5><p>android原生的webview，本身就需要配置一个方法来配合上传图片，所以RN封装的webView没有配置这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// For Android 4.1</span><br><span class=\"line\">        public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture) &#123;</span><br><span class=\"line\">            if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mUploadMessage = uploadMsg;</span><br><span class=\"line\">            showPopSelectPic();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams) &#123;</span><br><span class=\"line\">            if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mUploadMessage = filePathCallback;</span><br><span class=\"line\">            showPopSelectPic();</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-如何给RN的webview配置上这个方法？\"><a href=\"#2-如何给RN的webview配置上这个方法？\" class=\"headerlink\" title=\"2. 如何给RN的webview配置上这个方法？\"></a>2. 如何给RN的webview配置上这个方法？</h5><p>在js代码中暂时没办法处理，那只好改原生的方法，原生的webview封装在react native包里，没办法改，只好重新封装一个webview.</p>\n<h5 id=\"3-怎么重新封装一个RN组件？\"><a href=\"#3-怎么重新封装一个RN组件？\" class=\"headerlink\" title=\"3. 怎么重新封装一个RN组件？\"></a>3. 怎么重新封装一个RN组件？</h5><p><a href=\"https://reactnative.cn/docs/0.45/native-component-android.html#content\" target=\"_blank\" rel=\"noopener\">可参考封装RN组件的教程</a></p>\n<ol>\n<li>首先把<code>/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/webview</code>中的ReactWebViewManager的复制到自己的src的java包目录里</li>\n<li>然后根据自己的需求进行更改，比如现在的需求事添加选择图片的配置</li>\n</ol>\n<p>(1). 新建一个ActivityResultInterface 接口回调</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ActivityResultInterface &#123;</span><br><span class=\"line\">    void callback(int requestCode, int resultCode, Intent data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2). PickerActivityEventListener onActivityResult回调和自定义回调链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PickerActivityEventListener extends BaseActivityEventListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ActivityResultInterface mCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PickerActivityEventListener(ReactApplicationContext reactContext, ActivityResultInterface callback) &#123;</span><br><span class=\"line\">        reactContext.addActivityEventListener(this);</span><br><span class=\"line\">        mCallback = callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // &lt; RN 0.33.0</span><br><span class=\"line\">    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class=\"line\">        mCallback.callback(requestCode, resultCode, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // &gt;= RN 0.33.0</span><br><span class=\"line\">    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) &#123;</span><br><span class=\"line\">        mCallback.callback(requestCode, resultCode, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3). ReactWebViewManager 自定义添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ReactWebViewManager extends SimpleViewManager&lt;WebView&gt; implements ActivityResultInterface &#123;</span><br><span class=\"line\">    //一些初始化变量</span><br><span class=\"line\">    private ReactApplicationContext reactApplicationContext;</span><br><span class=\"line\">    private ValueCallback mUploadMessage;</span><br><span class=\"line\">    private Uri imageUri;</span><br><span class=\"line\">    private static final int TAKE_PHOTO = 10001;</span><br><span class=\"line\">    private static final int CHOOSE_PHOTO = 10002;</span><br><span class=\"line\">    protected static final String REACT_CLASS = &quot;RCTWebView2&quot;;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    //修改构造方法</span><br><span class=\"line\">    public ReactWebViewManager(ReactApplicationContext reactApplicationContext) &#123;</span><br><span class=\"line\">        this.reactApplicationContext = reactApplicationContext;</span><br><span class=\"line\">        new PickerActivityEventListener(reactApplicationContext, this);</span><br><span class=\"line\">        mWebViewConfig = new WebViewConfig() &#123;</span><br><span class=\"line\">            public void configWebView(WebView webView) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">     protected WebView createViewInstance(final ThemedReactContext reactContext) &#123;</span><br><span class=\"line\">        ReactWebView webView = createReactWebViewInstance(reactContext);</span><br><span class=\"line\">        webView.setWebChromeClient(new WebChromeClient() &#123;</span><br><span class=\"line\">          ......</span><br><span class=\"line\">            // For Android 4.1</span><br><span class=\"line\">            public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture) &#123;</span><br><span class=\"line\">                if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mUploadMessage = uploadMsg;</span><br><span class=\"line\">                showPopSelectPic(reactContext);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams) &#123;</span><br><span class=\"line\">                if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mUploadMessage = filePathCallback;</span><br><span class=\"line\">                showPopSelectPic(reactContext);</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void showPopSelectPic(final ThemedReactContext Context) &#123;</span><br><span class=\"line\">        String[] items = new String[]&#123;&quot;相机&quot;, &quot;相册&quot;&#125;;</span><br><span class=\"line\">        AlertDialog.Builder builder = new AlertDialog.Builder(Context);</span><br><span class=\"line\">        builder.setTitle(&quot;提示&quot;)</span><br><span class=\"line\">                .setSingleChoiceItems(items, 0, new DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class=\"line\">                        dialog.dismiss();</span><br><span class=\"line\">                        if (which == 0) &#123;</span><br><span class=\"line\">                            //openCamera</span><br><span class=\"line\">                            File outputImage = new File(Context.getExternalCacheDir(), &quot;output_image.jpg&quot;);</span><br><span class=\"line\">                            try &#123;</span><br><span class=\"line\">                                if (outputImage.exists()) &#123;</span><br><span class=\"line\">                                    outputImage.delete();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                outputImage.createNewFile();</span><br><span class=\"line\">                            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                                e.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            if (Build.VERSION.SDK_INT &lt; 24) &#123;</span><br><span class=\"line\">                                imageUri = Uri.fromFile(outputImage);</span><br><span class=\"line\">                            &#125; else &#123;</span><br><span class=\"line\">                                imageUri = FileProvider.getUriForFile(Context, Context.getPackageName() + &quot;.provider&quot;, outputImage);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            // 启动相机程序</span><br><span class=\"line\">                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                                //ActivityCompat.requestPermissions(Context, new String[]&#123;Manifest.permission.CAMERA&#125;, 2);</span><br><span class=\"line\">                            &#125; else &#123;</span><br><span class=\"line\">                                openCamera();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; else if (which == 1) &#123;</span><br><span class=\"line\">                            //openAlbum</span><br><span class=\"line\">                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                                //ActivityCompat.requestPermissions(Context, new String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, 1);</span><br><span class=\"line\">                            &#125; else &#123;</span><br><span class=\"line\">                                openAlbum();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setOnCancelListener(new DialogInterface.OnCancelListener() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void onCancel(DialogInterface dialog) &#123;</span><br><span class=\"line\">                        if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                            mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                            mUploadMessage = null;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        builder.create().show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void openCamera() &#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.media.action.IMAGE_CAPTURE&quot;);</span><br><span class=\"line\">        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class=\"line\">        Activity currentActivity = reactApplicationContext.getCurrentActivity();</span><br><span class=\"line\">        currentActivity.startActivityForResult(intent, TAKE_PHOTO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void openAlbum() &#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.intent.action.GET_CONTENT&quot;);</span><br><span class=\"line\">        intent.setType(&quot;image/*&quot;);</span><br><span class=\"line\">        Activity currentActivity = reactApplicationContext.getCurrentActivity();</span><br><span class=\"line\">        currentActivity.startActivityForResult(intent, CHOOSE_PHOTO); // 打开相册</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void callback(int requestCode, int resultCode, Intent data) &#123;</span><br><span class=\"line\">        switch (requestCode) &#123;</span><br><span class=\"line\">            case TAKE_PHOTO:</span><br><span class=\"line\">                if (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(new Uri[]&#123;imageUri&#125;);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(imageUri);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case CHOOSE_PHOTO:</span><br><span class=\"line\">                if (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(new Uri[]&#123;data.getData()&#125;);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(data.getData());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(4). 注意 需要注册FileProvider和设置xml path<br>(注意此处可能会和其他上传图片的依赖包中的清单文件冲突，原因是配置的authorities冲突，只要修改一致即可)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//清单文件中注册</span><br><span class=\"line\">&lt;application</span><br><span class=\"line\">    ...&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;provider</span><br><span class=\"line\">        android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class=\"line\">        android:authorities=&quot;com.company.app.provider&quot; //最好是包名+&apos;.provider&apos;, 如果你的工程里集成有图片上传的依赖包，那么编译可能会有冲突，解决：你将此处修改成与冲突的依赖包一致即可，注意桥接方法里的图片路径(FileProvider)也要同步修改</span><br><span class=\"line\">        android:exported=&quot;false&quot;</span><br><span class=\"line\">        android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class=\"line\">        &lt;meta-data</span><br><span class=\"line\">            android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class=\"line\">            android:resource=&quot;@xml/provider_paths&quot; //注意和冲突的依赖包进行比对修改</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;/provider&gt;</span><br><span class=\"line\">&lt;/application</span><br></pre></td></tr></table></figure>\n<p>(5). res资源文件中新建xml文件夹新建文件provider_paths.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class=\"line\">       &lt;external-path name=&quot;app_images&quot; path=&quot;.&quot; /&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-新建WebViewReactPackage-java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\"><a href=\"#4-新建WebViewReactPackage-java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\" class=\"headerlink\" title=\"4. 新建WebViewReactPackage.java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\"></a>4. 新建WebViewReactPackage.java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WebViewReactPackage implements ReactPackage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</span><br><span class=\"line\">        return Collections.emptyList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactApplicationContext) &#123;</span><br><span class=\"line\">        return Arrays.&lt;ViewManager&gt;asList(</span><br><span class=\"line\">                new ReactWebViewManager(reactApplicationContext)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;NativeModule&gt; createNativeModules(</span><br><span class=\"line\">            ReactApplicationContext reactApplicationContext) &#123;</span><br><span class=\"line\">        return Collections.emptyList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-将WebViewReactPackage写入MainApplication中\"><a href=\"#5-将WebViewReactPackage写入MainApplication中\" class=\"headerlink\" title=\"5. 将WebViewReactPackage写入MainApplication中\"></a>5. 将WebViewReactPackage写入MainApplication中</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainApplication extends Application implements ReactApplication &#123;</span><br><span class=\"line\">......</span><br><span class=\"line\">  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class=\"line\">      return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">          new MainReactPackage(),</span><br><span class=\"line\">            new WebViewReactPackage()</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> ......</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-在项目新建BridgeWebView-js文件，把-node-modules-react-native-Libraries-Components-WebView中的webview-android-js-复制到自己的js文件夹中，做一定的修改\"><a href=\"#6-在项目新建BridgeWebView-js文件，把-node-modules-react-native-Libraries-Components-WebView中的webview-android-js-复制到自己的js文件夹中，做一定的修改\" class=\"headerlink\" title=\"6. 在项目新建BridgeWebView.js文件，把/node_modules/react-native/Libraries/Components/WebView中的webview.android.js,复制到自己的js文件夹中，做一定的修改\"></a>6. 在项目新建BridgeWebView.js文件，把<code>/node_modules/react-native/Libraries/Components/WebView</code>中的webview.android.js,复制到自己的js文件夹中，做一定的修改</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改部分</span><br><span class=\"line\">var RCT_WEBVIEW_REF = &apos;webview&apos;;</span><br><span class=\"line\">......</span><br><span class=\"line\">class WebViewBridge extends React.Component &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    var RCTWebView = requireNativeComponent(&apos;RCTWebViewOpenImg&apos;, WebViewBridge, WebViewBridge.extraNativeComponentConfig); //RCTWebViewOpenImg与ReactWebViewManager的REACT_CLASS对应</span><br><span class=\"line\">module.exports = WebViewBridge;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-最后你在需要用的js文件，引入BridgeWebView-js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView\"><a href=\"#7-最后你在需要用的js文件，引入BridgeWebView-js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView\" class=\"headerlink\" title=\"7. 最后你在需要用的js文件，引入BridgeWebView.js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView.\"></a>7. 最后你在需要用的js文件，引入BridgeWebView.js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView.</h5>","site":{"data":{}},"excerpt":"<h2 id=\"RN开发之调用WebView爬坑记\"><a href=\"#RN开发之调用WebView爬坑记\" class=\"headerlink\" title=\"RN开发之调用WebView爬坑记\"></a>RN开发之调用WebView爬坑记</h2><h4 id=\"解决React-Native之Android手机中WebView不能调用相机相册的问题\"><a href=\"#解决React-Native之Android手机中WebView不能调用相机相册的问题\" class=\"headerlink\" title=\"解决React Native之Android手机中WebView不能调用相机相册的问题\"></a>解决React Native之Android手机中WebView不能调用相机相册的问题</h4><p>记录最近在RN开发中踩的一个坑以及分享我的爬坑记：Android手机不能在WebView中调用相机相册；我刚开始很困惑，大家都一致认为这是链接的第三方写的H5中调用相机相册的方法有问题所导致的，后来我通过查找原因，发现这是Android原生WebView中没有实现调用相机相册的功能；soga，知道原因后开始在网上查找解决方法，大概找到两三个类似的依赖包，于是开始尝试集成到现在的项目中去，结果全部jj：不是和其他依赖包冲突就是gradle build失败；唉，各种心塞心累，于是决定自己尝试桥接原生WebView，桥接的过程也是各种蜿蜒曲折啊；下面开始分享我桥接的过程，希望可以帮助有需要的人少踩点坑。</p>","more":"<h5 id=\"1-为什么RN的android端webview不支持上传图片和调用相机？\"><a href=\"#1-为什么RN的android端webview不支持上传图片和调用相机？\" class=\"headerlink\" title=\"1. 为什么RN的android端webview不支持上传图片和调用相机？\"></a>1. 为什么RN的android端webview不支持上传图片和调用相机？</h5><p>android原生的webview，本身就需要配置一个方法来配合上传图片，所以RN封装的webView没有配置这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// For Android 4.1</span><br><span class=\"line\">        public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture) &#123;</span><br><span class=\"line\">            if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mUploadMessage = uploadMsg;</span><br><span class=\"line\">            showPopSelectPic();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams) &#123;</span><br><span class=\"line\">            if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mUploadMessage = filePathCallback;</span><br><span class=\"line\">            showPopSelectPic();</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-如何给RN的webview配置上这个方法？\"><a href=\"#2-如何给RN的webview配置上这个方法？\" class=\"headerlink\" title=\"2. 如何给RN的webview配置上这个方法？\"></a>2. 如何给RN的webview配置上这个方法？</h5><p>在js代码中暂时没办法处理，那只好改原生的方法，原生的webview封装在react native包里，没办法改，只好重新封装一个webview.</p>\n<h5 id=\"3-怎么重新封装一个RN组件？\"><a href=\"#3-怎么重新封装一个RN组件？\" class=\"headerlink\" title=\"3. 怎么重新封装一个RN组件？\"></a>3. 怎么重新封装一个RN组件？</h5><p><a href=\"https://reactnative.cn/docs/0.45/native-component-android.html#content\" target=\"_blank\" rel=\"noopener\">可参考封装RN组件的教程</a></p>\n<ol>\n<li>首先把<code>/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/webview</code>中的ReactWebViewManager的复制到自己的src的java包目录里</li>\n<li>然后根据自己的需求进行更改，比如现在的需求事添加选择图片的配置</li>\n</ol>\n<p>(1). 新建一个ActivityResultInterface 接口回调</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ActivityResultInterface &#123;</span><br><span class=\"line\">    void callback(int requestCode, int resultCode, Intent data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2). PickerActivityEventListener onActivityResult回调和自定义回调链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PickerActivityEventListener extends BaseActivityEventListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ActivityResultInterface mCallback;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PickerActivityEventListener(ReactApplicationContext reactContext, ActivityResultInterface callback) &#123;</span><br><span class=\"line\">        reactContext.addActivityEventListener(this);</span><br><span class=\"line\">        mCallback = callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // &lt; RN 0.33.0</span><br><span class=\"line\">    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class=\"line\">        mCallback.callback(requestCode, resultCode, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // &gt;= RN 0.33.0</span><br><span class=\"line\">    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) &#123;</span><br><span class=\"line\">        mCallback.callback(requestCode, resultCode, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3). ReactWebViewManager 自定义添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ReactWebViewManager extends SimpleViewManager&lt;WebView&gt; implements ActivityResultInterface &#123;</span><br><span class=\"line\">    //一些初始化变量</span><br><span class=\"line\">    private ReactApplicationContext reactApplicationContext;</span><br><span class=\"line\">    private ValueCallback mUploadMessage;</span><br><span class=\"line\">    private Uri imageUri;</span><br><span class=\"line\">    private static final int TAKE_PHOTO = 10001;</span><br><span class=\"line\">    private static final int CHOOSE_PHOTO = 10002;</span><br><span class=\"line\">    protected static final String REACT_CLASS = &quot;RCTWebView2&quot;;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    //修改构造方法</span><br><span class=\"line\">    public ReactWebViewManager(ReactApplicationContext reactApplicationContext) &#123;</span><br><span class=\"line\">        this.reactApplicationContext = reactApplicationContext;</span><br><span class=\"line\">        new PickerActivityEventListener(reactApplicationContext, this);</span><br><span class=\"line\">        mWebViewConfig = new WebViewConfig() &#123;</span><br><span class=\"line\">            public void configWebView(WebView webView) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">     protected WebView createViewInstance(final ThemedReactContext reactContext) &#123;</span><br><span class=\"line\">        ReactWebView webView = createReactWebViewInstance(reactContext);</span><br><span class=\"line\">        webView.setWebChromeClient(new WebChromeClient() &#123;</span><br><span class=\"line\">          ......</span><br><span class=\"line\">            // For Android 4.1</span><br><span class=\"line\">            public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture) &#123;</span><br><span class=\"line\">                if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mUploadMessage = uploadMsg;</span><br><span class=\"line\">                showPopSelectPic(reactContext);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams) &#123;</span><br><span class=\"line\">                if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mUploadMessage = filePathCallback;</span><br><span class=\"line\">                showPopSelectPic(reactContext);</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void showPopSelectPic(final ThemedReactContext Context) &#123;</span><br><span class=\"line\">        String[] items = new String[]&#123;&quot;相机&quot;, &quot;相册&quot;&#125;;</span><br><span class=\"line\">        AlertDialog.Builder builder = new AlertDialog.Builder(Context);</span><br><span class=\"line\">        builder.setTitle(&quot;提示&quot;)</span><br><span class=\"line\">                .setSingleChoiceItems(items, 0, new DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class=\"line\">                        dialog.dismiss();</span><br><span class=\"line\">                        if (which == 0) &#123;</span><br><span class=\"line\">                            //openCamera</span><br><span class=\"line\">                            File outputImage = new File(Context.getExternalCacheDir(), &quot;output_image.jpg&quot;);</span><br><span class=\"line\">                            try &#123;</span><br><span class=\"line\">                                if (outputImage.exists()) &#123;</span><br><span class=\"line\">                                    outputImage.delete();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                outputImage.createNewFile();</span><br><span class=\"line\">                            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                                e.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            if (Build.VERSION.SDK_INT &lt; 24) &#123;</span><br><span class=\"line\">                                imageUri = Uri.fromFile(outputImage);</span><br><span class=\"line\">                            &#125; else &#123;</span><br><span class=\"line\">                                imageUri = FileProvider.getUriForFile(Context, Context.getPackageName() + &quot;.provider&quot;, outputImage);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            // 启动相机程序</span><br><span class=\"line\">                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                                //ActivityCompat.requestPermissions(Context, new String[]&#123;Manifest.permission.CAMERA&#125;, 2);</span><br><span class=\"line\">                            &#125; else &#123;</span><br><span class=\"line\">                                openCamera();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; else if (which == 1) &#123;</span><br><span class=\"line\">                            //openAlbum</span><br><span class=\"line\">                            if (ContextCompat.checkSelfPermission(Context, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                                //ActivityCompat.requestPermissions(Context, new String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, 1);</span><br><span class=\"line\">                            &#125; else &#123;</span><br><span class=\"line\">                                openAlbum();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setOnCancelListener(new DialogInterface.OnCancelListener() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void onCancel(DialogInterface dialog) &#123;</span><br><span class=\"line\">                        if (mUploadMessage != null) &#123;</span><br><span class=\"line\">                            mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                            mUploadMessage = null;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        builder.create().show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void openCamera() &#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.media.action.IMAGE_CAPTURE&quot;);</span><br><span class=\"line\">        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class=\"line\">        Activity currentActivity = reactApplicationContext.getCurrentActivity();</span><br><span class=\"line\">        currentActivity.startActivityForResult(intent, TAKE_PHOTO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void openAlbum() &#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.intent.action.GET_CONTENT&quot;);</span><br><span class=\"line\">        intent.setType(&quot;image/*&quot;);</span><br><span class=\"line\">        Activity currentActivity = reactApplicationContext.getCurrentActivity();</span><br><span class=\"line\">        currentActivity.startActivityForResult(intent, CHOOSE_PHOTO); // 打开相册</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void callback(int requestCode, int resultCode, Intent data) &#123;</span><br><span class=\"line\">        switch (requestCode) &#123;</span><br><span class=\"line\">            case TAKE_PHOTO:</span><br><span class=\"line\">                if (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(new Uri[]&#123;imageUri&#125;);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(imageUri);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case CHOOSE_PHOTO:</span><br><span class=\"line\">                if (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(new Uri[]&#123;data.getData()&#125;);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        mUploadMessage.onReceiveValue(data.getData());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    mUploadMessage.onReceiveValue(null);</span><br><span class=\"line\">                    mUploadMessage = null;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(4). 注意 需要注册FileProvider和设置xml path<br>(注意此处可能会和其他上传图片的依赖包中的清单文件冲突，原因是配置的authorities冲突，只要修改一致即可)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//清单文件中注册</span><br><span class=\"line\">&lt;application</span><br><span class=\"line\">    ...&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;provider</span><br><span class=\"line\">        android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class=\"line\">        android:authorities=&quot;com.company.app.provider&quot; //最好是包名+&apos;.provider&apos;, 如果你的工程里集成有图片上传的依赖包，那么编译可能会有冲突，解决：你将此处修改成与冲突的依赖包一致即可，注意桥接方法里的图片路径(FileProvider)也要同步修改</span><br><span class=\"line\">        android:exported=&quot;false&quot;</span><br><span class=\"line\">        android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class=\"line\">        &lt;meta-data</span><br><span class=\"line\">            android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class=\"line\">            android:resource=&quot;@xml/provider_paths&quot; //注意和冲突的依赖包进行比对修改</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;/provider&gt;</span><br><span class=\"line\">&lt;/application</span><br></pre></td></tr></table></figure>\n<p>(5). res资源文件中新建xml文件夹新建文件provider_paths.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class=\"line\">       &lt;external-path name=&quot;app_images&quot; path=&quot;.&quot; /&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-新建WebViewReactPackage-java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\"><a href=\"#4-新建WebViewReactPackage-java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\" class=\"headerlink\" title=\"4. 新建WebViewReactPackage.java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中\"></a>4. 新建WebViewReactPackage.java文件，将写好的ReactWebViewManager写入到WebViewReactPackage中</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WebViewReactPackage implements ReactPackage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</span><br><span class=\"line\">        return Collections.emptyList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactApplicationContext) &#123;</span><br><span class=\"line\">        return Arrays.&lt;ViewManager&gt;asList(</span><br><span class=\"line\">                new ReactWebViewManager(reactApplicationContext)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;NativeModule&gt; createNativeModules(</span><br><span class=\"line\">            ReactApplicationContext reactApplicationContext) &#123;</span><br><span class=\"line\">        return Collections.emptyList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-将WebViewReactPackage写入MainApplication中\"><a href=\"#5-将WebViewReactPackage写入MainApplication中\" class=\"headerlink\" title=\"5. 将WebViewReactPackage写入MainApplication中\"></a>5. 将WebViewReactPackage写入MainApplication中</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainApplication extends Application implements ReactApplication &#123;</span><br><span class=\"line\">......</span><br><span class=\"line\">  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class=\"line\">      return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">          new MainReactPackage(),</span><br><span class=\"line\">            new WebViewReactPackage()</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> ......</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-在项目新建BridgeWebView-js文件，把-node-modules-react-native-Libraries-Components-WebView中的webview-android-js-复制到自己的js文件夹中，做一定的修改\"><a href=\"#6-在项目新建BridgeWebView-js文件，把-node-modules-react-native-Libraries-Components-WebView中的webview-android-js-复制到自己的js文件夹中，做一定的修改\" class=\"headerlink\" title=\"6. 在项目新建BridgeWebView.js文件，把/node_modules/react-native/Libraries/Components/WebView中的webview.android.js,复制到自己的js文件夹中，做一定的修改\"></a>6. 在项目新建BridgeWebView.js文件，把<code>/node_modules/react-native/Libraries/Components/WebView</code>中的webview.android.js,复制到自己的js文件夹中，做一定的修改</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改部分</span><br><span class=\"line\">var RCT_WEBVIEW_REF = &apos;webview&apos;;</span><br><span class=\"line\">......</span><br><span class=\"line\">class WebViewBridge extends React.Component &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    var RCTWebView = requireNativeComponent(&apos;RCTWebViewOpenImg&apos;, WebViewBridge, WebViewBridge.extraNativeComponentConfig); //RCTWebViewOpenImg与ReactWebViewManager的REACT_CLASS对应</span><br><span class=\"line\">module.exports = WebViewBridge;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-最后你在需要用的js文件，引入BridgeWebView-js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView\"><a href=\"#7-最后你在需要用的js文件，引入BridgeWebView-js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView\" class=\"headerlink\" title=\"7. 最后你在需要用的js文件，引入BridgeWebView.js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView.\"></a>7. 最后你在需要用的js文件，引入BridgeWebView.js文件，通过Platform判断Android平台调用桥接的WebViewBridge，iOS平台调用RN封装的WebView.</h5>"},{"title":"Android Studio gradle插件由2.2.3升级到3.1.0","date":"2018-07-07T11:14:01.000Z","_content":"## Android Studio gradle插件由2.2.3升级到3.1.0\n\n升级gradle插件的原因是因为项目里集成第三方依赖都已经需要gradle3.x的版本去编译，所以我也需要将项目的gradle插件进行升级；插件升级的过程中也遇到了一些乱七八糟编译失败的报错，网上搜了一大堆解决办法，结果没有一个方案让升级过程变得畅通无阻，没办法只好网上找了gradle3.x版本的Demo进行比对尝试，后来结果还算令人欣喜；现在开始奉上我升级gradle插件的方案，希望可以帮助有需要的人少走点弯路。\n\n<!--more-->\n\n##### 1. 更新 Android Gradle Plugin 版本\n打开 `android/build.gradle` 文件\n\n将 `classpath 'com.android.tools.build:gradle:2.2.3'` 修改为 `com.android.tools.build:gradle:3.1.0`\n\n##### 2. 更新 Gradle 版本\n打开 `android/gradle/wrapper/gradle-wrapper.properties` 文件\n\n将 `distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip` 修改为 `distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip`\n\n##### 3. 更新 Android SDK Build Tools 版本\n打开 `android/app/build.gradle`文件\n\n先将 `compileSdkVersion 23 buildToolsVersion \"23.0.1\"` 修改为 `compileSdkVersion 26 buildToolsVersion \"27.0.3\"`；\n\n再将 `targetSdkVersion 22` 修改为 `targetSdkVersion 26`。\n\n##### 4. 更新 uses-sdk 中的 targetSdkVersion 版本\n打开 `android/app/src/main/AndroidManifest.xml` 文件\n\n将 `<uses-sdk android:minSdkVersion=\"16\" android:targetSdkVersion=\"22\" />` 修改为 `<uses-sdk android:minSdkVersion=\"16\" android:targetSdkVersion=\"26\" />` 。\n\n##### 5. 升级 appcompat-v7 的版本\n打开 `android/app/build.gradle` 文件\n\n将`compile \"com.android.support:appcompat-v7:23.0.1\"` 修改为 `compile \"com.android.support:appcompat-v7:27.1.1\"`;\n\n同时将 `dependencies` 中所有的 `compile` 修改为 `implementation`，\n\n如：`compile \"com.android.support:appcompat-v7:27.1.1\"` 修改为 `implementation \"com.android.support:appcompat-v7:27.1.1\"`\n\n具体原因看[这里](https://developer.android.google.cn/studio/build/gradle-plugin-3-0-0-migration)\n\n\n##### 6. 设置 maven 仓库\n在 `android/build.gradle` 文件中进行maven仓库的设置，请参考下面的配置：\n\n```\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n  repositories {\n    jcenter()\n    google()\n    maven {\n      url 'https://maven.google.com'\n      name 'Google'\n    }\n    maven{\n      url 'http://maven.aliyun.com/nexus/content/groups/public/'\n      name 'aliyun'\n    }\n    maven {\n      url \"https://jitpack.io\"\n      name 'jitpack'\n    }\n  }\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.1.0'\n\n    // NOTE: Do not place your application dependencies here; they belong\n    // in the individual module build.gradle files\n  }\n}\n\nallprojects {\n  repositories {\n    mavenLocal()\n    jcenter()\n    google()\n    maven {\n      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n      url \"$rootDir/../node_modules/react-native/android\"\n    }\n    maven {\n      url 'https://maven.google.com' // Google's Maven repository\n      name 'Google'\n    }\n    maven{\n      url 'http://maven.aliyun.com/nexus/content/groups/public/'\n      name 'aliyun'\n    }\n    maven {\n      url \"https://jitpack.io\"\n      name 'jitpack'\n    }\n  }\n}\n```\n\n现在你可以看到提供了好几个数据源，你可以选择一个，也可以都配置上去。\n\n\n##### 7. error: uncompiled PNG file passed as argument报错处理\n如遇到 `error: uncompiled PNG file passed as argument. Must be compiled first into .flat file.` 的报错，解决方法如下：\n\n打开 `android/gradle.properties`文件\n\n添加 `android.enableAapt2=false`","source":"_posts/Android-Studio-gradle插件由2-2-3升级到3-1-0.md","raw":"---\ntitle: Android Studio gradle插件由2.2.3升级到3.1.0\ndate: 2018-07-07 19:14:01\ncategories: React Native\ntags: 爬坑\n---\n## Android Studio gradle插件由2.2.3升级到3.1.0\n\n升级gradle插件的原因是因为项目里集成第三方依赖都已经需要gradle3.x的版本去编译，所以我也需要将项目的gradle插件进行升级；插件升级的过程中也遇到了一些乱七八糟编译失败的报错，网上搜了一大堆解决办法，结果没有一个方案让升级过程变得畅通无阻，没办法只好网上找了gradle3.x版本的Demo进行比对尝试，后来结果还算令人欣喜；现在开始奉上我升级gradle插件的方案，希望可以帮助有需要的人少走点弯路。\n\n<!--more-->\n\n##### 1. 更新 Android Gradle Plugin 版本\n打开 `android/build.gradle` 文件\n\n将 `classpath 'com.android.tools.build:gradle:2.2.3'` 修改为 `com.android.tools.build:gradle:3.1.0`\n\n##### 2. 更新 Gradle 版本\n打开 `android/gradle/wrapper/gradle-wrapper.properties` 文件\n\n将 `distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip` 修改为 `distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip`\n\n##### 3. 更新 Android SDK Build Tools 版本\n打开 `android/app/build.gradle`文件\n\n先将 `compileSdkVersion 23 buildToolsVersion \"23.0.1\"` 修改为 `compileSdkVersion 26 buildToolsVersion \"27.0.3\"`；\n\n再将 `targetSdkVersion 22` 修改为 `targetSdkVersion 26`。\n\n##### 4. 更新 uses-sdk 中的 targetSdkVersion 版本\n打开 `android/app/src/main/AndroidManifest.xml` 文件\n\n将 `<uses-sdk android:minSdkVersion=\"16\" android:targetSdkVersion=\"22\" />` 修改为 `<uses-sdk android:minSdkVersion=\"16\" android:targetSdkVersion=\"26\" />` 。\n\n##### 5. 升级 appcompat-v7 的版本\n打开 `android/app/build.gradle` 文件\n\n将`compile \"com.android.support:appcompat-v7:23.0.1\"` 修改为 `compile \"com.android.support:appcompat-v7:27.1.1\"`;\n\n同时将 `dependencies` 中所有的 `compile` 修改为 `implementation`，\n\n如：`compile \"com.android.support:appcompat-v7:27.1.1\"` 修改为 `implementation \"com.android.support:appcompat-v7:27.1.1\"`\n\n具体原因看[这里](https://developer.android.google.cn/studio/build/gradle-plugin-3-0-0-migration)\n\n\n##### 6. 设置 maven 仓库\n在 `android/build.gradle` 文件中进行maven仓库的设置，请参考下面的配置：\n\n```\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n  repositories {\n    jcenter()\n    google()\n    maven {\n      url 'https://maven.google.com'\n      name 'Google'\n    }\n    maven{\n      url 'http://maven.aliyun.com/nexus/content/groups/public/'\n      name 'aliyun'\n    }\n    maven {\n      url \"https://jitpack.io\"\n      name 'jitpack'\n    }\n  }\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.1.0'\n\n    // NOTE: Do not place your application dependencies here; they belong\n    // in the individual module build.gradle files\n  }\n}\n\nallprojects {\n  repositories {\n    mavenLocal()\n    jcenter()\n    google()\n    maven {\n      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n      url \"$rootDir/../node_modules/react-native/android\"\n    }\n    maven {\n      url 'https://maven.google.com' // Google's Maven repository\n      name 'Google'\n    }\n    maven{\n      url 'http://maven.aliyun.com/nexus/content/groups/public/'\n      name 'aliyun'\n    }\n    maven {\n      url \"https://jitpack.io\"\n      name 'jitpack'\n    }\n  }\n}\n```\n\n现在你可以看到提供了好几个数据源，你可以选择一个，也可以都配置上去。\n\n\n##### 7. error: uncompiled PNG file passed as argument报错处理\n如遇到 `error: uncompiled PNG file passed as argument. Must be compiled first into .flat file.` 的报错，解决方法如下：\n\n打开 `android/gradle.properties`文件\n\n添加 `android.enableAapt2=false`","slug":"Android-Studio-gradle插件由2-2-3升级到3-1-0","published":1,"updated":"2018-07-26T10:49:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhdr0006lxndespjrplc","content":"<h2 id=\"Android-Studio-gradle插件由2-2-3升级到3-1-0\"><a href=\"#Android-Studio-gradle插件由2-2-3升级到3-1-0\" class=\"headerlink\" title=\"Android Studio gradle插件由2.2.3升级到3.1.0\"></a>Android Studio gradle插件由2.2.3升级到3.1.0</h2><p>升级gradle插件的原因是因为项目里集成第三方依赖都已经需要gradle3.x的版本去编译，所以我也需要将项目的gradle插件进行升级；插件升级的过程中也遇到了一些乱七八糟编译失败的报错，网上搜了一大堆解决办法，结果没有一个方案让升级过程变得畅通无阻，没办法只好网上找了gradle3.x版本的Demo进行比对尝试，后来结果还算令人欣喜；现在开始奉上我升级gradle插件的方案，希望可以帮助有需要的人少走点弯路。</p>\n<a id=\"more\"></a>\n<h5 id=\"1-更新-Android-Gradle-Plugin-版本\"><a href=\"#1-更新-Android-Gradle-Plugin-版本\" class=\"headerlink\" title=\"1. 更新 Android Gradle Plugin 版本\"></a>1. 更新 Android Gradle Plugin 版本</h5><p>打开 <code>android/build.gradle</code> 文件</p>\n<p>将 <code>classpath &#39;com.android.tools.build:gradle:2.2.3&#39;</code> 修改为 <code>com.android.tools.build:gradle:3.1.0</code></p>\n<h5 id=\"2-更新-Gradle-版本\"><a href=\"#2-更新-Gradle-版本\" class=\"headerlink\" title=\"2. 更新 Gradle 版本\"></a>2. 更新 Gradle 版本</h5><p>打开 <code>android/gradle/wrapper/gradle-wrapper.properties</code> 文件</p>\n<p>将 <code>distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip</code> 修改为 <code>distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip</code></p>\n<h5 id=\"3-更新-Android-SDK-Build-Tools-版本\"><a href=\"#3-更新-Android-SDK-Build-Tools-版本\" class=\"headerlink\" title=\"3. 更新 Android SDK Build Tools 版本\"></a>3. 更新 Android SDK Build Tools 版本</h5><p>打开 <code>android/app/build.gradle</code>文件</p>\n<p>先将 <code>compileSdkVersion 23 buildToolsVersion &quot;23.0.1&quot;</code> 修改为 <code>compileSdkVersion 26 buildToolsVersion &quot;27.0.3&quot;</code>；</p>\n<p>再将 <code>targetSdkVersion 22</code> 修改为 <code>targetSdkVersion 26</code>。</p>\n<h5 id=\"4-更新-uses-sdk-中的-targetSdkVersion-版本\"><a href=\"#4-更新-uses-sdk-中的-targetSdkVersion-版本\" class=\"headerlink\" title=\"4. 更新 uses-sdk 中的 targetSdkVersion 版本\"></a>4. 更新 uses-sdk 中的 targetSdkVersion 版本</h5><p>打开 <code>android/app/src/main/AndroidManifest.xml</code> 文件</p>\n<p>将 <code>&lt;uses-sdk android:minSdkVersion=&quot;16&quot; android:targetSdkVersion=&quot;22&quot; /&gt;</code> 修改为 <code>&lt;uses-sdk android:minSdkVersion=&quot;16&quot; android:targetSdkVersion=&quot;26&quot; /&gt;</code> 。</p>\n<h5 id=\"5-升级-appcompat-v7-的版本\"><a href=\"#5-升级-appcompat-v7-的版本\" class=\"headerlink\" title=\"5. 升级 appcompat-v7 的版本\"></a>5. 升级 appcompat-v7 的版本</h5><p>打开 <code>android/app/build.gradle</code> 文件</p>\n<p>将<code>compile &quot;com.android.support:appcompat-v7:23.0.1&quot;</code> 修改为 <code>compile &quot;com.android.support:appcompat-v7:27.1.1&quot;</code>;</p>\n<p>同时将 <code>dependencies</code> 中所有的 <code>compile</code> 修改为 <code>implementation</code>，</p>\n<p>如：<code>compile &quot;com.android.support:appcompat-v7:27.1.1&quot;</code> 修改为 <code>implementation &quot;com.android.support:appcompat-v7:27.1.1&quot;</code></p>\n<p>具体原因看<a href=\"https://developer.android.google.cn/studio/build/gradle-plugin-3-0-0-migration\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h5 id=\"6-设置-maven-仓库\"><a href=\"#6-设置-maven-仓库\" class=\"headerlink\" title=\"6. 设置 maven 仓库\"></a>6. 设置 maven 仓库</h5><p>在 <code>android/build.gradle</code> 文件中进行maven仓库的设置，请参考下面的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &apos;https://maven.google.com&apos;</span><br><span class=\"line\">      name &apos;Google&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven&#123;</span><br><span class=\"line\">      url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;</span><br><span class=\"line\">      name &apos;aliyun&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &quot;https://jitpack.io&quot;</span><br><span class=\"line\">      name &apos;jitpack&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    classpath &apos;com.android.tools.build:gradle:3.1.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    // NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">    // in the individual module build.gradle files</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    mavenLocal()</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm</span><br><span class=\"line\">      url &quot;$rootDir/../node_modules/react-native/android&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &apos;https://maven.google.com&apos; // Google&apos;s Maven repository</span><br><span class=\"line\">      name &apos;Google&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven&#123;</span><br><span class=\"line\">      url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;</span><br><span class=\"line\">      name &apos;aliyun&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &quot;https://jitpack.io&quot;</span><br><span class=\"line\">      name &apos;jitpack&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你可以看到提供了好几个数据源，你可以选择一个，也可以都配置上去。</p>\n<h5 id=\"7-error-uncompiled-PNG-file-passed-as-argument报错处理\"><a href=\"#7-error-uncompiled-PNG-file-passed-as-argument报错处理\" class=\"headerlink\" title=\"7. error: uncompiled PNG file passed as argument报错处理\"></a>7. error: uncompiled PNG file passed as argument报错处理</h5><p>如遇到 <code>error: uncompiled PNG file passed as argument. Must be compiled first into .flat file.</code> 的报错，解决方法如下：</p>\n<p>打开 <code>android/gradle.properties</code>文件</p>\n<p>添加 <code>android.enableAapt2=false</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Android-Studio-gradle插件由2-2-3升级到3-1-0\"><a href=\"#Android-Studio-gradle插件由2-2-3升级到3-1-0\" class=\"headerlink\" title=\"Android Studio gradle插件由2.2.3升级到3.1.0\"></a>Android Studio gradle插件由2.2.3升级到3.1.0</h2><p>升级gradle插件的原因是因为项目里集成第三方依赖都已经需要gradle3.x的版本去编译，所以我也需要将项目的gradle插件进行升级；插件升级的过程中也遇到了一些乱七八糟编译失败的报错，网上搜了一大堆解决办法，结果没有一个方案让升级过程变得畅通无阻，没办法只好网上找了gradle3.x版本的Demo进行比对尝试，后来结果还算令人欣喜；现在开始奉上我升级gradle插件的方案，希望可以帮助有需要的人少走点弯路。</p>","more":"<h5 id=\"1-更新-Android-Gradle-Plugin-版本\"><a href=\"#1-更新-Android-Gradle-Plugin-版本\" class=\"headerlink\" title=\"1. 更新 Android Gradle Plugin 版本\"></a>1. 更新 Android Gradle Plugin 版本</h5><p>打开 <code>android/build.gradle</code> 文件</p>\n<p>将 <code>classpath &#39;com.android.tools.build:gradle:2.2.3&#39;</code> 修改为 <code>com.android.tools.build:gradle:3.1.0</code></p>\n<h5 id=\"2-更新-Gradle-版本\"><a href=\"#2-更新-Gradle-版本\" class=\"headerlink\" title=\"2. 更新 Gradle 版本\"></a>2. 更新 Gradle 版本</h5><p>打开 <code>android/gradle/wrapper/gradle-wrapper.properties</code> 文件</p>\n<p>将 <code>distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip</code> 修改为 <code>distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip</code></p>\n<h5 id=\"3-更新-Android-SDK-Build-Tools-版本\"><a href=\"#3-更新-Android-SDK-Build-Tools-版本\" class=\"headerlink\" title=\"3. 更新 Android SDK Build Tools 版本\"></a>3. 更新 Android SDK Build Tools 版本</h5><p>打开 <code>android/app/build.gradle</code>文件</p>\n<p>先将 <code>compileSdkVersion 23 buildToolsVersion &quot;23.0.1&quot;</code> 修改为 <code>compileSdkVersion 26 buildToolsVersion &quot;27.0.3&quot;</code>；</p>\n<p>再将 <code>targetSdkVersion 22</code> 修改为 <code>targetSdkVersion 26</code>。</p>\n<h5 id=\"4-更新-uses-sdk-中的-targetSdkVersion-版本\"><a href=\"#4-更新-uses-sdk-中的-targetSdkVersion-版本\" class=\"headerlink\" title=\"4. 更新 uses-sdk 中的 targetSdkVersion 版本\"></a>4. 更新 uses-sdk 中的 targetSdkVersion 版本</h5><p>打开 <code>android/app/src/main/AndroidManifest.xml</code> 文件</p>\n<p>将 <code>&lt;uses-sdk android:minSdkVersion=&quot;16&quot; android:targetSdkVersion=&quot;22&quot; /&gt;</code> 修改为 <code>&lt;uses-sdk android:minSdkVersion=&quot;16&quot; android:targetSdkVersion=&quot;26&quot; /&gt;</code> 。</p>\n<h5 id=\"5-升级-appcompat-v7-的版本\"><a href=\"#5-升级-appcompat-v7-的版本\" class=\"headerlink\" title=\"5. 升级 appcompat-v7 的版本\"></a>5. 升级 appcompat-v7 的版本</h5><p>打开 <code>android/app/build.gradle</code> 文件</p>\n<p>将<code>compile &quot;com.android.support:appcompat-v7:23.0.1&quot;</code> 修改为 <code>compile &quot;com.android.support:appcompat-v7:27.1.1&quot;</code>;</p>\n<p>同时将 <code>dependencies</code> 中所有的 <code>compile</code> 修改为 <code>implementation</code>，</p>\n<p>如：<code>compile &quot;com.android.support:appcompat-v7:27.1.1&quot;</code> 修改为 <code>implementation &quot;com.android.support:appcompat-v7:27.1.1&quot;</code></p>\n<p>具体原因看<a href=\"https://developer.android.google.cn/studio/build/gradle-plugin-3-0-0-migration\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h5 id=\"6-设置-maven-仓库\"><a href=\"#6-设置-maven-仓库\" class=\"headerlink\" title=\"6. 设置 maven 仓库\"></a>6. 设置 maven 仓库</h5><p>在 <code>android/build.gradle</code> 文件中进行maven仓库的设置，请参考下面的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &apos;https://maven.google.com&apos;</span><br><span class=\"line\">      name &apos;Google&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven&#123;</span><br><span class=\"line\">      url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;</span><br><span class=\"line\">      name &apos;aliyun&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &quot;https://jitpack.io&quot;</span><br><span class=\"line\">      name &apos;jitpack&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    classpath &apos;com.android.tools.build:gradle:3.1.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    // NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">    // in the individual module build.gradle files</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    mavenLocal()</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm</span><br><span class=\"line\">      url &quot;$rootDir/../node_modules/react-native/android&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &apos;https://maven.google.com&apos; // Google&apos;s Maven repository</span><br><span class=\"line\">      name &apos;Google&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven&#123;</span><br><span class=\"line\">      url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;</span><br><span class=\"line\">      name &apos;aliyun&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url &quot;https://jitpack.io&quot;</span><br><span class=\"line\">      name &apos;jitpack&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你可以看到提供了好几个数据源，你可以选择一个，也可以都配置上去。</p>\n<h5 id=\"7-error-uncompiled-PNG-file-passed-as-argument报错处理\"><a href=\"#7-error-uncompiled-PNG-file-passed-as-argument报错处理\" class=\"headerlink\" title=\"7. error: uncompiled PNG file passed as argument报错处理\"></a>7. error: uncompiled PNG file passed as argument报错处理</h5><p>如遇到 <code>error: uncompiled PNG file passed as argument. Must be compiled first into .flat file.</code> 的报错，解决方法如下：</p>\n<p>打开 <code>android/gradle.properties</code>文件</p>\n<p>添加 <code>android.enableAapt2=false</code></p>"},{"title":"React Native的组件通信方式","date":"2017-07-02T13:21:18.000Z","_content":"\n## React Native的组件通信方式\n\n题外话，简单总结下 React、ReactJS 以及 React Native 之间的关系：\n\n- React 是非常热门的一个前端开发框架，其本身作为 MVC 中的 View 层可以用来构建 UI；同时，React 通过对虚拟 DOM 中的微操作来实对现实际 DOM 的局部更新，提高性能。其组件的模块化开发提高了代码的可维护性。单向数据流的特点，让每个模块根据数据量自动更新，让开发者可以只专注于数据部分，改善程序的可预测性。\n\n- React Native是一个框架，而ReactJS是用来构建站点的JavaScript库。当你用ReactJS开始一个新的项目，你或许需要选择一个类似Webpack的打包器，然后去指定你工程中所需要的打包模块。React-Native包含了你需要的所有东西，你几乎不再需要其他东西了。当你开始一个新项目，你会发现一切都很简单——你可以只需要在命令行敲一行命令就行了——然后你就可使用ES6, 某些ES7特性，甚至一些比较新的polyfills开始你的编码。\n\n- React Native不使用HTML来渲染App，但是提供了可代替它的类似组件。这些React Native组件映射到渲染到App中的真正的原生iOS和Android UI组件。\n\n**言归正传，正文开始**\n\n<!--more-->\n\n##### React 最基础的 props 和 state\n\n- **组件内部用 state**\n```\nconstructor(props) {\n    super(props);\n    this.state = {\n        isOnline: true\t//组件 state\n    };\n}\nrender() {\n    if(this.state.isOnline){\n        //...剩余代码\n    }\n    //...剩余代码\n}\n```\n\n- **父子组件通信用 props**\n```\n//父组件设置属性参数\n<MyComponet isOnline={true} />\n\n//子组件\nclass MyComponent extends Component {\n    constructor(props) {\n        super(props);\n        //子组件获取属性\n        let isOnline = this.props.isOnline;\n    }\n    //...剩余代码\n}\n```\n\n- **子父组件通信也可用 props**\n```\n//子组件\nclass MyComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        //子组件给父组件的方法传参\n        this.props.onChange('newVal');\n    }\n    render() {\n        return (\n            <View />\n        );\n    }\n}\n```\n\n```\n//父组件\nclass parentCpt extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            key: 'defVal'\n        };\n    }\n    //父组件接受子组件的参数，并改变 state\n    handleChange(val) {\n        this.setState({\n            key: val\n        });\n    }\n    render() {\n        //...剩余代码\n        return (\n            <MyComponent onChange={(val) => {this.handleChange(val)}} />\n        );\n    }\n}\n```\n\n- **使用 Refs**\n```\n//子组件\nclass MyComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n    //开放的实例方法\n    doIt() {\n        //...做点什么\n    }\n    render() {\n        return (\n            <View />\n        );\n    }\n}\n```\n\n```\n//父组件\nclass parentCpt extends Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        //调用组件的实例方法\n        this.myCpt.doIt();\n    }\n    render() {\n        //this.myCpt 保存组件的实例\n        return (\n            <MyComponent ref={(c) => {this.myCpt = c;}} />\n        );\n    }\n}\n```\n\n- **使用 global**\n\n**global**类似浏览器里的 **window** 对象，它是全局的，一处定义，所有组件都可以访问，一般用于存储一些全局的配置参数或方法。\n\n使用场景：全局参数不想通过 props 层层组件传递，有些组件对此参数并不关心，只有嵌套的某个组件使用\n\n```\nglobal.isOnline = true;\n```\n\n- **使用 RCTDeviceEventEmitter**\n\n**RCTDeviceEventEmitter** 是一种事件机制，**React Native** 的文档只是草草带过，也可以使用 **DeviceEventEmitter** ，它是把 **RCTDeviceEventEmitter** 封装了一层，用法略不同。\n\n按文档所言，**RCTDeviceEventEmitter** 主要用于 **Native** 发送事件给 **JavaScript**，实际上也可以用来发送自定义事件。\n\n*使用场景：多个组件都使用了异步模块，且异步模块之间有顺序依赖时，可以使用。*\n\n```\n//引入模块\nimport RCTDeviceEventEmitter from 'RCTDeviceEventEmitter';\n//监听自定义事件\nRCTDeviceEventEmitter.addListener('customEvt', (o) => {\n    console.log(o.data);    //'some data'\n    //做点其它的\n});\n//发送自定义事件，可传数据\nRCTDeviceEventEmitter.emit('customEvt', {\n    data: 'some data'\n});\n```\n\n- **使用 AsyncStorage**\n\n这是官方提供的持久缓存的模块，类似浏览器端的 **localStorage**，用法也很类似，不过比** localStorage** 多了不少 **API**。\n\n*使用场景：当然也类似，退出应用需要保存的少量数据，可以存在这里，至于大小限制，Android 貌似是 6M 。*\n\n```\nimport {\n  AsyncStorage\n} from 'react-native';\n//设置\nAsyncStorage.setItem('@MySuperStore:key', 'I like to save it.');\n//获取\nAsyncStorage.getItem('@MySuperStore:key')\n```\n\n[参考文章](https://jinlong.github.io/2016/12/16/react-native-component-communication/)","source":"_posts/React-Native的组件通信方式.md","raw":"---\ntitle: React Native的组件通信方式\ndate: 2017-07-02 21:21:18\ncategories: React Native\ntags: React Native\n---\n\n## React Native的组件通信方式\n\n题外话，简单总结下 React、ReactJS 以及 React Native 之间的关系：\n\n- React 是非常热门的一个前端开发框架，其本身作为 MVC 中的 View 层可以用来构建 UI；同时，React 通过对虚拟 DOM 中的微操作来实对现实际 DOM 的局部更新，提高性能。其组件的模块化开发提高了代码的可维护性。单向数据流的特点，让每个模块根据数据量自动更新，让开发者可以只专注于数据部分，改善程序的可预测性。\n\n- React Native是一个框架，而ReactJS是用来构建站点的JavaScript库。当你用ReactJS开始一个新的项目，你或许需要选择一个类似Webpack的打包器，然后去指定你工程中所需要的打包模块。React-Native包含了你需要的所有东西，你几乎不再需要其他东西了。当你开始一个新项目，你会发现一切都很简单——你可以只需要在命令行敲一行命令就行了——然后你就可使用ES6, 某些ES7特性，甚至一些比较新的polyfills开始你的编码。\n\n- React Native不使用HTML来渲染App，但是提供了可代替它的类似组件。这些React Native组件映射到渲染到App中的真正的原生iOS和Android UI组件。\n\n**言归正传，正文开始**\n\n<!--more-->\n\n##### React 最基础的 props 和 state\n\n- **组件内部用 state**\n```\nconstructor(props) {\n    super(props);\n    this.state = {\n        isOnline: true\t//组件 state\n    };\n}\nrender() {\n    if(this.state.isOnline){\n        //...剩余代码\n    }\n    //...剩余代码\n}\n```\n\n- **父子组件通信用 props**\n```\n//父组件设置属性参数\n<MyComponet isOnline={true} />\n\n//子组件\nclass MyComponent extends Component {\n    constructor(props) {\n        super(props);\n        //子组件获取属性\n        let isOnline = this.props.isOnline;\n    }\n    //...剩余代码\n}\n```\n\n- **子父组件通信也可用 props**\n```\n//子组件\nclass MyComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        //子组件给父组件的方法传参\n        this.props.onChange('newVal');\n    }\n    render() {\n        return (\n            <View />\n        );\n    }\n}\n```\n\n```\n//父组件\nclass parentCpt extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            key: 'defVal'\n        };\n    }\n    //父组件接受子组件的参数，并改变 state\n    handleChange(val) {\n        this.setState({\n            key: val\n        });\n    }\n    render() {\n        //...剩余代码\n        return (\n            <MyComponent onChange={(val) => {this.handleChange(val)}} />\n        );\n    }\n}\n```\n\n- **使用 Refs**\n```\n//子组件\nclass MyComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n    //开放的实例方法\n    doIt() {\n        //...做点什么\n    }\n    render() {\n        return (\n            <View />\n        );\n    }\n}\n```\n\n```\n//父组件\nclass parentCpt extends Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        //调用组件的实例方法\n        this.myCpt.doIt();\n    }\n    render() {\n        //this.myCpt 保存组件的实例\n        return (\n            <MyComponent ref={(c) => {this.myCpt = c;}} />\n        );\n    }\n}\n```\n\n- **使用 global**\n\n**global**类似浏览器里的 **window** 对象，它是全局的，一处定义，所有组件都可以访问，一般用于存储一些全局的配置参数或方法。\n\n使用场景：全局参数不想通过 props 层层组件传递，有些组件对此参数并不关心，只有嵌套的某个组件使用\n\n```\nglobal.isOnline = true;\n```\n\n- **使用 RCTDeviceEventEmitter**\n\n**RCTDeviceEventEmitter** 是一种事件机制，**React Native** 的文档只是草草带过，也可以使用 **DeviceEventEmitter** ，它是把 **RCTDeviceEventEmitter** 封装了一层，用法略不同。\n\n按文档所言，**RCTDeviceEventEmitter** 主要用于 **Native** 发送事件给 **JavaScript**，实际上也可以用来发送自定义事件。\n\n*使用场景：多个组件都使用了异步模块，且异步模块之间有顺序依赖时，可以使用。*\n\n```\n//引入模块\nimport RCTDeviceEventEmitter from 'RCTDeviceEventEmitter';\n//监听自定义事件\nRCTDeviceEventEmitter.addListener('customEvt', (o) => {\n    console.log(o.data);    //'some data'\n    //做点其它的\n});\n//发送自定义事件，可传数据\nRCTDeviceEventEmitter.emit('customEvt', {\n    data: 'some data'\n});\n```\n\n- **使用 AsyncStorage**\n\n这是官方提供的持久缓存的模块，类似浏览器端的 **localStorage**，用法也很类似，不过比** localStorage** 多了不少 **API**。\n\n*使用场景：当然也类似，退出应用需要保存的少量数据，可以存在这里，至于大小限制，Android 貌似是 6M 。*\n\n```\nimport {\n  AsyncStorage\n} from 'react-native';\n//设置\nAsyncStorage.setItem('@MySuperStore:key', 'I like to save it.');\n//获取\nAsyncStorage.getItem('@MySuperStore:key')\n```\n\n[参考文章](https://jinlong.github.io/2016/12/16/react-native-component-communication/)","slug":"React-Native的组件通信方式","published":1,"updated":"2018-08-01T01:41:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhdv0007lxndkyo85ub4","content":"<h2 id=\"React-Native的组件通信方式\"><a href=\"#React-Native的组件通信方式\" class=\"headerlink\" title=\"React Native的组件通信方式\"></a>React Native的组件通信方式</h2><p>题外话，简单总结下 React、ReactJS 以及 React Native 之间的关系：</p>\n<ul>\n<li><p>React 是非常热门的一个前端开发框架，其本身作为 MVC 中的 View 层可以用来构建 UI；同时，React 通过对虚拟 DOM 中的微操作来实对现实际 DOM 的局部更新，提高性能。其组件的模块化开发提高了代码的可维护性。单向数据流的特点，让每个模块根据数据量自动更新，让开发者可以只专注于数据部分，改善程序的可预测性。</p>\n</li>\n<li><p>React Native是一个框架，而ReactJS是用来构建站点的JavaScript库。当你用ReactJS开始一个新的项目，你或许需要选择一个类似Webpack的打包器，然后去指定你工程中所需要的打包模块。React-Native包含了你需要的所有东西，你几乎不再需要其他东西了。当你开始一个新项目，你会发现一切都很简单——你可以只需要在命令行敲一行命令就行了——然后你就可使用ES6, 某些ES7特性，甚至一些比较新的polyfills开始你的编码。</p>\n</li>\n<li><p>React Native不使用HTML来渲染App，但是提供了可代替它的类似组件。这些React Native组件映射到渲染到App中的真正的原生iOS和Android UI组件。</p>\n</li>\n</ul>\n<p><strong>言归正传，正文开始</strong></p>\n<a id=\"more\"></a>\n<h5 id=\"React-最基础的-props-和-state\"><a href=\"#React-最基础的-props-和-state\" class=\"headerlink\" title=\"React 最基础的 props 和 state\"></a>React 最基础的 props 和 state</h5><ul>\n<li><p><strong>组件内部用 state</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">        isOnline: true\t//组件 state</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    if(this.state.isOnline)&#123;</span><br><span class=\"line\">        //...剩余代码</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //...剩余代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>父子组件通信用 props</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件设置属性参数</span><br><span class=\"line\">&lt;MyComponet isOnline=&#123;true&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//子组件</span><br><span class=\"line\">class MyComponent extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        //子组件获取属性</span><br><span class=\"line\">        let isOnline = this.props.isOnline;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //...剩余代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>子父组件通信也可用 props</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//子组件</span><br><span class=\"line\">class MyComponent extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        //子组件给父组件的方法传参</span><br><span class=\"line\">        this.props.onChange(&apos;newVal&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件</span><br><span class=\"line\">class parentCpt extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            key: &apos;defVal&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //父组件接受子组件的参数，并改变 state</span><br><span class=\"line\">    handleChange(val) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            key: val</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        //...剩余代码</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;MyComponent onChange=&#123;(val) =&gt; &#123;this.handleChange(val)&#125;&#125; /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 Refs</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//子组件</span><br><span class=\"line\">class MyComponent extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //开放的实例方法</span><br><span class=\"line\">    doIt() &#123;</span><br><span class=\"line\">        //...做点什么</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件</span><br><span class=\"line\">class parentCpt extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        //调用组件的实例方法</span><br><span class=\"line\">        this.myCpt.doIt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        //this.myCpt 保存组件的实例</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;MyComponent ref=&#123;(c) =&gt; &#123;this.myCpt = c;&#125;&#125; /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 global</strong></li>\n</ul>\n<p><strong>global</strong>类似浏览器里的 <strong>window</strong> 对象，它是全局的，一处定义，所有组件都可以访问，一般用于存储一些全局的配置参数或方法。</p>\n<p>使用场景：全局参数不想通过 props 层层组件传递，有些组件对此参数并不关心，只有嵌套的某个组件使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global.isOnline = true;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 RCTDeviceEventEmitter</strong></li>\n</ul>\n<p><strong>RCTDeviceEventEmitter</strong> 是一种事件机制，<strong>React Native</strong> 的文档只是草草带过，也可以使用 <strong>DeviceEventEmitter</strong> ，它是把 <strong>RCTDeviceEventEmitter</strong> 封装了一层，用法略不同。</p>\n<p>按文档所言，<strong>RCTDeviceEventEmitter</strong> 主要用于 <strong>Native</strong> 发送事件给 <strong>JavaScript</strong>，实际上也可以用来发送自定义事件。</p>\n<p><em>使用场景：多个组件都使用了异步模块，且异步模块之间有顺序依赖时，可以使用。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入模块</span><br><span class=\"line\">import RCTDeviceEventEmitter from &apos;RCTDeviceEventEmitter&apos;;</span><br><span class=\"line\">//监听自定义事件</span><br><span class=\"line\">RCTDeviceEventEmitter.addListener(&apos;customEvt&apos;, (o) =&gt; &#123;</span><br><span class=\"line\">    console.log(o.data);    //&apos;some data&apos;</span><br><span class=\"line\">    //做点其它的</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//发送自定义事件，可传数据</span><br><span class=\"line\">RCTDeviceEventEmitter.emit(&apos;customEvt&apos;, &#123;</span><br><span class=\"line\">    data: &apos;some data&apos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 AsyncStorage</strong></li>\n</ul>\n<p>这是官方提供的持久缓存的模块，类似浏览器端的 <strong>localStorage</strong>，用法也很类似，不过比<strong> localStorage</strong> 多了不少 <strong>API</strong>。</p>\n<p><em>使用场景：当然也类似，退出应用需要保存的少量数据，可以存在这里，至于大小限制，Android 貌似是 6M 。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;</span><br><span class=\"line\">  AsyncStorage</span><br><span class=\"line\">&#125; from &apos;react-native&apos;;</span><br><span class=\"line\">//设置</span><br><span class=\"line\">AsyncStorage.setItem(&apos;@MySuperStore:key&apos;, &apos;I like to save it.&apos;);</span><br><span class=\"line\">//获取</span><br><span class=\"line\">AsyncStorage.getItem(&apos;@MySuperStore:key&apos;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jinlong.github.io/2016/12/16/react-native-component-communication/\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"React-Native的组件通信方式\"><a href=\"#React-Native的组件通信方式\" class=\"headerlink\" title=\"React Native的组件通信方式\"></a>React Native的组件通信方式</h2><p>题外话，简单总结下 React、ReactJS 以及 React Native 之间的关系：</p>\n<ul>\n<li><p>React 是非常热门的一个前端开发框架，其本身作为 MVC 中的 View 层可以用来构建 UI；同时，React 通过对虚拟 DOM 中的微操作来实对现实际 DOM 的局部更新，提高性能。其组件的模块化开发提高了代码的可维护性。单向数据流的特点，让每个模块根据数据量自动更新，让开发者可以只专注于数据部分，改善程序的可预测性。</p>\n</li>\n<li><p>React Native是一个框架，而ReactJS是用来构建站点的JavaScript库。当你用ReactJS开始一个新的项目，你或许需要选择一个类似Webpack的打包器，然后去指定你工程中所需要的打包模块。React-Native包含了你需要的所有东西，你几乎不再需要其他东西了。当你开始一个新项目，你会发现一切都很简单——你可以只需要在命令行敲一行命令就行了——然后你就可使用ES6, 某些ES7特性，甚至一些比较新的polyfills开始你的编码。</p>\n</li>\n<li><p>React Native不使用HTML来渲染App，但是提供了可代替它的类似组件。这些React Native组件映射到渲染到App中的真正的原生iOS和Android UI组件。</p>\n</li>\n</ul>\n<p><strong>言归正传，正文开始</strong></p>","more":"<h5 id=\"React-最基础的-props-和-state\"><a href=\"#React-最基础的-props-和-state\" class=\"headerlink\" title=\"React 最基础的 props 和 state\"></a>React 最基础的 props 和 state</h5><ul>\n<li><p><strong>组件内部用 state</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">        isOnline: true\t//组件 state</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    if(this.state.isOnline)&#123;</span><br><span class=\"line\">        //...剩余代码</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //...剩余代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>父子组件通信用 props</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件设置属性参数</span><br><span class=\"line\">&lt;MyComponet isOnline=&#123;true&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//子组件</span><br><span class=\"line\">class MyComponent extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        //子组件获取属性</span><br><span class=\"line\">        let isOnline = this.props.isOnline;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //...剩余代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>子父组件通信也可用 props</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//子组件</span><br><span class=\"line\">class MyComponent extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        //子组件给父组件的方法传参</span><br><span class=\"line\">        this.props.onChange(&apos;newVal&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件</span><br><span class=\"line\">class parentCpt extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            key: &apos;defVal&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //父组件接受子组件的参数，并改变 state</span><br><span class=\"line\">    handleChange(val) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            key: val</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        //...剩余代码</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;MyComponent onChange=&#123;(val) =&gt; &#123;this.handleChange(val)&#125;&#125; /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 Refs</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//子组件</span><br><span class=\"line\">class MyComponent extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //开放的实例方法</span><br><span class=\"line\">    doIt() &#123;</span><br><span class=\"line\">        //...做点什么</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件</span><br><span class=\"line\">class parentCpt extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        //调用组件的实例方法</span><br><span class=\"line\">        this.myCpt.doIt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        //this.myCpt 保存组件的实例</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;MyComponent ref=&#123;(c) =&gt; &#123;this.myCpt = c;&#125;&#125; /&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 global</strong></li>\n</ul>\n<p><strong>global</strong>类似浏览器里的 <strong>window</strong> 对象，它是全局的，一处定义，所有组件都可以访问，一般用于存储一些全局的配置参数或方法。</p>\n<p>使用场景：全局参数不想通过 props 层层组件传递，有些组件对此参数并不关心，只有嵌套的某个组件使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global.isOnline = true;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 RCTDeviceEventEmitter</strong></li>\n</ul>\n<p><strong>RCTDeviceEventEmitter</strong> 是一种事件机制，<strong>React Native</strong> 的文档只是草草带过，也可以使用 <strong>DeviceEventEmitter</strong> ，它是把 <strong>RCTDeviceEventEmitter</strong> 封装了一层，用法略不同。</p>\n<p>按文档所言，<strong>RCTDeviceEventEmitter</strong> 主要用于 <strong>Native</strong> 发送事件给 <strong>JavaScript</strong>，实际上也可以用来发送自定义事件。</p>\n<p><em>使用场景：多个组件都使用了异步模块，且异步模块之间有顺序依赖时，可以使用。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入模块</span><br><span class=\"line\">import RCTDeviceEventEmitter from &apos;RCTDeviceEventEmitter&apos;;</span><br><span class=\"line\">//监听自定义事件</span><br><span class=\"line\">RCTDeviceEventEmitter.addListener(&apos;customEvt&apos;, (o) =&gt; &#123;</span><br><span class=\"line\">    console.log(o.data);    //&apos;some data&apos;</span><br><span class=\"line\">    //做点其它的</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//发送自定义事件，可传数据</span><br><span class=\"line\">RCTDeviceEventEmitter.emit(&apos;customEvt&apos;, &#123;</span><br><span class=\"line\">    data: &apos;some data&apos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用 AsyncStorage</strong></li>\n</ul>\n<p>这是官方提供的持久缓存的模块，类似浏览器端的 <strong>localStorage</strong>，用法也很类似，不过比<strong> localStorage</strong> 多了不少 <strong>API</strong>。</p>\n<p><em>使用场景：当然也类似，退出应用需要保存的少量数据，可以存在这里，至于大小限制，Android 貌似是 6M 。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;</span><br><span class=\"line\">  AsyncStorage</span><br><span class=\"line\">&#125; from &apos;react-native&apos;;</span><br><span class=\"line\">//设置</span><br><span class=\"line\">AsyncStorage.setItem(&apos;@MySuperStore:key&apos;, &apos;I like to save it.&apos;);</span><br><span class=\"line\">//获取</span><br><span class=\"line\">AsyncStorage.getItem(&apos;@MySuperStore:key&apos;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jinlong.github.io/2016/12/16/react-native-component-communication/\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>"},{"title":"Linux实用命令","date":"2017-10-23T12:19:00.000Z","_content":"## Linux实用命令\n\n#### Linux实用命令\n\n##### 查看当前特定的所有进程\n\n```\nps -ef | grep *\n\neg: ps -ef | grep VirtualBox\n```\n##### 杀死特定的进程\n\n```\nkill -9 PID\n\neg: kill -9 63586\n```\n\n<!--more-->\n\n\n##### 查看命令行的历史记录\n\n```\nhistory\n\n(后面可加number,查最近n条记录)\neg: history 10\n```\n\n##### 查看特定命令的历史记录\n\n```\nhistory | grep *\n\neg: history | grep code-push\n```","source":"_posts/Linux实用命令.md","raw":"---\ntitle: Linux实用命令\ndate: 2017-10-23 20:19:00\ncategories: Linux\ntags: Linux\n---\n## Linux实用命令\n\n#### Linux实用命令\n\n##### 查看当前特定的所有进程\n\n```\nps -ef | grep *\n\neg: ps -ef | grep VirtualBox\n```\n##### 杀死特定的进程\n\n```\nkill -9 PID\n\neg: kill -9 63586\n```\n\n<!--more-->\n\n\n##### 查看命令行的历史记录\n\n```\nhistory\n\n(后面可加number,查最近n条记录)\neg: history 10\n```\n\n##### 查看特定命令的历史记录\n\n```\nhistory | grep *\n\neg: history | grep code-push\n```","slug":"Linux实用命令","published":1,"updated":"2018-08-21T02:19:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhe0000blxndczdvcg22","content":"<h2 id=\"Linux实用命令\"><a href=\"#Linux实用命令\" class=\"headerlink\" title=\"Linux实用命令\"></a>Linux实用命令</h2><h4 id=\"Linux实用命令-1\"><a href=\"#Linux实用命令-1\" class=\"headerlink\" title=\"Linux实用命令\"></a>Linux实用命令</h4><h5 id=\"查看当前特定的所有进程\"><a href=\"#查看当前特定的所有进程\" class=\"headerlink\" title=\"查看当前特定的所有进程\"></a>查看当前特定的所有进程</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep *</span><br><span class=\"line\"></span><br><span class=\"line\">eg: ps -ef | grep VirtualBox</span><br></pre></td></tr></table></figure>\n<h5 id=\"杀死特定的进程\"><a href=\"#杀死特定的进程\" class=\"headerlink\" title=\"杀死特定的进程\"></a>杀死特定的进程</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 PID</span><br><span class=\"line\"></span><br><span class=\"line\">eg: kill -9 63586</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"查看命令行的历史记录\"><a href=\"#查看命令行的历史记录\" class=\"headerlink\" title=\"查看命令行的历史记录\"></a>查看命令行的历史记录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history</span><br><span class=\"line\"></span><br><span class=\"line\">(后面可加number,查最近n条记录)</span><br><span class=\"line\">eg: history 10</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看特定命令的历史记录\"><a href=\"#查看特定命令的历史记录\" class=\"headerlink\" title=\"查看特定命令的历史记录\"></a>查看特定命令的历史记录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history | grep *</span><br><span class=\"line\"></span><br><span class=\"line\">eg: history | grep code-push</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"Linux实用命令\"><a href=\"#Linux实用命令\" class=\"headerlink\" title=\"Linux实用命令\"></a>Linux实用命令</h2><h4 id=\"Linux实用命令-1\"><a href=\"#Linux实用命令-1\" class=\"headerlink\" title=\"Linux实用命令\"></a>Linux实用命令</h4><h5 id=\"查看当前特定的所有进程\"><a href=\"#查看当前特定的所有进程\" class=\"headerlink\" title=\"查看当前特定的所有进程\"></a>查看当前特定的所有进程</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep *</span><br><span class=\"line\"></span><br><span class=\"line\">eg: ps -ef | grep VirtualBox</span><br></pre></td></tr></table></figure>\n<h5 id=\"杀死特定的进程\"><a href=\"#杀死特定的进程\" class=\"headerlink\" title=\"杀死特定的进程\"></a>杀死特定的进程</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 PID</span><br><span class=\"line\"></span><br><span class=\"line\">eg: kill -9 63586</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"查看命令行的历史记录\"><a href=\"#查看命令行的历史记录\" class=\"headerlink\" title=\"查看命令行的历史记录\"></a>查看命令行的历史记录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history</span><br><span class=\"line\"></span><br><span class=\"line\">(后面可加number,查最近n条记录)</span><br><span class=\"line\">eg: history 10</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看特定命令的历史记录\"><a href=\"#查看特定命令的历史记录\" class=\"headerlink\" title=\"查看特定命令的历史记录\"></a>查看特定命令的历史记录</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history | grep *</span><br><span class=\"line\"></span><br><span class=\"line\">eg: history | grep code-push</span><br></pre></td></tr></table></figure>"},{"title":"Vim命令笔记","date":"2017-12-18T07:26:10.000Z","_content":"\n## Vim命令笔记\n\n##### 基本操作\n- `i` → Insert 模式，按 ESC 回到 Normal 模式.\n- `x` → 删当前光标所在的一个字符。\n- `:wq` → 存盘 + 退出 (`:w` 存盘, `:q` 退出) （注：`:w` 后可以跟文件名）\n- `dd` → 删除当前行，并把删除的行存到剪贴板里\n- `p` → 粘贴剪贴板\n- `hjkl` (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: `j` 就像下箭头。\n- `:help <command>` → 显示相关命令的帮助。你也可以就输入 `:help` 而不跟命令。（注：退出帮助需要输入`:q`）\n\n<!--more-->\n\n##### 各种插入模式\n- `a` → 在光标后插入\n- `o` → 在当前行后插入一个新行\n- `O` → 在当前行前插入一个新行\n- `cw` → 替换从光标所在位置后到一个单词结尾的字符\n\n##### 简单的移动光标\n- `0` → 数字零，到行头\n- `^` → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）\n- `$` → 到本行行尾\n- `g_` → 到本行最后一个不是blank字符的位置。\n- `/pattern` → 搜索 pattern 的字符串（注：如果搜索出多个匹配，可按n键到下一个）\n\n##### 拷贝/粘贴\n###### （注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）\n- `P` → 粘贴\n- `yy` → 拷贝当前行当行于 ddP\n\n##### Undo/Redo\n- `u` → undo\n- `<C-r>` → redo\n\n##### 打开/保存/退出/改变文件(Buffer)\n- `:e` `<path/to/file>` → 打开一个文件\n- `:w` → 存盘\n- `:saveas <path/to/file>` → 另存为 `<path/to/file>`\n- `:x`， `ZZ` 或 `:wq` → 保存并退出 (`:x` 表示仅在需要时保存，`ZZ`不需要输入冒号并回车)\n- `:q!` → 退出不保存 `:qa!` 强行退出所有的正在编辑的文件，就算别的文件有更改。\n- `:bn` 和 `:bp` → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用`:n`到下一个文件）\n\n- `NG` → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 `:N` 到第N行，如 :137 到第137行）\n- `gg` → 到第一行。（注：相当于1G，或 :1）\n- `G` → 到最后一行。\n\n##### 按单词移动\n- `w` → 到下一个单词的开头。\n- `e` → 到下一个单词的结尾。\n\n![vim快捷操作](Vim命令笔记/vim快捷操作.png)","source":"_posts/Vim命令笔记.md","raw":"---\ntitle: Vim命令笔记\ndate: 2017-12-18 15:26:10\ncategories: Vim\ntags: Vim\n---\n\n## Vim命令笔记\n\n##### 基本操作\n- `i` → Insert 模式，按 ESC 回到 Normal 模式.\n- `x` → 删当前光标所在的一个字符。\n- `:wq` → 存盘 + 退出 (`:w` 存盘, `:q` 退出) （注：`:w` 后可以跟文件名）\n- `dd` → 删除当前行，并把删除的行存到剪贴板里\n- `p` → 粘贴剪贴板\n- `hjkl` (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: `j` 就像下箭头。\n- `:help <command>` → 显示相关命令的帮助。你也可以就输入 `:help` 而不跟命令。（注：退出帮助需要输入`:q`）\n\n<!--more-->\n\n##### 各种插入模式\n- `a` → 在光标后插入\n- `o` → 在当前行后插入一个新行\n- `O` → 在当前行前插入一个新行\n- `cw` → 替换从光标所在位置后到一个单词结尾的字符\n\n##### 简单的移动光标\n- `0` → 数字零，到行头\n- `^` → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）\n- `$` → 到本行行尾\n- `g_` → 到本行最后一个不是blank字符的位置。\n- `/pattern` → 搜索 pattern 的字符串（注：如果搜索出多个匹配，可按n键到下一个）\n\n##### 拷贝/粘贴\n###### （注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）\n- `P` → 粘贴\n- `yy` → 拷贝当前行当行于 ddP\n\n##### Undo/Redo\n- `u` → undo\n- `<C-r>` → redo\n\n##### 打开/保存/退出/改变文件(Buffer)\n- `:e` `<path/to/file>` → 打开一个文件\n- `:w` → 存盘\n- `:saveas <path/to/file>` → 另存为 `<path/to/file>`\n- `:x`， `ZZ` 或 `:wq` → 保存并退出 (`:x` 表示仅在需要时保存，`ZZ`不需要输入冒号并回车)\n- `:q!` → 退出不保存 `:qa!` 强行退出所有的正在编辑的文件，就算别的文件有更改。\n- `:bn` 和 `:bp` → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用`:n`到下一个文件）\n\n- `NG` → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 `:N` 到第N行，如 :137 到第137行）\n- `gg` → 到第一行。（注：相当于1G，或 :1）\n- `G` → 到最后一行。\n\n##### 按单词移动\n- `w` → 到下一个单词的开头。\n- `e` → 到下一个单词的结尾。\n\n![vim快捷操作](Vim命令笔记/vim快捷操作.png)","slug":"Vim命令笔记","published":1,"updated":"2018-02-07T05:43:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhkh000vlxnde0z6na7q","content":"<h2 id=\"Vim命令笔记\"><a href=\"#Vim命令笔记\" class=\"headerlink\" title=\"Vim命令笔记\"></a>Vim命令笔记</h2><h5 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h5><ul>\n<li><code>i</code> → Insert 模式，按 ESC 回到 Normal 模式.</li>\n<li><code>x</code> → 删当前光标所在的一个字符。</li>\n<li><code>:wq</code> → 存盘 + 退出 (<code>:w</code> 存盘, <code>:q</code> 退出) （注：<code>:w</code> 后可以跟文件名）</li>\n<li><code>dd</code> → 删除当前行，并把删除的行存到剪贴板里</li>\n<li><code>p</code> → 粘贴剪贴板</li>\n<li><code>hjkl</code> (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: <code>j</code> 就像下箭头。</li>\n<li><code>:help &lt;command&gt;</code> → 显示相关命令的帮助。你也可以就输入 <code>:help</code> 而不跟命令。（注：退出帮助需要输入<code>:q</code>）</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"各种插入模式\"><a href=\"#各种插入模式\" class=\"headerlink\" title=\"各种插入模式\"></a>各种插入模式</h5><ul>\n<li><code>a</code> → 在光标后插入</li>\n<li><code>o</code> → 在当前行后插入一个新行</li>\n<li><code>O</code> → 在当前行前插入一个新行</li>\n<li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符</li>\n</ul>\n<h5 id=\"简单的移动光标\"><a href=\"#简单的移动光标\" class=\"headerlink\" title=\"简单的移动光标\"></a>简单的移动光标</h5><ul>\n<li><code>0</code> → 数字零，到行头</li>\n<li><code>^</code> → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li>\n<li><code>$</code> → 到本行行尾</li>\n<li><code>g_</code> → 到本行最后一个不是blank字符的位置。</li>\n<li><code>/pattern</code> → 搜索 pattern 的字符串（注：如果搜索出多个匹配，可按n键到下一个）</li>\n</ul>\n<h5 id=\"拷贝-粘贴\"><a href=\"#拷贝-粘贴\" class=\"headerlink\" title=\"拷贝/粘贴\"></a>拷贝/粘贴</h5><h6 id=\"（注：p-P都可以，p是表示在当前位置之后，P表示在当前位置之前）\"><a href=\"#（注：p-P都可以，p是表示在当前位置之后，P表示在当前位置之前）\" class=\"headerlink\" title=\"（注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）\"></a>（注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）</h6><ul>\n<li><code>P</code> → 粘贴</li>\n<li><code>yy</code> → 拷贝当前行当行于 ddP</li>\n</ul>\n<h5 id=\"Undo-Redo\"><a href=\"#Undo-Redo\" class=\"headerlink\" title=\"Undo/Redo\"></a>Undo/Redo</h5><ul>\n<li><code>u</code> → undo</li>\n<li><code>&lt;C-r&gt;</code> → redo</li>\n</ul>\n<h5 id=\"打开-保存-退出-改变文件-Buffer\"><a href=\"#打开-保存-退出-改变文件-Buffer\" class=\"headerlink\" title=\"打开/保存/退出/改变文件(Buffer)\"></a>打开/保存/退出/改变文件(Buffer)</h5><ul>\n<li><code>:e</code> <code>&lt;path/to/file&gt;</code> → 打开一个文件</li>\n<li><code>:w</code> → 存盘</li>\n<li><code>:saveas &lt;path/to/file&gt;</code> → 另存为 <code>&lt;path/to/file&gt;</code></li>\n<li><code>:x</code>， <code>ZZ</code> 或 <code>:wq</code> → 保存并退出 (<code>:x</code> 表示仅在需要时保存，<code>ZZ</code>不需要输入冒号并回车)</li>\n<li><code>:q!</code> → 退出不保存 <code>:qa!</code> 强行退出所有的正在编辑的文件，就算别的文件有更改。</li>\n<li><p><code>:bn</code> 和 <code>:bp</code> → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用<code>:n</code>到下一个文件）</p>\n</li>\n<li><p><code>NG</code> → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 <code>:N</code> 到第N行，如 :137 到第137行）</p>\n</li>\n<li><code>gg</code> → 到第一行。（注：相当于1G，或 :1）</li>\n<li><code>G</code> → 到最后一行。</li>\n</ul>\n<h5 id=\"按单词移动\"><a href=\"#按单词移动\" class=\"headerlink\" title=\"按单词移动\"></a>按单词移动</h5><ul>\n<li><code>w</code> → 到下一个单词的开头。</li>\n<li><code>e</code> → 到下一个单词的结尾。</li>\n</ul>\n<p><img src=\"/2017/12/18/Vim命令笔记/vim快捷操作.png\" alt=\"vim快捷操作\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Vim命令笔记\"><a href=\"#Vim命令笔记\" class=\"headerlink\" title=\"Vim命令笔记\"></a>Vim命令笔记</h2><h5 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h5><ul>\n<li><code>i</code> → Insert 模式，按 ESC 回到 Normal 模式.</li>\n<li><code>x</code> → 删当前光标所在的一个字符。</li>\n<li><code>:wq</code> → 存盘 + 退出 (<code>:w</code> 存盘, <code>:q</code> 退出) （注：<code>:w</code> 后可以跟文件名）</li>\n<li><code>dd</code> → 删除当前行，并把删除的行存到剪贴板里</li>\n<li><code>p</code> → 粘贴剪贴板</li>\n<li><code>hjkl</code> (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: <code>j</code> 就像下箭头。</li>\n<li><code>:help &lt;command&gt;</code> → 显示相关命令的帮助。你也可以就输入 <code>:help</code> 而不跟命令。（注：退出帮助需要输入<code>:q</code>）</li>\n</ul>","more":"<h5 id=\"各种插入模式\"><a href=\"#各种插入模式\" class=\"headerlink\" title=\"各种插入模式\"></a>各种插入模式</h5><ul>\n<li><code>a</code> → 在光标后插入</li>\n<li><code>o</code> → 在当前行后插入一个新行</li>\n<li><code>O</code> → 在当前行前插入一个新行</li>\n<li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符</li>\n</ul>\n<h5 id=\"简单的移动光标\"><a href=\"#简单的移动光标\" class=\"headerlink\" title=\"简单的移动光标\"></a>简单的移动光标</h5><ul>\n<li><code>0</code> → 数字零，到行头</li>\n<li><code>^</code> → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li>\n<li><code>$</code> → 到本行行尾</li>\n<li><code>g_</code> → 到本行最后一个不是blank字符的位置。</li>\n<li><code>/pattern</code> → 搜索 pattern 的字符串（注：如果搜索出多个匹配，可按n键到下一个）</li>\n</ul>\n<h5 id=\"拷贝-粘贴\"><a href=\"#拷贝-粘贴\" class=\"headerlink\" title=\"拷贝/粘贴\"></a>拷贝/粘贴</h5><h6 id=\"（注：p-P都可以，p是表示在当前位置之后，P表示在当前位置之前）\"><a href=\"#（注：p-P都可以，p是表示在当前位置之后，P表示在当前位置之前）\" class=\"headerlink\" title=\"（注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）\"></a>（注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）</h6><ul>\n<li><code>P</code> → 粘贴</li>\n<li><code>yy</code> → 拷贝当前行当行于 ddP</li>\n</ul>\n<h5 id=\"Undo-Redo\"><a href=\"#Undo-Redo\" class=\"headerlink\" title=\"Undo/Redo\"></a>Undo/Redo</h5><ul>\n<li><code>u</code> → undo</li>\n<li><code>&lt;C-r&gt;</code> → redo</li>\n</ul>\n<h5 id=\"打开-保存-退出-改变文件-Buffer\"><a href=\"#打开-保存-退出-改变文件-Buffer\" class=\"headerlink\" title=\"打开/保存/退出/改变文件(Buffer)\"></a>打开/保存/退出/改变文件(Buffer)</h5><ul>\n<li><code>:e</code> <code>&lt;path/to/file&gt;</code> → 打开一个文件</li>\n<li><code>:w</code> → 存盘</li>\n<li><code>:saveas &lt;path/to/file&gt;</code> → 另存为 <code>&lt;path/to/file&gt;</code></li>\n<li><code>:x</code>， <code>ZZ</code> 或 <code>:wq</code> → 保存并退出 (<code>:x</code> 表示仅在需要时保存，<code>ZZ</code>不需要输入冒号并回车)</li>\n<li><code>:q!</code> → 退出不保存 <code>:qa!</code> 强行退出所有的正在编辑的文件，就算别的文件有更改。</li>\n<li><p><code>:bn</code> 和 <code>:bp</code> → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用<code>:n</code>到下一个文件）</p>\n</li>\n<li><p><code>NG</code> → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 <code>:N</code> 到第N行，如 :137 到第137行）</p>\n</li>\n<li><code>gg</code> → 到第一行。（注：相当于1G，或 :1）</li>\n<li><code>G</code> → 到最后一行。</li>\n</ul>\n<h5 id=\"按单词移动\"><a href=\"#按单词移动\" class=\"headerlink\" title=\"按单词移动\"></a>按单词移动</h5><ul>\n<li><code>w</code> → 到下一个单词的开头。</li>\n<li><code>e</code> → 到下一个单词的结尾。</li>\n</ul>\n<p><img src=\"/2017/12/18/Vim命令笔记/vim快捷操作.png\" alt=\"vim快捷操作\"></p>"},{"title":"Xcode无证书打包","date":"2018-07-13T10:59:31.000Z","_content":"## Xcode无证书打包\n\n写这篇博客的原因是：公司申请了很长时间的苹果企业账号，却久久没有回应，同时又没有苹果个人账号以及公司账号，但app又急着给用户用；无奈之下只好找第三方服务进行企业重签。在没有证书的情况下，我只好打一个自签名的安装包给第三方了；打包的过程遇到一些小坑，因此记录下这次经历，方便于有需要的人！\n\n<!--more-->\n\n#### 1. 在Xcode里登录无证书的开发者账号，然后创建自签名证书\n\n![1](Xcode无证书打包/1.png)\n\n#### 2. 选择刚创建的自签名证书，如果下面出现警告，那么fix issuse即可\n\n![2](Xcode无证书打包/2.png)\n\n#### 3.\t在edit scheme中设置run的模式为realese模式\n\n![3](Xcode无证书打包/3.png)\n\n#### 4. run过之后，在finder中全局搜索你的app。(注意如果你的工程名位XXX，那么请搜索XXX.app; 记得选择最近编辑的那个.app文件)\n\n![4](Xcode无证书打包/4.png)\n\n#### 5. 将生成的.app文件转成.ipa文件。\n这里就有个坑了，老版本的iTunes直接可以在我的应用程序里将.app文件转换成.ipa文件里；但在新版本的iTunes里费了很大劲怎么也找不到此选项，只好找其他办法来完成此过程。下面推荐一种解压改后缀的方式：\n\n这种方式是在xcode编译产生出.app包的基础上进行进一步处理，通过简单的压缩以及该后缀名即可实现ipa发包。\n\n这种方式下又可通过脚本自动处理以及手动处理两种途径实现，推荐脚本方法，一劳永逸。\n\n##### (1) 脚本自动生成ipa包\nStep1: 新建文件夹，命名为“distribute”，新建distribute.sh脚本文件，内容为:\n\n```\n// 注意，脚本中所有appName请先替换成你的真正app名称\n\nrm -rf appName\nmkdir appName\nmkdir appName/Payload\ncp -r appName.app appName/Payload/appName.app\ncp Icon.png appName/iTunesArtwork\ncd appName\nzip -r appName.ipa Payload iTunesArtwork\n\nexit 0\n```\n![5](Xcode无证书打包/5.png)\n\nStep2: 将要转化的.app文件放到distribute/文件夹下\n这时的文件夹目录结构是这样的：(注意，脚本中所有appName请先替换成你的真正app名称)\n\n```\ndistribute/distribute.sh\ndistribute/appName.app\n```\n\nStep3: 运行distribute.sh脚本\n打开Terminal，cd到distribute文件夹下，输入`./distribute.sh`。如果提示`permission denied`，则用`chmod 777 distribute.sh`命令赋予权限后，再执行一次`./distribute.sh`。\n\nStep4: 大约若干秒后，会在distribute/文件夹下生成appName/文件夹，里面的appName.ipa就是我们想要的包。\n\n##### (2) 手动压缩改后缀方式\n这种方式与上面的方式本质是一样的。\n\nStep1: 新建“Payload”文件夹，注意名字要一字不差；\n\nStep2: 将你的.app包放到Payload中，注意app的名字不做任何更改，就用xcode生成的app名称；\n\nStep3: 在Payload文件夹上右键压缩成zip，然后将生成的.zip文件后缀改成.ipa即可\n\n\n[参考文章1](http://www.cocoachina.com/ios/20170623/19623.html)\n\n[参考文章2](http://www.cnblogs.com/wengzilin/p/4601684.html)","source":"_posts/Xcode无证书打包.md","raw":"---\ntitle: Xcode无证书打包\ndate: 2018-07-13 18:59:31\ncategories: React Native\ntags: 爬坑\n---\n## Xcode无证书打包\n\n写这篇博客的原因是：公司申请了很长时间的苹果企业账号，却久久没有回应，同时又没有苹果个人账号以及公司账号，但app又急着给用户用；无奈之下只好找第三方服务进行企业重签。在没有证书的情况下，我只好打一个自签名的安装包给第三方了；打包的过程遇到一些小坑，因此记录下这次经历，方便于有需要的人！\n\n<!--more-->\n\n#### 1. 在Xcode里登录无证书的开发者账号，然后创建自签名证书\n\n![1](Xcode无证书打包/1.png)\n\n#### 2. 选择刚创建的自签名证书，如果下面出现警告，那么fix issuse即可\n\n![2](Xcode无证书打包/2.png)\n\n#### 3.\t在edit scheme中设置run的模式为realese模式\n\n![3](Xcode无证书打包/3.png)\n\n#### 4. run过之后，在finder中全局搜索你的app。(注意如果你的工程名位XXX，那么请搜索XXX.app; 记得选择最近编辑的那个.app文件)\n\n![4](Xcode无证书打包/4.png)\n\n#### 5. 将生成的.app文件转成.ipa文件。\n这里就有个坑了，老版本的iTunes直接可以在我的应用程序里将.app文件转换成.ipa文件里；但在新版本的iTunes里费了很大劲怎么也找不到此选项，只好找其他办法来完成此过程。下面推荐一种解压改后缀的方式：\n\n这种方式是在xcode编译产生出.app包的基础上进行进一步处理，通过简单的压缩以及该后缀名即可实现ipa发包。\n\n这种方式下又可通过脚本自动处理以及手动处理两种途径实现，推荐脚本方法，一劳永逸。\n\n##### (1) 脚本自动生成ipa包\nStep1: 新建文件夹，命名为“distribute”，新建distribute.sh脚本文件，内容为:\n\n```\n// 注意，脚本中所有appName请先替换成你的真正app名称\n\nrm -rf appName\nmkdir appName\nmkdir appName/Payload\ncp -r appName.app appName/Payload/appName.app\ncp Icon.png appName/iTunesArtwork\ncd appName\nzip -r appName.ipa Payload iTunesArtwork\n\nexit 0\n```\n![5](Xcode无证书打包/5.png)\n\nStep2: 将要转化的.app文件放到distribute/文件夹下\n这时的文件夹目录结构是这样的：(注意，脚本中所有appName请先替换成你的真正app名称)\n\n```\ndistribute/distribute.sh\ndistribute/appName.app\n```\n\nStep3: 运行distribute.sh脚本\n打开Terminal，cd到distribute文件夹下，输入`./distribute.sh`。如果提示`permission denied`，则用`chmod 777 distribute.sh`命令赋予权限后，再执行一次`./distribute.sh`。\n\nStep4: 大约若干秒后，会在distribute/文件夹下生成appName/文件夹，里面的appName.ipa就是我们想要的包。\n\n##### (2) 手动压缩改后缀方式\n这种方式与上面的方式本质是一样的。\n\nStep1: 新建“Payload”文件夹，注意名字要一字不差；\n\nStep2: 将你的.app包放到Payload中，注意app的名字不做任何更改，就用xcode生成的app名称；\n\nStep3: 在Payload文件夹上右键压缩成zip，然后将生成的.zip文件后缀改成.ipa即可\n\n\n[参考文章1](http://www.cocoachina.com/ios/20170623/19623.html)\n\n[参考文章2](http://www.cnblogs.com/wengzilin/p/4601684.html)","slug":"Xcode无证书打包","published":1,"updated":"2018-07-31T09:13:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhki000wlxndnl524ytj","content":"<h2 id=\"Xcode无证书打包\"><a href=\"#Xcode无证书打包\" class=\"headerlink\" title=\"Xcode无证书打包\"></a>Xcode无证书打包</h2><p>写这篇博客的原因是：公司申请了很长时间的苹果企业账号，却久久没有回应，同时又没有苹果个人账号以及公司账号，但app又急着给用户用；无奈之下只好找第三方服务进行企业重签。在没有证书的情况下，我只好打一个自签名的安装包给第三方了；打包的过程遇到一些小坑，因此记录下这次经历，方便于有需要的人！</p>\n<a id=\"more\"></a>\n<h4 id=\"1-在Xcode里登录无证书的开发者账号，然后创建自签名证书\"><a href=\"#1-在Xcode里登录无证书的开发者账号，然后创建自签名证书\" class=\"headerlink\" title=\"1. 在Xcode里登录无证书的开发者账号，然后创建自签名证书\"></a>1. 在Xcode里登录无证书的开发者账号，然后创建自签名证书</h4><p><img src=\"/2018/07/13/Xcode无证书打包/1.png\" alt=\"1\"></p>\n<h4 id=\"2-选择刚创建的自签名证书，如果下面出现警告，那么fix-issuse即可\"><a href=\"#2-选择刚创建的自签名证书，如果下面出现警告，那么fix-issuse即可\" class=\"headerlink\" title=\"2. 选择刚创建的自签名证书，如果下面出现警告，那么fix issuse即可\"></a>2. 选择刚创建的自签名证书，如果下面出现警告，那么fix issuse即可</h4><p><img src=\"/2018/07/13/Xcode无证书打包/2.png\" alt=\"2\"></p>\n<h4 id=\"3-在edit-scheme中设置run的模式为realese模式\"><a href=\"#3-在edit-scheme中设置run的模式为realese模式\" class=\"headerlink\" title=\"3.    在edit scheme中设置run的模式为realese模式\"></a>3.    在edit scheme中设置run的模式为realese模式</h4><p><img src=\"/2018/07/13/Xcode无证书打包/3.png\" alt=\"3\"></p>\n<h4 id=\"4-run过之后，在finder中全局搜索你的app。-注意如果你的工程名位XXX，那么请搜索XXX-app-记得选择最近编辑的那个-app文件\"><a href=\"#4-run过之后，在finder中全局搜索你的app。-注意如果你的工程名位XXX，那么请搜索XXX-app-记得选择最近编辑的那个-app文件\" class=\"headerlink\" title=\"4. run过之后，在finder中全局搜索你的app。(注意如果你的工程名位XXX，那么请搜索XXX.app; 记得选择最近编辑的那个.app文件)\"></a>4. run过之后，在finder中全局搜索你的app。(注意如果你的工程名位XXX，那么请搜索XXX.app; 记得选择最近编辑的那个.app文件)</h4><p><img src=\"/2018/07/13/Xcode无证书打包/4.png\" alt=\"4\"></p>\n<h4 id=\"5-将生成的-app文件转成-ipa文件。\"><a href=\"#5-将生成的-app文件转成-ipa文件。\" class=\"headerlink\" title=\"5. 将生成的.app文件转成.ipa文件。\"></a>5. 将生成的.app文件转成.ipa文件。</h4><p>这里就有个坑了，老版本的iTunes直接可以在我的应用程序里将.app文件转换成.ipa文件里；但在新版本的iTunes里费了很大劲怎么也找不到此选项，只好找其他办法来完成此过程。下面推荐一种解压改后缀的方式：</p>\n<p>这种方式是在xcode编译产生出.app包的基础上进行进一步处理，通过简单的压缩以及该后缀名即可实现ipa发包。</p>\n<p>这种方式下又可通过脚本自动处理以及手动处理两种途径实现，推荐脚本方法，一劳永逸。</p>\n<h5 id=\"1-脚本自动生成ipa包\"><a href=\"#1-脚本自动生成ipa包\" class=\"headerlink\" title=\"(1) 脚本自动生成ipa包\"></a>(1) 脚本自动生成ipa包</h5><p>Step1: 新建文件夹，命名为“distribute”，新建distribute.sh脚本文件，内容为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注意，脚本中所有appName请先替换成你的真正app名称</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf appName</span><br><span class=\"line\">mkdir appName</span><br><span class=\"line\">mkdir appName/Payload</span><br><span class=\"line\">cp -r appName.app appName/Payload/appName.app</span><br><span class=\"line\">cp Icon.png appName/iTunesArtwork</span><br><span class=\"line\">cd appName</span><br><span class=\"line\">zip -r appName.ipa Payload iTunesArtwork</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/13/Xcode无证书打包/5.png\" alt=\"5\"></p>\n<p>Step2: 将要转化的.app文件放到distribute/文件夹下<br>这时的文件夹目录结构是这样的：(注意，脚本中所有appName请先替换成你的真正app名称)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distribute/distribute.sh</span><br><span class=\"line\">distribute/appName.app</span><br></pre></td></tr></table></figure>\n<p>Step3: 运行distribute.sh脚本<br>打开Terminal，cd到distribute文件夹下，输入<code>./distribute.sh</code>。如果提示<code>permission denied</code>，则用<code>chmod 777 distribute.sh</code>命令赋予权限后，再执行一次<code>./distribute.sh</code>。</p>\n<p>Step4: 大约若干秒后，会在distribute/文件夹下生成appName/文件夹，里面的appName.ipa就是我们想要的包。</p>\n<h5 id=\"2-手动压缩改后缀方式\"><a href=\"#2-手动压缩改后缀方式\" class=\"headerlink\" title=\"(2) 手动压缩改后缀方式\"></a>(2) 手动压缩改后缀方式</h5><p>这种方式与上面的方式本质是一样的。</p>\n<p>Step1: 新建“Payload”文件夹，注意名字要一字不差；</p>\n<p>Step2: 将你的.app包放到Payload中，注意app的名字不做任何更改，就用xcode生成的app名称；</p>\n<p>Step3: 在Payload文件夹上右键压缩成zip，然后将生成的.zip文件后缀改成.ipa即可</p>\n<p><a href=\"http://www.cocoachina.com/ios/20170623/19623.html\" target=\"_blank\" rel=\"noopener\">参考文章1</a></p>\n<p><a href=\"http://www.cnblogs.com/wengzilin/p/4601684.html\" target=\"_blank\" rel=\"noopener\">参考文章2</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Xcode无证书打包\"><a href=\"#Xcode无证书打包\" class=\"headerlink\" title=\"Xcode无证书打包\"></a>Xcode无证书打包</h2><p>写这篇博客的原因是：公司申请了很长时间的苹果企业账号，却久久没有回应，同时又没有苹果个人账号以及公司账号，但app又急着给用户用；无奈之下只好找第三方服务进行企业重签。在没有证书的情况下，我只好打一个自签名的安装包给第三方了；打包的过程遇到一些小坑，因此记录下这次经历，方便于有需要的人！</p>","more":"<h4 id=\"1-在Xcode里登录无证书的开发者账号，然后创建自签名证书\"><a href=\"#1-在Xcode里登录无证书的开发者账号，然后创建自签名证书\" class=\"headerlink\" title=\"1. 在Xcode里登录无证书的开发者账号，然后创建自签名证书\"></a>1. 在Xcode里登录无证书的开发者账号，然后创建自签名证书</h4><p><img src=\"/2018/07/13/Xcode无证书打包/1.png\" alt=\"1\"></p>\n<h4 id=\"2-选择刚创建的自签名证书，如果下面出现警告，那么fix-issuse即可\"><a href=\"#2-选择刚创建的自签名证书，如果下面出现警告，那么fix-issuse即可\" class=\"headerlink\" title=\"2. 选择刚创建的自签名证书，如果下面出现警告，那么fix issuse即可\"></a>2. 选择刚创建的自签名证书，如果下面出现警告，那么fix issuse即可</h4><p><img src=\"/2018/07/13/Xcode无证书打包/2.png\" alt=\"2\"></p>\n<h4 id=\"3-在edit-scheme中设置run的模式为realese模式\"><a href=\"#3-在edit-scheme中设置run的模式为realese模式\" class=\"headerlink\" title=\"3.    在edit scheme中设置run的模式为realese模式\"></a>3.    在edit scheme中设置run的模式为realese模式</h4><p><img src=\"/2018/07/13/Xcode无证书打包/3.png\" alt=\"3\"></p>\n<h4 id=\"4-run过之后，在finder中全局搜索你的app。-注意如果你的工程名位XXX，那么请搜索XXX-app-记得选择最近编辑的那个-app文件\"><a href=\"#4-run过之后，在finder中全局搜索你的app。-注意如果你的工程名位XXX，那么请搜索XXX-app-记得选择最近编辑的那个-app文件\" class=\"headerlink\" title=\"4. run过之后，在finder中全局搜索你的app。(注意如果你的工程名位XXX，那么请搜索XXX.app; 记得选择最近编辑的那个.app文件)\"></a>4. run过之后，在finder中全局搜索你的app。(注意如果你的工程名位XXX，那么请搜索XXX.app; 记得选择最近编辑的那个.app文件)</h4><p><img src=\"/2018/07/13/Xcode无证书打包/4.png\" alt=\"4\"></p>\n<h4 id=\"5-将生成的-app文件转成-ipa文件。\"><a href=\"#5-将生成的-app文件转成-ipa文件。\" class=\"headerlink\" title=\"5. 将生成的.app文件转成.ipa文件。\"></a>5. 将生成的.app文件转成.ipa文件。</h4><p>这里就有个坑了，老版本的iTunes直接可以在我的应用程序里将.app文件转换成.ipa文件里；但在新版本的iTunes里费了很大劲怎么也找不到此选项，只好找其他办法来完成此过程。下面推荐一种解压改后缀的方式：</p>\n<p>这种方式是在xcode编译产生出.app包的基础上进行进一步处理，通过简单的压缩以及该后缀名即可实现ipa发包。</p>\n<p>这种方式下又可通过脚本自动处理以及手动处理两种途径实现，推荐脚本方法，一劳永逸。</p>\n<h5 id=\"1-脚本自动生成ipa包\"><a href=\"#1-脚本自动生成ipa包\" class=\"headerlink\" title=\"(1) 脚本自动生成ipa包\"></a>(1) 脚本自动生成ipa包</h5><p>Step1: 新建文件夹，命名为“distribute”，新建distribute.sh脚本文件，内容为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注意，脚本中所有appName请先替换成你的真正app名称</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf appName</span><br><span class=\"line\">mkdir appName</span><br><span class=\"line\">mkdir appName/Payload</span><br><span class=\"line\">cp -r appName.app appName/Payload/appName.app</span><br><span class=\"line\">cp Icon.png appName/iTunesArtwork</span><br><span class=\"line\">cd appName</span><br><span class=\"line\">zip -r appName.ipa Payload iTunesArtwork</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/13/Xcode无证书打包/5.png\" alt=\"5\"></p>\n<p>Step2: 将要转化的.app文件放到distribute/文件夹下<br>这时的文件夹目录结构是这样的：(注意，脚本中所有appName请先替换成你的真正app名称)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distribute/distribute.sh</span><br><span class=\"line\">distribute/appName.app</span><br></pre></td></tr></table></figure>\n<p>Step3: 运行distribute.sh脚本<br>打开Terminal，cd到distribute文件夹下，输入<code>./distribute.sh</code>。如果提示<code>permission denied</code>，则用<code>chmod 777 distribute.sh</code>命令赋予权限后，再执行一次<code>./distribute.sh</code>。</p>\n<p>Step4: 大约若干秒后，会在distribute/文件夹下生成appName/文件夹，里面的appName.ipa就是我们想要的包。</p>\n<h5 id=\"2-手动压缩改后缀方式\"><a href=\"#2-手动压缩改后缀方式\" class=\"headerlink\" title=\"(2) 手动压缩改后缀方式\"></a>(2) 手动压缩改后缀方式</h5><p>这种方式与上面的方式本质是一样的。</p>\n<p>Step1: 新建“Payload”文件夹，注意名字要一字不差；</p>\n<p>Step2: 将你的.app包放到Payload中，注意app的名字不做任何更改，就用xcode生成的app名称；</p>\n<p>Step3: 在Payload文件夹上右键压缩成zip，然后将生成的.zip文件后缀改成.ipa即可</p>\n<p><a href=\"http://www.cocoachina.com/ios/20170623/19623.html\" target=\"_blank\" rel=\"noopener\">参考文章1</a></p>\n<p><a href=\"http://www.cnblogs.com/wengzilin/p/4601684.html\" target=\"_blank\" rel=\"noopener\">参考文章2</a></p>"},{"title":"Webpack从入门到上手","date":"2017-11-09T11:33:46.000Z","_content":"\n## Webpack从入门到上手\n\n#### 什么是WebPack，为什么要使用它？\n##### 为什么要使用WebPack\n现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法\n\n- 模块化，让我们可以把复杂的程序细化为小的文件;\n\n- 类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；\n\n- Scss，less等CSS预处理器\n- ...\n\n这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。\n\n##### 什么是Webpack\nWebPack可以看做是**模块打包机**：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n<!--more-->\n\n##### WebPack和Grunt以及Gulp相比有什么特性\n其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。\n\nGrunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。\n\n![Grunt和Gulp的工作流程](Webpack从入门到上手/Grunt和Gulp的工作流程.png)\n\nWebpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。\n\n![Webpack工作方式](Webpack从入门到上手/Webpack工作方式.png)\n\n如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。\n\n```\n// 一个常见的`webpack`配置文件\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n        entry: __dirname + \"/app/main.js\", //已多次提及的唯一入口文件\n        output: {\n            path: __dirname + \"/build\",\n            filename: \"bundle-[hash].js\"\n        },\n        devtool: 'none',\n        devServer: {\n            contentBase: \"./public\", //本地服务器所加载的页面所在的目录\n            historyApiFallback: true, //不跳转\n            inline: true,\n            hot: true\n        },\n        module: {\n            rules: [{\n                    test: /(\\.jsx|\\.js)$/,\n                    use: {\n                        loader: \"babel-loader\"\n                    },\n                    exclude: /node_modules/\n                }, {\n                    test: /\\.css$/,\n                    use: ExtractTextPlugin.extract({\n                        fallback: \"style-loader\",\n                        use: [{\n                            loader: \"css-loader\",\n                            options: {\n                                modules: true,\n                                localIdentName: '[name]__[local]--[hash:base64:5]'\n                            }\n                        }, {\n                            loader: \"postcss-loader\"\n                        }],\n                    })\n                }\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\" //new 一个这个插件的实例，并传入相关的参数\n        }),\n        new webpack.optimize.OccurrenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"style.css\")\n    ]\n};\n```\n\n#### 在开始前需要先理解四个核心概念：\n- 入口(entry): 指示 `webpack` 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，`webpack` 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n- 输出(output): `output` 属性告诉 `webpack` 在哪里输出它所创建的 bundles，以及如何命名这些文件。\n- loader: `loader` 让 `webpack` 能够去处理那些非 JavaScript 文件（`webpack` 自身只理解 JavaScript）。`loader` 可以将所有类型的文件转换为 `webpack` 能够处理的有效[模块](https://doc.webpack-china.org/concepts/modules)，然后你就可以利用 `webpack` 的打包能力，对它们进行处理。\n- 插件(plugins): `loader` 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。[插件接口](https://doc.webpack-china.org/api/plugins)功能极其强大，可以用来处理各种各样的任务。\n\n\n#### 开始使用Webpack\n初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。\n\n##### 安装\nWebpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。\n\n```\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n##### 正式使用Webpack前的准备\n1. 在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用`npm init`命令可以自动创建这个package.json文件\n\n```\nnpm init\n```\n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。\n\n2. package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包\n\n```\n// 安装Webpack\nnpm install --save-dev webpack\n```\n3. 回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个**index.html**文件）。接下来我们再创建三个文件:\n- `index.html` -- 放在public文件夹中;\n- `Greeter.js` -- 放在app文件夹中;\n- `main.js` -- 放在app文件夹中;\n此时项目结构如下图所示\n\n![项目结构](Webpack从入门到上手/项目结构.png)\n\n我们在**index.html**文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为**bundle.js**，之后我们还会详细讲述）。\n\n```\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n我们在**Greeter.js**中定义一个返回包含问候信息的**html**元素的函数,并依据**CommonJS**规范导出这个函数为一个模块：\n\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n**main.js**文件中我们写入下述代码，用以把**Greeter模块**返回的节点插入页面。\n\n```\n//main.js\nconst greeter = require('./Greeter.js');\ndocument.querySelector(\"#root\").appendChild(greeter());\n```\n#### 正式使用Webpack\nwebpack可以在终端中使用，在基本的使用方法如下：\n\n```\n# {extry file}出填写入口文件的路径，本文中就是上述main.js的路径，\n# {destination for bundled file}处填写打包文件的存放路径\n# 填写路径的时候不用添加{}\nwebpack {entry file} {destination for bundled file}\n```\n指定入口文件后，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack不是全局安装的，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中输入如下命令\n\n```\n# webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/bundle.js\n```\n结果如下:\n\n![使用命令行打包](Webpack从入门到上手/使用命令行打包.png)\n\n可以看出**webpack**同时编译了**main.js** 和**Greeter.js**,现在打开**index.html**,可以看到如下结果:\n\n![htmlResult1](Webpack从入门到上手/htmlResult1.png)\n\n有没有很激动，已经成功的使用**Webpack**打包了一个文件了。不过在终端中进行复杂的操作，其实是不太方便且容易出错的，接下来看看Webpack的另一种更常见的使用方法。\n\n##### 通过配置文件来使用Webpack\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的**loaders**和**plugins**），这些功能其实都可以通过命令行模式实现，但是正如前面提到的，这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。\n\n继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为**webpack.config.js**的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。\n\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n\n注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n```\n有了这个配置之后，再打包文件，只需在终端里运行`webpack(非全局安装需使用node_modules/.bin/webpack)`命令就可以了，这条命令会自动引用**webpack.config.js**文件中的配置选项，示例如下：\n\n![配合配置文件进行打包](Webpack从入门到上手/配合配置文件进行打包.png)\n\n又学会了一种使用**Webpack**的方法，这种方法不用管那烦人的命令行参数，有没有感觉很爽。如果我们可以连`webpack(非全局安装需使用node_modules/.bin/webpack)`这条命令都可以不用，那种感觉会不会更爽~，继续看下文。\n\n##### 更快捷的执行打包任务\n在命令行中输入命令需要代码类似于`node_modules/.bin/webpack`这样的路径其实是比较烦人的，不过值得庆幸的是**npm**可以引导任务执行，对**npm**进行配置后可以在命令行中使用简单的`npm start`命令来替代上面略微繁琐的命令。在**package.json**中对**scripts**对象进行相关设置即可，设置方法如下。\n\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\" // 修改的是这里，JSON文件不支持注释，引用时请清除\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"3.10.0\"\n  }\n}\n\n注：package.json中的script会安装一定顺序寻找命令对应位置，本地的node_modules/.bin路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n```\nnpm的`start`命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用`npm start`就可以执行其对于的命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`，我们在命令行中输入`npm start`试试，输出结果如下：\n\n![使用npm start 打包代码](Webpack从入门到上手/使用npm start 打包代码.png)\n\n现在只需要使用`npm start`就可以打包文件了，有没有觉得**webpack**也不过如此嘛，不过不要太小瞧**webpack**，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。\n\n#### Webpack的强大功能\n##### 生成Source Maps（使调试更容易）\n开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，`Source Maps`就是来帮我们解决这个问题的。\n\n通过简单的配置，**webpack**就可以在打包时为我们生成的`source maps`，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。\n\n在**webpack**的配置文件中配置`source maps`，需要配置`devtool`，它有以下四种不同的配置选项，各具优缺点，描述如下：\n\n\n devtool选项 | 配置结果\n---|---\nsource-map | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；\ncheap-module-source-map | 在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；\neval-source-map | 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；\ncheap-module-eval-source-map | 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；\n\n\n正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。\n\n对小到中型的项目中，`eval-source-map`是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的`webpack.config.js`，进行如下配置:\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  }\n}\n\ncheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。\n```\n##### 使用webpack构建本地服务器\n想不想让你的浏览器监听你的代码的修改，并自动刷新显示修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖\n\n```\nnpm install --save-dev webpack-dev-server\n```\ndevserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考[这里](https://link.jianshu.com/?t=https://webpack.js.org/configuration/dev-server/)\n\ndevserver的配置选项 | 功能描述\n---|---\ncontentBase | 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public\"目录）\nport | 设置默认监听端口，如果省略，默认为”8080“\ninline | 设置为true，当源文件改变时会自动刷新页面\nhistoryApiFallback | 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n\n\n\n把这些命令加到webpack的配置文件中，现在的配置文件`webpack.config.js`如下所示\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  devServer: {\n    contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  }\n}\n```\n在`package.json`中的`scripts`对象中添加如下命令，用以开启本地服务器：\n\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\"\n  },\n```\n在终端中输入`npm run server`即可在本地的`8080`端口查看结果\n\n![开启本地服务器](Webpack从入门到上手/开启本地服务器.png)\n\n#### Loaders\n##### 鼎鼎大名的Loaders登场了！\n\n**Loaders**是**webpack**提供的最激动人心的功能之一了。通过使用不同的**loader**，**webpack**有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在`webpack.config.js`中的modules关键字下进行配置，Loaders的配置包括以下几方面：\n\n- `test`：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`：为loaders提供额外的设置选项（可选）\n\n不过在配置**loader**之前，我们把**Greeter.js**里的问候消息放在一个单独的JSON文件里,并通过合适的配置使**Greeter.js**可以读取该JSON文件的值，各文件修改后的代码如下：\n\n在app文件夹中创建带有问候信息的JSON文件(命名为`config.json`)\n\n```\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n更新后的Greeter.js\n\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n\n注 由于webpack3.*/webpack2.*已经内置可处理JSON文件，这里我们无需再添加webpack1.*需要的json-loader。在看如何具体使用loader之前我们先看看Babel是什么？\n```\n#### Babel\nBabel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：\n\n- 让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；\n- 让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；\n\n##### Babel的安装与配置\nBabel其实是几个模块化的包，其核心功能位于称为`babel-core`的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的`babel-env-preset`包和解析JSX的`babel-preset-react`包）。\n\n我们先来一次性安装这些依赖包\n\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react\n```\n在`webpack`中配置Babel的方法如下:\n\n```\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/public\",//打包后的文件存放的地方\n        filename: \"bundle.js\"//打包后输出文件的文件名\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\",\n                    options: {\n                        presets: [\n                            \"env\", \"react\"\n                        ]\n                    }\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n};\n```\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n```\nnpm install --save react react-dom\n```\n接下来我们使用ES6的语法，更新**Greeter.js**并返回一个React组件\n\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n修改`main.js`如下，使用ES6的模块定义和渲染Greeter模块\n\n```\n// main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n重新使用`npm start`打包，如果之前打开的本地服务器没有关闭，你应该可以在`localhost:8080`下看到与之前一样的内容，这说明react和es6被正常打包了。\n\n![localhost:8080](Webpack从入门到上手/localhost-8080.png)\n\n##### Babel的配置\nBabel其实可以完全在 `webpack.config.js` 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的`webpack.config.js`文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用`.babelrc`里的babel配置选项），如下：\n\n```\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/public\",//打包后的文件存放的地方\n        filename: \"bundle.js\"//打包后输出文件的文件名\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n};\n```\n\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"env\"]\n}\n```\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n#### 一切皆模块\nWebpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。\n\n##### CSS\nwebpack提供两个工具处理样式表，`css-loader` 和 `style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import` 和 `url(...)`的方法实现 `require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n\n```\n//使用\nmodule.exports = {\n\n   ...\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\"\n                    }\n                ]\n            }\n        ]\n    }\n};\n\n请注意这里对同一个文件引入多个loader的方法，以及先引style-loader后引css-loader\n```\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n```\n/* main.css */\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n我们这里例子中用到的`webpack`只有单一的入口，其它的模块需要通过 `import`, `require`,  `url`等与入口文件建立其关联，为了让webpack能找到\"main.css\"文件，我们把它导入\"main.js\"中，如下:\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n\n上面的代码说明webpack是怎么把css当做模块看待的，咱们继续看一个更加真实的css模块实践。\n\n##### CSS module\n在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。\n\n不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常困难。\n\n被称为`CSS modules`的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。具体的代码如下\n\n```\nmodule.exports = {\n\n    ...\n\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true, // 指定启用css modules\n                            localIdentName: '[name]__[local]--[hash:base64:5]' // 指定css的类名格式\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n我们在app文件夹下创建一个`Greeter.css`文件来进行一下测试\n\n```\n/* Greeter.css */\n.root {\n  background-color: #eee;\n  padding: 10px;\n  border: 3px solid #ccc;\n}\n```\n导入`.root`到Greeter.js中\n\n```\nimport React, {Component} from 'react';\nimport config from './config.json';\nimport styles from './Greeter.css';//导入\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div className={styles.root}> //使用cssModule添加类名的方法\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n\n放心使用把，相同的类名也不会造成不同组件之间的污染。\n\n![应用了css module后的样式](Webpack从入门到上手/应用了css module后的样式.png)\n\nCSS modules 也是一个很大的主题，有兴趣的话可以去其[官方文档](https://link.jianshu.com/?t=https://github.com/css-modules/css-modules)了解更多。\n\n##### CSS预处理器\n`Sass` 和 `Less` 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于`variables`, `nesting`, `mixins`, `inheritance`等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，\n\n你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理`loaders`:\n- `Less Loader`\n- `Sass Loader`\n- `Stylus Loader`\n\n不过其实也存在一个CSS的处理平台-`PostCSS`，它可以帮助你的CSS实现更多的功能，在其[官方文档](https://link.jianshu.com/?t=https://github.com/postcss/postcss)可了解更多相关知识。\n\n举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。\n\n首先安装`postcss-loader` 和 `autoprefixer`（自动添加前缀的插件）\n\n```\nnpm install --save-dev postcss-loader autoprefixer\n```\n接下来，在webpack配置文件中添加`postcss-loader`，在根目录新建`postcss.config.js`,并添加如下代码之后，重新使用`npm start打包`时，你写的css会自动根据Can i use里的数据添加不同前缀了。\n\n```\n//webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n```\n// postcss.config.js\nmodule.exports = {\n    plugins: [\n        require('autoprefixer')\n    ]\n}\n```\n至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合`webpack`可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-`Plugins`\n\n#### 插件（Plugins）\n插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。\n\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\nWebpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。\n\n##### 使用插件的方法\n要使用某个插件，我们需要通过`npm`安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码[添加版权声明的插件](https://link.jianshu.com/?t=https://webpack.js.org/plugins/banner-plugin/)。\n\n```\nconst webpack = require('webpack');\n\nmodule.exports = {\n...\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究')\n    ],\n};\n```\n通过这个插件，打包后的JS文件显示如下\n\n![版权所有，翻版必究](Webpack从入门到上手/版权所有.png)\n\n这就是webpack插件的基础用法了，下面给大家推荐几个常用的插件\n\n##### HtmlWebpackPlugin\n这个插件的作用是依据一个简单的`index.html`模板，生成一个自动引用你打包后的JS文件的新`index.html`。这在每次生成的js文件名称不同时非常有用（比如添加了`hash`值）。\n\n##### 安装\n\n```\nnpm install --save-dev html-webpack-plugin\n```\n这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：\n\n1. 移除public文件夹，利用此插件，`index.html`文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。\n2. 在app目录下，创建一个`index.tmpl.html`文件模板，这个模板包含title等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，`index.tmpl.html`中的模板源代码如下：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n  </body>\n</html>\n```\n3.更新`webpack`的配置文件，方法同上,新建一个`build`文件夹用来存放最终的输出文件\n\n```\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n        })\n    ],\n};\n```\n\n再次执行`npm start`你会发现，build文件夹下面生成了`bundle.js`和`index.html`。\n\n![build文件夹](Webpack从入门到上手/build文件夹.png)\n\n##### Hot Module Replacement\n`Hot Module Replacement`（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。\n\n在webpack中实现HMR也很简单，只需要做两项配置\n\n1. 在webpack配置文件中添加HMR插件；\n2. 在Webpack Dev Server中添加“hot”参数；\n\n不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。\n\n整理下我们的思路，具体实现方法如下\n\n- Babel和webpack是独立的工具\n- 二者可以一起工作\n- 二者都可以通过插件拓展功能\n- HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；\n- Babel有一个叫做`react-transform-hrm`的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；\n\n还是继续上例来实际看看如何配置\n\n```\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n        }),\n        new webpack.HotModuleReplacementPlugin()//热加载插件\n    ],\n};\n```\n##### 安装`react-transform-hmr`\n\n```\nnpm install --save-dev babel-plugin-react-transform react-transform-hmr\n```\n##### 配置Babel\n\n```\n// .babelrc\n{\n  \"presets\": [\"react\", \"env\"],\n  \"env\": {\n    \"development\": {\n    \"plugins\": [[\"react-transform\", {\n       \"transforms\": [{\n         \"transform\": \"react-transform-hmr\",\n\n         \"imports\": [\"react\"],\n\n         \"locals\": [\"module\"]\n       }]\n     }]]\n    }\n  }\n}\n```\n现在当你使用React时，可以热加载模块了,每次保存就能在浏览器上看到更新内容。\n\n#### 产品阶段的构建\n目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。\n\n对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个webpack.production.config.js的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下\n\n```\n// webpack.production.config.js\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\", //已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'null', //注意修改了这里，这能大大压缩我们的打包代码\n    devServer: {\n        contentBase: \"./public\", //本地服务器所加载的页面所在的目录\n        historyApiFallback: true, //不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [{\n            test: /(\\.jsx|\\.js)$/,\n            use: {\n                loader: \"babel-loader\"\n            },\n            exclude: /node_modules/\n        }, {\n            test: /\\.css$/,\n            use: ExtractTextPlugin.extract({\n                fallback: \"style-loader\",\n                use: [{\n                    loader: \"css-loader\",\n                    options: {\n                        modules: true\n                    }\n                }, {\n                    loader: \"postcss-loader\"\n                }],\n            })\n        }]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\" //new 一个这个插件的实例，并传入相关的参数\n        }),\n        new webpack.HotModuleReplacementPlugin() //热加载插件\n    ],\n};\n```\n\n```\n//package.json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\",\n    \"build\": \"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n...\n  },\n  \"dependencies\": {\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\"\n  }\n}\n\n注意:如果是window电脑，build需要配置为\"build\": \"set NODE_ENV=production && webpack --config ./webpack.production.config.js --progress\".\n```\n\n##### 优化插件\nwebpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能\n\n- `OccurenceOrderPlugin` :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n- `UglifyJsPlugin`：压缩JS代码；\n- `ExtractTextPlugin`：分离CSS和JS文件\n\n我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件\n\n```\nnpm install --save-dev extract-text-webpack-plugin\n```\n在配置文件的plugins后引用它们\n\n```\n// webpack.production.config.js\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'none',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.optimize.OccurrenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"style.css\")\n    ],\n};\n```\n此时执行`npm run build`可以看见代码是被压缩后的\n\n![压缩后的代码](Webpack从入门到上手/压缩后的代码.png)\n\n##### 缓存\n缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\nwebpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前\n\n```\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n..\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle-[hash].js\"\n    },\n   ...\n};\n```\n现在用户会有合理的缓存了。\n\n![带hash值的js名](Webpack从入门到上手/带hash值的js名.png)\n\n##### 去除build文件中的残余文件\n添加了hash之后，会导致改变文件内容后重新打包时，文件名不同而内容越来越多，因此这里介绍另外一个很好用的插件`clean-webpack-plugin`。\n\n##### 安装：\n\n```\nnpm install clean-webpack-plugin --save-dev\n```\n##### 使用：\n\n引入`clean-webpack-plugin`插件后在配置文件的`plugins`中做相应配置即可：\n\n```\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n  plugins: [\n    ...// 这里是之前配置的其它各种插件\n    new CleanWebpackPlugin('build/*.*', {\n      root: __dirname,\n      verbose: true,\n      dry: false\n  })\n  ]\n```\n\n关于`clean-webpack-plugin`的详细使用可参考[这里](https://link.jianshu.com/?t=https://github.com/johnagan/clean-webpack-plugin)\n\n##### 参考文章\n[webpack中文网](https://doc.webpack-china.org/concepts/)\n\n[webpack入门教程](http://www.jqhtml.com/7626.html)\n\n\n[尊重原创，感谢原创分享](https://www.jianshu.com/p/42e11515c10f)","source":"_posts/Webpack从入门到上手.md","raw":"---\ntitle: Webpack从入门到上手\ndate: 2017-11-09 19:33:46\ncategories: Webpack\ntags: Webpack\n---\n\n## Webpack从入门到上手\n\n#### 什么是WebPack，为什么要使用它？\n##### 为什么要使用WebPack\n现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法\n\n- 模块化，让我们可以把复杂的程序细化为小的文件;\n\n- 类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；\n\n- Scss，less等CSS预处理器\n- ...\n\n这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。\n\n##### 什么是Webpack\nWebPack可以看做是**模块打包机**：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n<!--more-->\n\n##### WebPack和Grunt以及Gulp相比有什么特性\n其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。\n\nGrunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。\n\n![Grunt和Gulp的工作流程](Webpack从入门到上手/Grunt和Gulp的工作流程.png)\n\nWebpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。\n\n![Webpack工作方式](Webpack从入门到上手/Webpack工作方式.png)\n\n如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。\n\n```\n// 一个常见的`webpack`配置文件\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n        entry: __dirname + \"/app/main.js\", //已多次提及的唯一入口文件\n        output: {\n            path: __dirname + \"/build\",\n            filename: \"bundle-[hash].js\"\n        },\n        devtool: 'none',\n        devServer: {\n            contentBase: \"./public\", //本地服务器所加载的页面所在的目录\n            historyApiFallback: true, //不跳转\n            inline: true,\n            hot: true\n        },\n        module: {\n            rules: [{\n                    test: /(\\.jsx|\\.js)$/,\n                    use: {\n                        loader: \"babel-loader\"\n                    },\n                    exclude: /node_modules/\n                }, {\n                    test: /\\.css$/,\n                    use: ExtractTextPlugin.extract({\n                        fallback: \"style-loader\",\n                        use: [{\n                            loader: \"css-loader\",\n                            options: {\n                                modules: true,\n                                localIdentName: '[name]__[local]--[hash:base64:5]'\n                            }\n                        }, {\n                            loader: \"postcss-loader\"\n                        }],\n                    })\n                }\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\" //new 一个这个插件的实例，并传入相关的参数\n        }),\n        new webpack.optimize.OccurrenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"style.css\")\n    ]\n};\n```\n\n#### 在开始前需要先理解四个核心概念：\n- 入口(entry): 指示 `webpack` 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，`webpack` 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n- 输出(output): `output` 属性告诉 `webpack` 在哪里输出它所创建的 bundles，以及如何命名这些文件。\n- loader: `loader` 让 `webpack` 能够去处理那些非 JavaScript 文件（`webpack` 自身只理解 JavaScript）。`loader` 可以将所有类型的文件转换为 `webpack` 能够处理的有效[模块](https://doc.webpack-china.org/concepts/modules)，然后你就可以利用 `webpack` 的打包能力，对它们进行处理。\n- 插件(plugins): `loader` 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。[插件接口](https://doc.webpack-china.org/api/plugins)功能极其强大，可以用来处理各种各样的任务。\n\n\n#### 开始使用Webpack\n初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。\n\n##### 安装\nWebpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。\n\n```\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n##### 正式使用Webpack前的准备\n1. 在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用`npm init`命令可以自动创建这个package.json文件\n\n```\nnpm init\n```\n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。\n\n2. package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包\n\n```\n// 安装Webpack\nnpm install --save-dev webpack\n```\n3. 回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个**index.html**文件）。接下来我们再创建三个文件:\n- `index.html` -- 放在public文件夹中;\n- `Greeter.js` -- 放在app文件夹中;\n- `main.js` -- 放在app文件夹中;\n此时项目结构如下图所示\n\n![项目结构](Webpack从入门到上手/项目结构.png)\n\n我们在**index.html**文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为**bundle.js**，之后我们还会详细讲述）。\n\n```\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n我们在**Greeter.js**中定义一个返回包含问候信息的**html**元素的函数,并依据**CommonJS**规范导出这个函数为一个模块：\n\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n**main.js**文件中我们写入下述代码，用以把**Greeter模块**返回的节点插入页面。\n\n```\n//main.js\nconst greeter = require('./Greeter.js');\ndocument.querySelector(\"#root\").appendChild(greeter());\n```\n#### 正式使用Webpack\nwebpack可以在终端中使用，在基本的使用方法如下：\n\n```\n# {extry file}出填写入口文件的路径，本文中就是上述main.js的路径，\n# {destination for bundled file}处填写打包文件的存放路径\n# 填写路径的时候不用添加{}\nwebpack {entry file} {destination for bundled file}\n```\n指定入口文件后，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack不是全局安装的，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中输入如下命令\n\n```\n# webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/bundle.js\n```\n结果如下:\n\n![使用命令行打包](Webpack从入门到上手/使用命令行打包.png)\n\n可以看出**webpack**同时编译了**main.js** 和**Greeter.js**,现在打开**index.html**,可以看到如下结果:\n\n![htmlResult1](Webpack从入门到上手/htmlResult1.png)\n\n有没有很激动，已经成功的使用**Webpack**打包了一个文件了。不过在终端中进行复杂的操作，其实是不太方便且容易出错的，接下来看看Webpack的另一种更常见的使用方法。\n\n##### 通过配置文件来使用Webpack\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的**loaders**和**plugins**），这些功能其实都可以通过命令行模式实现，但是正如前面提到的，这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。\n\n继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为**webpack.config.js**的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。\n\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n\n注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n```\n有了这个配置之后，再打包文件，只需在终端里运行`webpack(非全局安装需使用node_modules/.bin/webpack)`命令就可以了，这条命令会自动引用**webpack.config.js**文件中的配置选项，示例如下：\n\n![配合配置文件进行打包](Webpack从入门到上手/配合配置文件进行打包.png)\n\n又学会了一种使用**Webpack**的方法，这种方法不用管那烦人的命令行参数，有没有感觉很爽。如果我们可以连`webpack(非全局安装需使用node_modules/.bin/webpack)`这条命令都可以不用，那种感觉会不会更爽~，继续看下文。\n\n##### 更快捷的执行打包任务\n在命令行中输入命令需要代码类似于`node_modules/.bin/webpack`这样的路径其实是比较烦人的，不过值得庆幸的是**npm**可以引导任务执行，对**npm**进行配置后可以在命令行中使用简单的`npm start`命令来替代上面略微繁琐的命令。在**package.json**中对**scripts**对象进行相关设置即可，设置方法如下。\n\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\" // 修改的是这里，JSON文件不支持注释，引用时请清除\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"3.10.0\"\n  }\n}\n\n注：package.json中的script会安装一定顺序寻找命令对应位置，本地的node_modules/.bin路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n```\nnpm的`start`命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用`npm start`就可以执行其对于的命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`，我们在命令行中输入`npm start`试试，输出结果如下：\n\n![使用npm start 打包代码](Webpack从入门到上手/使用npm start 打包代码.png)\n\n现在只需要使用`npm start`就可以打包文件了，有没有觉得**webpack**也不过如此嘛，不过不要太小瞧**webpack**，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。\n\n#### Webpack的强大功能\n##### 生成Source Maps（使调试更容易）\n开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，`Source Maps`就是来帮我们解决这个问题的。\n\n通过简单的配置，**webpack**就可以在打包时为我们生成的`source maps`，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。\n\n在**webpack**的配置文件中配置`source maps`，需要配置`devtool`，它有以下四种不同的配置选项，各具优缺点，描述如下：\n\n\n devtool选项 | 配置结果\n---|---\nsource-map | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；\ncheap-module-source-map | 在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；\neval-source-map | 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；\ncheap-module-eval-source-map | 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；\n\n\n正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。\n\n对小到中型的项目中，`eval-source-map`是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的`webpack.config.js`，进行如下配置:\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  }\n}\n\ncheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。\n```\n##### 使用webpack构建本地服务器\n想不想让你的浏览器监听你的代码的修改，并自动刷新显示修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖\n\n```\nnpm install --save-dev webpack-dev-server\n```\ndevserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考[这里](https://link.jianshu.com/?t=https://webpack.js.org/configuration/dev-server/)\n\ndevserver的配置选项 | 功能描述\n---|---\ncontentBase | 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public\"目录）\nport | 设置默认监听端口，如果省略，默认为”8080“\ninline | 设置为true，当源文件改变时会自动刷新页面\nhistoryApiFallback | 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n\n\n\n把这些命令加到webpack的配置文件中，现在的配置文件`webpack.config.js`如下所示\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  devServer: {\n    contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  }\n}\n```\n在`package.json`中的`scripts`对象中添加如下命令，用以开启本地服务器：\n\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\"\n  },\n```\n在终端中输入`npm run server`即可在本地的`8080`端口查看结果\n\n![开启本地服务器](Webpack从入门到上手/开启本地服务器.png)\n\n#### Loaders\n##### 鼎鼎大名的Loaders登场了！\n\n**Loaders**是**webpack**提供的最激动人心的功能之一了。通过使用不同的**loader**，**webpack**有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在`webpack.config.js`中的modules关键字下进行配置，Loaders的配置包括以下几方面：\n\n- `test`：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`：为loaders提供额外的设置选项（可选）\n\n不过在配置**loader**之前，我们把**Greeter.js**里的问候消息放在一个单独的JSON文件里,并通过合适的配置使**Greeter.js**可以读取该JSON文件的值，各文件修改后的代码如下：\n\n在app文件夹中创建带有问候信息的JSON文件(命名为`config.json`)\n\n```\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n更新后的Greeter.js\n\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n\n注 由于webpack3.*/webpack2.*已经内置可处理JSON文件，这里我们无需再添加webpack1.*需要的json-loader。在看如何具体使用loader之前我们先看看Babel是什么？\n```\n#### Babel\nBabel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：\n\n- 让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；\n- 让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；\n\n##### Babel的安装与配置\nBabel其实是几个模块化的包，其核心功能位于称为`babel-core`的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的`babel-env-preset`包和解析JSX的`babel-preset-react`包）。\n\n我们先来一次性安装这些依赖包\n\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react\n```\n在`webpack`中配置Babel的方法如下:\n\n```\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/public\",//打包后的文件存放的地方\n        filename: \"bundle.js\"//打包后输出文件的文件名\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\",\n                    options: {\n                        presets: [\n                            \"env\", \"react\"\n                        ]\n                    }\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n};\n```\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n```\nnpm install --save react react-dom\n```\n接下来我们使用ES6的语法，更新**Greeter.js**并返回一个React组件\n\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n修改`main.js`如下，使用ES6的模块定义和渲染Greeter模块\n\n```\n// main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n重新使用`npm start`打包，如果之前打开的本地服务器没有关闭，你应该可以在`localhost:8080`下看到与之前一样的内容，这说明react和es6被正常打包了。\n\n![localhost:8080](Webpack从入门到上手/localhost-8080.png)\n\n##### Babel的配置\nBabel其实可以完全在 `webpack.config.js` 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的`webpack.config.js`文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用`.babelrc`里的babel配置选项），如下：\n\n```\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/public\",//打包后的文件存放的地方\n        filename: \"bundle.js\"//打包后输出文件的文件名\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n};\n```\n\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"env\"]\n}\n```\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n#### 一切皆模块\nWebpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。\n\n##### CSS\nwebpack提供两个工具处理样式表，`css-loader` 和 `style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import` 和 `url(...)`的方法实现 `require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n\n```\n//使用\nmodule.exports = {\n\n   ...\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\"\n                    }\n                ]\n            }\n        ]\n    }\n};\n\n请注意这里对同一个文件引入多个loader的方法，以及先引style-loader后引css-loader\n```\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n```\n/* main.css */\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n我们这里例子中用到的`webpack`只有单一的入口，其它的模块需要通过 `import`, `require`,  `url`等与入口文件建立其关联，为了让webpack能找到\"main.css\"文件，我们把它导入\"main.js\"中，如下:\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n\n上面的代码说明webpack是怎么把css当做模块看待的，咱们继续看一个更加真实的css模块实践。\n\n##### CSS module\n在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。\n\n不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常困难。\n\n被称为`CSS modules`的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。具体的代码如下\n\n```\nmodule.exports = {\n\n    ...\n\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true, // 指定启用css modules\n                            localIdentName: '[name]__[local]--[hash:base64:5]' // 指定css的类名格式\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n我们在app文件夹下创建一个`Greeter.css`文件来进行一下测试\n\n```\n/* Greeter.css */\n.root {\n  background-color: #eee;\n  padding: 10px;\n  border: 3px solid #ccc;\n}\n```\n导入`.root`到Greeter.js中\n\n```\nimport React, {Component} from 'react';\nimport config from './config.json';\nimport styles from './Greeter.css';//导入\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div className={styles.root}> //使用cssModule添加类名的方法\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n\n放心使用把，相同的类名也不会造成不同组件之间的污染。\n\n![应用了css module后的样式](Webpack从入门到上手/应用了css module后的样式.png)\n\nCSS modules 也是一个很大的主题，有兴趣的话可以去其[官方文档](https://link.jianshu.com/?t=https://github.com/css-modules/css-modules)了解更多。\n\n##### CSS预处理器\n`Sass` 和 `Less` 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于`variables`, `nesting`, `mixins`, `inheritance`等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，\n\n你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理`loaders`:\n- `Less Loader`\n- `Sass Loader`\n- `Stylus Loader`\n\n不过其实也存在一个CSS的处理平台-`PostCSS`，它可以帮助你的CSS实现更多的功能，在其[官方文档](https://link.jianshu.com/?t=https://github.com/postcss/postcss)可了解更多相关知识。\n\n举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。\n\n首先安装`postcss-loader` 和 `autoprefixer`（自动添加前缀的插件）\n\n```\nnpm install --save-dev postcss-loader autoprefixer\n```\n接下来，在webpack配置文件中添加`postcss-loader`，在根目录新建`postcss.config.js`,并添加如下代码之后，重新使用`npm start打包`时，你写的css会自动根据Can i use里的数据添加不同前缀了。\n\n```\n//webpack.config.js\nmodule.exports = {\n    ...\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n```\n// postcss.config.js\nmodule.exports = {\n    plugins: [\n        require('autoprefixer')\n    ]\n}\n```\n至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合`webpack`可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-`Plugins`\n\n#### 插件（Plugins）\n插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。\n\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\nWebpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。\n\n##### 使用插件的方法\n要使用某个插件，我们需要通过`npm`安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码[添加版权声明的插件](https://link.jianshu.com/?t=https://webpack.js.org/plugins/banner-plugin/)。\n\n```\nconst webpack = require('webpack');\n\nmodule.exports = {\n...\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究')\n    ],\n};\n```\n通过这个插件，打包后的JS文件显示如下\n\n![版权所有，翻版必究](Webpack从入门到上手/版权所有.png)\n\n这就是webpack插件的基础用法了，下面给大家推荐几个常用的插件\n\n##### HtmlWebpackPlugin\n这个插件的作用是依据一个简单的`index.html`模板，生成一个自动引用你打包后的JS文件的新`index.html`。这在每次生成的js文件名称不同时非常有用（比如添加了`hash`值）。\n\n##### 安装\n\n```\nnpm install --save-dev html-webpack-plugin\n```\n这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：\n\n1. 移除public文件夹，利用此插件，`index.html`文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。\n2. 在app目录下，创建一个`index.tmpl.html`文件模板，这个模板包含title等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，`index.tmpl.html`中的模板源代码如下：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n  </body>\n</html>\n```\n3.更新`webpack`的配置文件，方法同上,新建一个`build`文件夹用来存放最终的输出文件\n\n```\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n        })\n    ],\n};\n```\n\n再次执行`npm start`你会发现，build文件夹下面生成了`bundle.js`和`index.html`。\n\n![build文件夹](Webpack从入门到上手/build文件夹.png)\n\n##### Hot Module Replacement\n`Hot Module Replacement`（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。\n\n在webpack中实现HMR也很简单，只需要做两项配置\n\n1. 在webpack配置文件中添加HMR插件；\n2. 在Webpack Dev Server中添加“hot”参数；\n\n不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。\n\n整理下我们的思路，具体实现方法如下\n\n- Babel和webpack是独立的工具\n- 二者可以一起工作\n- 二者都可以通过插件拓展功能\n- HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；\n- Babel有一个叫做`react-transform-hrm`的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；\n\n还是继续上例来实际看看如何配置\n\n```\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'eval-source-map',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n        }),\n        new webpack.HotModuleReplacementPlugin()//热加载插件\n    ],\n};\n```\n##### 安装`react-transform-hmr`\n\n```\nnpm install --save-dev babel-plugin-react-transform react-transform-hmr\n```\n##### 配置Babel\n\n```\n// .babelrc\n{\n  \"presets\": [\"react\", \"env\"],\n  \"env\": {\n    \"development\": {\n    \"plugins\": [[\"react-transform\", {\n       \"transforms\": [{\n         \"transform\": \"react-transform-hmr\",\n\n         \"imports\": [\"react\"],\n\n         \"locals\": [\"module\"]\n       }]\n     }]]\n    }\n  }\n}\n```\n现在当你使用React时，可以热加载模块了,每次保存就能在浏览器上看到更新内容。\n\n#### 产品阶段的构建\n目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。\n\n对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个webpack.production.config.js的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下\n\n```\n// webpack.production.config.js\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\", //已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'null', //注意修改了这里，这能大大压缩我们的打包代码\n    devServer: {\n        contentBase: \"./public\", //本地服务器所加载的页面所在的目录\n        historyApiFallback: true, //不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [{\n            test: /(\\.jsx|\\.js)$/,\n            use: {\n                loader: \"babel-loader\"\n            },\n            exclude: /node_modules/\n        }, {\n            test: /\\.css$/,\n            use: ExtractTextPlugin.extract({\n                fallback: \"style-loader\",\n                use: [{\n                    loader: \"css-loader\",\n                    options: {\n                        modules: true\n                    }\n                }, {\n                    loader: \"postcss-loader\"\n                }],\n            })\n        }]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\" //new 一个这个插件的实例，并传入相关的参数\n        }),\n        new webpack.HotModuleReplacementPlugin() //热加载插件\n    ],\n};\n```\n\n```\n//package.json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\",\n    \"build\": \"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n...\n  },\n  \"dependencies\": {\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\"\n  }\n}\n\n注意:如果是window电脑，build需要配置为\"build\": \"set NODE_ENV=production && webpack --config ./webpack.production.config.js --progress\".\n```\n\n##### 优化插件\nwebpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能\n\n- `OccurenceOrderPlugin` :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n- `UglifyJsPlugin`：压缩JS代码；\n- `ExtractTextPlugin`：分离CSS和JS文件\n\n我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件\n\n```\nnpm install --save-dev extract-text-webpack-plugin\n```\n在配置文件的plugins后引用它们\n\n```\n// webpack.production.config.js\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle.js\"\n    },\n    devtool: 'none',\n    devServer: {\n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: \"babel-loader\"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: \"postcss-loader\"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究'),\n        new HtmlWebpackPlugin({\n            template: __dirname + \"/app/index.tmpl.html\"\n        }),\n        new webpack.optimize.OccurrenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin(\"style.css\")\n    ],\n};\n```\n此时执行`npm run build`可以看见代码是被压缩后的\n\n![压缩后的代码](Webpack从入门到上手/压缩后的代码.png)\n\n##### 缓存\n缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\nwebpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前\n\n```\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n..\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle-[hash].js\"\n    },\n   ...\n};\n```\n现在用户会有合理的缓存了。\n\n![带hash值的js名](Webpack从入门到上手/带hash值的js名.png)\n\n##### 去除build文件中的残余文件\n添加了hash之后，会导致改变文件内容后重新打包时，文件名不同而内容越来越多，因此这里介绍另外一个很好用的插件`clean-webpack-plugin`。\n\n##### 安装：\n\n```\nnpm install clean-webpack-plugin --save-dev\n```\n##### 使用：\n\n引入`clean-webpack-plugin`插件后在配置文件的`plugins`中做相应配置即可：\n\n```\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n  plugins: [\n    ...// 这里是之前配置的其它各种插件\n    new CleanWebpackPlugin('build/*.*', {\n      root: __dirname,\n      verbose: true,\n      dry: false\n  })\n  ]\n```\n\n关于`clean-webpack-plugin`的详细使用可参考[这里](https://link.jianshu.com/?t=https://github.com/johnagan/clean-webpack-plugin)\n\n##### 参考文章\n[webpack中文网](https://doc.webpack-china.org/concepts/)\n\n[webpack入门教程](http://www.jqhtml.com/7626.html)\n\n\n[尊重原创，感谢原创分享](https://www.jianshu.com/p/42e11515c10f)","slug":"Webpack从入门到上手","published":1,"updated":"2018-02-09T06:08:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhkk000zlxnd4fvkeyie","content":"<h2 id=\"Webpack从入门到上手\"><a href=\"#Webpack从入门到上手\" class=\"headerlink\" title=\"Webpack从入门到上手\"></a>Webpack从入门到上手</h2><h4 id=\"什么是WebPack，为什么要使用它？\"><a href=\"#什么是WebPack，为什么要使用它？\" class=\"headerlink\" title=\"什么是WebPack，为什么要使用它？\"></a>什么是WebPack，为什么要使用它？</h4><h5 id=\"为什么要使用WebPack\"><a href=\"#为什么要使用WebPack\" class=\"headerlink\" title=\"为什么要使用WebPack\"></a>为什么要使用WebPack</h5><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p>\n<ul>\n<li><p>模块化，让我们可以把复杂的程序细化为小的文件;</p>\n</li>\n<li><p>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</p>\n</li>\n<li><p>Scss，less等CSS预处理器</p>\n</li>\n<li>…</li>\n</ul>\n<p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。</p>\n<h5 id=\"什么是Webpack\"><a href=\"#什么是Webpack\" class=\"headerlink\" title=\"什么是Webpack\"></a>什么是Webpack</h5><p>WebPack可以看做是<strong>模块打包机</strong>：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p>\n<a id=\"more\"></a>\n<h5 id=\"WebPack和Grunt以及Gulp相比有什么特性\"><a href=\"#WebPack和Grunt以及Gulp相比有什么特性\" class=\"headerlink\" title=\"WebPack和Grunt以及Gulp相比有什么特性\"></a>WebPack和Grunt以及Gulp相比有什么特性</h5><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p>\n<p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/Grunt和Gulp的工作流程.png\" alt=\"Grunt和Gulp的工作流程\"></p>\n<p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/Webpack工作方式.png\" alt=\"Webpack工作方式\"></p>\n<p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一个常见的`webpack`配置文件</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">        entry: __dirname + &quot;/app/main.js&quot;, //已多次提及的唯一入口文件</span><br><span class=\"line\">        output: &#123;</span><br><span class=\"line\">            path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">            filename: &quot;bundle-[hash].js&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        devtool: &apos;none&apos;,</span><br><span class=\"line\">        devServer: &#123;</span><br><span class=\"line\">            contentBase: &quot;./public&quot;, //本地服务器所加载的页面所在的目录</span><br><span class=\"line\">            historyApiFallback: true, //不跳转</span><br><span class=\"line\">            inline: true,</span><br><span class=\"line\">            hot: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        module: &#123;</span><br><span class=\"line\">            rules: [&#123;</span><br><span class=\"line\">                    test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                    use: &#123;</span><br><span class=\"line\">                        loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    exclude: /node_modules/</span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    test: /\\.css$/,</span><br><span class=\"line\">                    use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                        fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                        use: [&#123;</span><br><span class=\"line\">                            loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                            options: &#123;</span><br><span class=\"line\">                                modules: true,</span><br><span class=\"line\">                                localIdentName: &apos;[name]__[local]--[hash:base64:5]&apos;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                        &#125;],</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot; //new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class=\"line\">        new webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">        new ExtractTextPlugin(&quot;style.css&quot;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在开始前需要先理解四个核心概念：\"><a href=\"#在开始前需要先理解四个核心概念：\" class=\"headerlink\" title=\"在开始前需要先理解四个核心概念：\"></a>在开始前需要先理解四个核心概念：</h4><ul>\n<li>入口(entry): 指示 <code>webpack</code> 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，<code>webpack</code> 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</li>\n<li>输出(output): <code>output</code> 属性告诉 <code>webpack</code> 在哪里输出它所创建的 bundles，以及如何命名这些文件。</li>\n<li>loader: <code>loader</code> 让 <code>webpack</code> 能够去处理那些非 JavaScript 文件（<code>webpack</code> 自身只理解 JavaScript）。<code>loader</code> 可以将所有类型的文件转换为 <code>webpack</code> 能够处理的有效<a href=\"https://doc.webpack-china.org/concepts/modules\" target=\"_blank\" rel=\"noopener\">模块</a>，然后你就可以利用 <code>webpack</code> 的打包能力，对它们进行处理。</li>\n<li>插件(plugins): <code>loader</code> 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。<a href=\"https://doc.webpack-china.org/api/plugins\" target=\"_blank\" rel=\"noopener\">插件接口</a>功能极其强大，可以用来处理各种各样的任务。</li>\n</ul>\n<h4 id=\"开始使用Webpack\"><a href=\"#开始使用Webpack\" class=\"headerlink\" title=\"开始使用Webpack\"></a>开始使用Webpack</h4><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install -g webpack</span><br><span class=\"line\">//安装到你的项目目录</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<h5 id=\"正式使用Webpack前的准备\"><a href=\"#正式使用Webpack前的准备\" class=\"headerlink\" title=\"正式使用Webpack前的准备\"></a>正式使用Webpack前的准备</h5><ol>\n<li>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个package.json文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>\n<ol>\n<li>package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装Webpack</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<ol>\n<li>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个<strong>index.html</strong>文件）。接下来我们再创建三个文件:</li>\n</ol>\n<ul>\n<li><code>index.html</code> – 放在public文件夹中;</li>\n<li><code>Greeter.js</code> – 放在app文件夹中;</li>\n<li><code>main.js</code> – 放在app文件夹中;<br>此时项目结构如下图所示</li>\n</ul>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/项目结构.png\" alt=\"项目结构\"></p>\n<p>我们在<strong>index.html</strong>文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为<strong>bundle.js</strong>，之后我们还会详细讲述）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- index.html --&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Webpack Sample Project&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&apos;root&apos;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>我们在<strong>Greeter.js</strong>中定义一个返回包含问候信息的<strong>html</strong>元素的函数,并依据<strong>CommonJS</strong>规范导出这个函数为一个模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Greeter.js</span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = &quot;Hi there and greetings!&quot;;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>main.js</strong>文件中我们写入下述代码，用以把<strong>Greeter模块</strong>返回的节点插入页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">const greeter = require(&apos;./Greeter.js&apos;);</span><br><span class=\"line\">document.querySelector(&quot;#root&quot;).appendChild(greeter());</span><br></pre></td></tr></table></figure>\n<h4 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h4><p>webpack可以在终端中使用，在基本的使用方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &#123;extry file&#125;出填写入口文件的路径，本文中就是上述main.js的路径，</span><br><span class=\"line\"># &#123;destination for bundled file&#125;处填写打包文件的存放路径</span><br><span class=\"line\"># 填写路径的时候不用添加&#123;&#125;</span><br><span class=\"line\">webpack &#123;entry file&#125; &#123;destination for bundled file&#125;</span><br></pre></td></tr></table></figure>\n<p>指定入口文件后，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack不是全局安装的，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中输入如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># webpack非全局安装的情况</span><br><span class=\"line\">node_modules/.bin/webpack app/main.js public/bundle.js</span><br></pre></td></tr></table></figure>\n<p>结果如下:</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/使用命令行打包.png\" alt=\"使用命令行打包\"></p>\n<p>可以看出<strong>webpack</strong>同时编译了<strong>main.js</strong> 和<strong>Greeter.js</strong>,现在打开<strong>index.html</strong>,可以看到如下结果:</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/htmlResult1.png\" alt=\"htmlResult1\"></p>\n<p>有没有很激动，已经成功的使用<strong>Webpack</strong>打包了一个文件了。不过在终端中进行复杂的操作，其实是不太方便且容易出错的，接下来看看Webpack的另一种更常见的使用方法。</p>\n<h5 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h5><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的<strong>loaders</strong>和<strong>plugins</strong>），这些功能其实都可以通过命令行模式实现，但是正如前面提到的，这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。</p>\n<p>继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为<strong>webpack.config.js</strong>的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</span><br></pre></td></tr></table></figure>\n<p>有了这个配置之后，再打包文件，只需在终端里运行<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>命令就可以了，这条命令会自动引用<strong>webpack.config.js</strong>文件中的配置选项，示例如下：</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/配合配置文件进行打包.png\" alt=\"配合配置文件进行打包\"></p>\n<p>又学会了一种使用<strong>Webpack</strong>的方法，这种方法不用管那烦人的命令行参数，有没有感觉很爽。如果我们可以连<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>\n<h5 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h5><p>在命令行中输入命令需要代码类似于<code>node_modules/.bin/webpack</code>这样的路径其实是比较烦人的，不过值得庆幸的是<strong>npm</strong>可以引导任务执行，对<strong>npm</strong>进行配置后可以在命令行中使用简单的<code>npm start</code>命令来替代上面略微繁琐的命令。在<strong>package.json</strong>中对<strong>scripts</strong>对象进行相关设置即可，设置方法如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-sample-project&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;Sample webpack project&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot; // 修改的是这里，JSON文件不支持注释，引用时请清除</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;zhang&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;3.10.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注：package.json中的script会安装一定顺序寻找命令对应位置，本地的node_modules/.bin路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</span><br></pre></td></tr></table></figure>\n<p>npm的<code>start</code>命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用<code>npm start</code>就可以执行其对于的命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，我们在命令行中输入<code>npm start</code>试试，输出结果如下：</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/使用npm start 打包代码.png\" alt=\"使用npm start 打包代码\"></p>\n<p>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得<strong>webpack</strong>也不过如此嘛，不过不要太小瞧<strong>webpack</strong>，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。</p>\n<h4 id=\"Webpack的强大功能\"><a href=\"#Webpack的强大功能\" class=\"headerlink\" title=\"Webpack的强大功能\"></a>Webpack的强大功能</h4><h5 id=\"生成Source-Maps（使调试更容易）\"><a href=\"#生成Source-Maps（使调试更容易）\" class=\"headerlink\" title=\"生成Source Maps（使调试更容易）\"></a>生成Source Maps（使调试更容易）</h5><p>开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，<code>Source Maps</code>就是来帮我们解决这个问题的。</p>\n<p>通过简单的配置，<strong>webpack</strong>就可以在打包时为我们生成的<code>source maps</code>，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>\n<p>在<strong>webpack</strong>的配置文件中配置<code>source maps</code>，需要配置<code>devtool</code>，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>devtool选项</th>\n<th>配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source-map</td>\n<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；</td>\n</tr>\n</tbody>\n</table>\n<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。</p>\n<p>对小到中型的项目中，<code>eval-source-map</code>是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的<code>webpack.config.js</code>，进行如下配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用webpack构建本地服务器\"><a href=\"#使用webpack构建本地服务器\" class=\"headerlink\" title=\"使用webpack构建本地服务器\"></a>使用webpack构建本地服务器</h5><p>想不想让你的浏览器监听你的代码的修改，并自动刷新显示修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>devserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考<a href=\"https://link.jianshu.com/?t=https://webpack.js.org/configuration/dev-server/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<table>\n<thead>\n<tr>\n<th>devserver的配置选项</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>contentBase</td>\n<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td>\n</tr>\n<tr>\n<td>port</td>\n<td>设置默认监听端口，如果省略，默认为”8080“</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>设置为true，当源文件改变时会自动刷新页面</td>\n</tr>\n<tr>\n<td>historyApiFallback</td>\n<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>\n</tr>\n</tbody>\n</table>\n<p>把这些命令加到webpack的配置文件中，现在的配置文件<code>webpack.config.js</code>如下所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">    historyApiFallback: true,//不跳转</span><br><span class=\"line\">    inline: true//实时刷新</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>package.json</code>中的<code>scripts</code>对象中添加如下命令，用以开启本地服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>在终端中输入<code>npm run server</code>即可在本地的<code>8080</code>端口查看结果</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/开启本地服务器.png\" alt=\"开启本地服务器\"></p>\n<h4 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h4><h5 id=\"鼎鼎大名的Loaders登场了！\"><a href=\"#鼎鼎大名的Loaders登场了！\" class=\"headerlink\" title=\"鼎鼎大名的Loaders登场了！\"></a>鼎鼎大名的Loaders登场了！</h5><p><strong>Loaders</strong>是<strong>webpack</strong>提供的最激动人心的功能之一了。通过使用不同的<strong>loader</strong>，<strong>webpack</strong>有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>中的modules关键字下进行配置，Loaders的配置包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>不过在配置<strong>loader</strong>之前，我们把<strong>Greeter.js</strong>里的问候消息放在一个单独的JSON文件里,并通过合适的配置使<strong>Greeter.js</strong>可以读取该JSON文件的值，各文件修改后的代码如下：</p>\n<p>在app文件夹中创建带有问候信息的JSON文件(命名为<code>config.json</code>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新后的Greeter.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var config = require(&apos;./config.json&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = config.greetText;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">注 由于webpack3.*/webpack2.*已经内置可处理JSON文件，这里我们无需再添加webpack1.*需要的json-loader。在看如何具体使用loader之前我们先看看Babel是什么？</span><br></pre></td></tr></table></figure>\n<h4 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h4><p>Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：</p>\n<ul>\n<li>让你能使用最新的JavaScript代码（ES6，ES7…），而不用管新标准是否被当前使用的浏览器完全支持；</li>\n<li>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</li>\n</ul>\n<h5 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h5><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的<code>babel-env-preset</code>包和解析JSX的<code>babel-preset-react</code>包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</span><br></pre></td></tr></table></figure>\n<p>在<code>webpack</code>中配置Babel的方法如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        presets: [</span><br><span class=\"line\">                            &quot;env&quot;, &quot;react&quot;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n<p>接下来我们使用ES6的语法，更新<strong>Greeter.js</strong>并返回一个React组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Greeter,js</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">import config from &apos;./config.json&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeter extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;config.greetText&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Greeter</span><br></pre></td></tr></table></figure>\n<p>修改<code>main.js</code>如下，使用ES6的模块定义和渲染Greeter模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<p>重新使用<code>npm start</code>打包，如果之前打开的本地服务器没有关闭，你应该可以在<code>localhost:8080</code>下看到与之前一样的内容，这说明react和es6被正常打包了。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/localhost-8080.png\" alt=\"localhost:8080\"></p>\n<h5 id=\"Babel的配置\"><a href=\"#Babel的配置\" class=\"headerlink\" title=\"Babel的配置\"></a>Babel的配置</h5><p>Babel其实可以完全在 <code>webpack.config.js</code> 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的<code>webpack.config.js</code>文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;env&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h4 id=\"一切皆模块\"><a href=\"#一切皆模块\" class=\"headerlink\" title=\"一切皆模块\"></a>一切皆模块</h4><p>Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。</p>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   ...</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">请注意这里对同一个文件引入多个loader的方法，以及先引style-loader后引css-loader</span><br></pre></td></tr></table></figure>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* main.css */</span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">  -ms-text-size-adjust: 100%;</span><br><span class=\"line\">  -webkit-text-size-adjust: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">*, *:before, *:after &#123;</span><br><span class=\"line\">  box-sizing: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1, h2, h3, h4, h5, h6, p, ul &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们这里例子中用到的<code>webpack</code>只有单一的入口，其它的模块需要通过 <code>import</code>, <code>require</code>,  <code>url</code>等与入口文件建立其关联，为了让webpack能找到”main.css”文件，我们把它导入”main.js”中，如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./main.css&apos;;//使用require导入css文件</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>\n<p>上面的代码说明webpack是怎么把css当做模块看待的，咱们继续看一个更加真实的css模块实践。</p>\n<h5 id=\"CSS-module\"><a href=\"#CSS-module\" class=\"headerlink\" title=\"CSS module\"></a>CSS module</h5><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。</p>\n<p>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常困难。</p>\n<p>被称为<code>CSS modules</code>的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。具体的代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true, // 指定启用css modules</span><br><span class=\"line\">                            localIdentName: &apos;[name]__[local]--[hash:base64:5]&apos; // 指定css的类名格式</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们在app文件夹下创建一个<code>Greeter.css</code>文件来进行一下测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Greeter.css */</span><br><span class=\"line\">.root &#123;</span><br><span class=\"line\">  background-color: #eee;</span><br><span class=\"line\">  padding: 10px;</span><br><span class=\"line\">  border: 3px solid #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>导入<code>.root</code>到Greeter.js中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">import config from &apos;./config.json&apos;;</span><br><span class=\"line\">import styles from &apos;./Greeter.css&apos;;//导入</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeter extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&#123;styles.root&#125;&gt; //使用cssModule添加类名的方法</span><br><span class=\"line\">        &#123;config.greetText&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Greeter</span><br></pre></td></tr></table></figure>\n<p>放心使用把，相同的类名也不会造成不同组件之间的污染。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/应用了css module后的样式.png\" alt=\"应用了css module后的样式\"></p>\n<p>CSS modules 也是一个很大的主题，有兴趣的话可以去其<a href=\"https://link.jianshu.com/?t=https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener\">官方文档</a>了解更多。</p>\n<h5 id=\"CSS预处理器\"><a href=\"#CSS预处理器\" class=\"headerlink\" title=\"CSS预处理器\"></a>CSS预处理器</h5><p><code>Sass</code> 和 <code>Less</code> 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于<code>variables</code>, <code>nesting</code>, <code>mixins</code>, <code>inheritance</code>等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，</p>\n<p>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理<code>loaders</code>:</p>\n<ul>\n<li><code>Less Loader</code></li>\n<li><code>Sass Loader</code></li>\n<li><code>Stylus Loader</code></li>\n</ul>\n<p>不过其实也存在一个CSS的处理平台-<code>PostCSS</code>，它可以帮助你的CSS实现更多的功能，在其<a href=\"https://link.jianshu.com/?t=https://github.com/postcss/postcss\" target=\"_blank\" rel=\"noopener\">官方文档</a>可了解更多相关知识。</p>\n<p>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>\n<p>首先安装<code>postcss-loader</code> 和 <code>autoprefixer</code>（自动添加前缀的插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n<p>接下来，在webpack配置文件中添加<code>postcss-loader</code>，在根目录新建<code>postcss.config.js</code>,并添加如下代码之后，重新使用<code>npm start打包</code>时，你写的css会自动根据Can i use里的数据添加不同前缀了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// postcss.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        require(&apos;autoprefixer&apos;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合<code>webpack</code>可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-<code>Plugins</code></p>\n<h4 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h4><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。</p>\n<p>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>\n<h5 id=\"使用插件的方法\"><a href=\"#使用插件的方法\" class=\"headerlink\" title=\"使用插件的方法\"></a>使用插件的方法</h5><p>要使用某个插件，我们需要通过<code>npm</code>安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码<a href=\"https://link.jianshu.com/?t=https://webpack.js.org/plugins/banner-plugin/\" target=\"_blank\" rel=\"noopener\">添加版权声明的插件</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过这个插件，打包后的JS文件显示如下</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/版权所有.png\" alt=\"版权所有，翻版必究\"></p>\n<p>这就是webpack插件的基础用法了，下面给大家推荐几个常用的插件</p>\n<h5 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h5><p>这个插件的作用是依据一个简单的<code>index.html</code>模板，生成一个自动引用你打包后的JS文件的新<code>index.html</code>。这在每次生成的js文件名称不同时非常有用（比如添加了<code>hash</code>值）。</p>\n<h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：</p>\n<ol>\n<li>移除public文件夹，利用此插件，<code>index.html</code>文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。</li>\n<li>在app目录下，创建一个<code>index.tmpl.html</code>文件模板，这个模板包含title等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，<code>index.tmpl.html</code>中的模板源代码如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Webpack Sample Project&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&apos;root&apos;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>3.更新<code>webpack</code>的配置文件，方法同上,新建一个<code>build</code>文件夹用来存放最终的输出文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>再次执行<code>npm start</code>你会发现，build文件夹下面生成了<code>bundle.js</code>和<code>index.html</code>。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/build文件夹.png\" alt=\"build文件夹\"></p>\n<h5 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h5><p><code>Hot Module Replacement</code>（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。</p>\n<p>在webpack中实现HMR也很简单，只需要做两项配置</p>\n<ol>\n<li>在webpack配置文件中添加HMR插件；</li>\n<li>在Webpack Dev Server中添加“hot”参数；</li>\n</ol>\n<p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p>\n<p>整理下我们的思路，具体实现方法如下</p>\n<ul>\n<li>Babel和webpack是独立的工具</li>\n<li>二者可以一起工作</li>\n<li>二者都可以通过插件拓展功能</li>\n<li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li>\n<li>Babel有一个叫做<code>react-transform-hrm</code>的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</li>\n</ul>\n<p>还是继续上例来实际看看如何配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        hot: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin()//热加载插件</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装react-transform-hmr\"><a href=\"#安装react-transform-hmr\" class=\"headerlink\" title=\"安装react-transform-hmr\"></a>安装<code>react-transform-hmr</code></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-plugin-react-transform react-transform-hmr</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置Babel\"><a href=\"#配置Babel\" class=\"headerlink\" title=\"配置Babel\"></a>配置Babel</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;env&quot;],</span><br><span class=\"line\">  &quot;env&quot;: &#123;</span><br><span class=\"line\">    &quot;development&quot;: &#123;</span><br><span class=\"line\">    &quot;plugins&quot;: [[&quot;react-transform&quot;, &#123;</span><br><span class=\"line\">       &quot;transforms&quot;: [&#123;</span><br><span class=\"line\">         &quot;transform&quot;: &quot;react-transform-hmr&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">         &quot;imports&quot;: [&quot;react&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">         &quot;locals&quot;: [&quot;module&quot;]</span><br><span class=\"line\">       &#125;]</span><br><span class=\"line\">     &#125;]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在当你使用React时，可以热加载模块了,每次保存就能在浏览器上看到更新内容。</p>\n<h4 id=\"产品阶段的构建\"><a href=\"#产品阶段的构建\" class=\"headerlink\" title=\"产品阶段的构建\"></a>产品阶段的构建</h4><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>\n<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个webpack.production.config.js的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.production.config.js</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;, //已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;null&apos;, //注意修改了这里，这能大大压缩我们的打包代码</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;, //本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true, //不跳转</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        hot: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">            use: &#123;</span><br><span class=\"line\">                loader: &quot;babel-loader&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            exclude: /node_modules/</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.css$/,</span><br><span class=\"line\">            use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                use: [&#123;</span><br><span class=\"line\">                    loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        modules: true</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                &#125;],</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot; //new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin() //热加载插件</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;NODE_ENV=production webpack --config ./webpack.production.config.js --progress&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;react&quot;: &quot;^15.6.1&quot;,</span><br><span class=\"line\">    &quot;react-dom&quot;: &quot;^15.6.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意:如果是window电脑，build需要配置为&quot;build&quot;: &quot;set NODE_ENV=production &amp;&amp; webpack --config ./webpack.production.config.js --progress&quot;.</span><br></pre></td></tr></table></figure>\n<h5 id=\"优化插件\"><a href=\"#优化插件\" class=\"headerlink\" title=\"优化插件\"></a>优化插件</h5><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>\n<ul>\n<li><code>OccurenceOrderPlugin</code> :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>\n<li><code>UglifyJsPlugin</code>：压缩JS代码；</li>\n<li><code>ExtractTextPlugin</code>：分离CSS和JS文件</li>\n</ul>\n<p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>在配置文件的plugins后引用它们</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.production.config.js</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;none&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        hot: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class=\"line\">        new webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">        new ExtractTextPlugin(&quot;style.css&quot;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>此时执行<code>npm run build</code>可以看见代码是被压缩后的</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/压缩后的代码.png\" alt=\"压缩后的代码\"></p>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle-[hash].js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在用户会有合理的缓存了。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/带hash值的js名.png\" alt=\"带hash值的js名\"></p>\n<h5 id=\"去除build文件中的残余文件\"><a href=\"#去除build文件中的残余文件\" class=\"headerlink\" title=\"去除build文件中的残余文件\"></a>去除build文件中的残余文件</h5><p>添加了hash之后，会导致改变文件内容后重新打包时，文件名不同而内容越来越多，因此这里介绍另外一个很好用的插件<code>clean-webpack-plugin</code>。</p>\n<h5 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h5><p>引入<code>clean-webpack-plugin</code>插件后在配置文件的<code>plugins</code>中做相应配置即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CleanWebpackPlugin = require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...// 这里是之前配置的其它各种插件</span><br><span class=\"line\">    new CleanWebpackPlugin(&apos;build/*.*&apos;, &#123;</span><br><span class=\"line\">      root: __dirname,</span><br><span class=\"line\">      verbose: true,</span><br><span class=\"line\">      dry: false</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<p>关于<code>clean-webpack-plugin</code>的详细使用可参考<a href=\"https://link.jianshu.com/?t=https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><p><a href=\"https://doc.webpack-china.org/concepts/\" target=\"_blank\" rel=\"noopener\">webpack中文网</a></p>\n<p><a href=\"http://www.jqhtml.com/7626.html\" target=\"_blank\" rel=\"noopener\">webpack入门教程</a></p>\n<p><a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Webpack从入门到上手\"><a href=\"#Webpack从入门到上手\" class=\"headerlink\" title=\"Webpack从入门到上手\"></a>Webpack从入门到上手</h2><h4 id=\"什么是WebPack，为什么要使用它？\"><a href=\"#什么是WebPack，为什么要使用它？\" class=\"headerlink\" title=\"什么是WebPack，为什么要使用它？\"></a>什么是WebPack，为什么要使用它？</h4><h5 id=\"为什么要使用WebPack\"><a href=\"#为什么要使用WebPack\" class=\"headerlink\" title=\"为什么要使用WebPack\"></a>为什么要使用WebPack</h5><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p>\n<ul>\n<li><p>模块化，让我们可以把复杂的程序细化为小的文件;</p>\n</li>\n<li><p>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</p>\n</li>\n<li><p>Scss，less等CSS预处理器</p>\n</li>\n<li>…</li>\n</ul>\n<p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。</p>\n<h5 id=\"什么是Webpack\"><a href=\"#什么是Webpack\" class=\"headerlink\" title=\"什么是Webpack\"></a>什么是Webpack</h5><p>WebPack可以看做是<strong>模块打包机</strong>：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p>","more":"<h5 id=\"WebPack和Grunt以及Gulp相比有什么特性\"><a href=\"#WebPack和Grunt以及Gulp相比有什么特性\" class=\"headerlink\" title=\"WebPack和Grunt以及Gulp相比有什么特性\"></a>WebPack和Grunt以及Gulp相比有什么特性</h5><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p>\n<p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/Grunt和Gulp的工作流程.png\" alt=\"Grunt和Gulp的工作流程\"></p>\n<p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/Webpack工作方式.png\" alt=\"Webpack工作方式\"></p>\n<p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一个常见的`webpack`配置文件</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">        entry: __dirname + &quot;/app/main.js&quot;, //已多次提及的唯一入口文件</span><br><span class=\"line\">        output: &#123;</span><br><span class=\"line\">            path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">            filename: &quot;bundle-[hash].js&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        devtool: &apos;none&apos;,</span><br><span class=\"line\">        devServer: &#123;</span><br><span class=\"line\">            contentBase: &quot;./public&quot;, //本地服务器所加载的页面所在的目录</span><br><span class=\"line\">            historyApiFallback: true, //不跳转</span><br><span class=\"line\">            inline: true,</span><br><span class=\"line\">            hot: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        module: &#123;</span><br><span class=\"line\">            rules: [&#123;</span><br><span class=\"line\">                    test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                    use: &#123;</span><br><span class=\"line\">                        loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    exclude: /node_modules/</span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    test: /\\.css$/,</span><br><span class=\"line\">                    use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                        fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                        use: [&#123;</span><br><span class=\"line\">                            loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                            options: &#123;</span><br><span class=\"line\">                                modules: true,</span><br><span class=\"line\">                                localIdentName: &apos;[name]__[local]--[hash:base64:5]&apos;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                        &#125;],</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot; //new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class=\"line\">        new webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">        new ExtractTextPlugin(&quot;style.css&quot;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在开始前需要先理解四个核心概念：\"><a href=\"#在开始前需要先理解四个核心概念：\" class=\"headerlink\" title=\"在开始前需要先理解四个核心概念：\"></a>在开始前需要先理解四个核心概念：</h4><ul>\n<li>入口(entry): 指示 <code>webpack</code> 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，<code>webpack</code> 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</li>\n<li>输出(output): <code>output</code> 属性告诉 <code>webpack</code> 在哪里输出它所创建的 bundles，以及如何命名这些文件。</li>\n<li>loader: <code>loader</code> 让 <code>webpack</code> 能够去处理那些非 JavaScript 文件（<code>webpack</code> 自身只理解 JavaScript）。<code>loader</code> 可以将所有类型的文件转换为 <code>webpack</code> 能够处理的有效<a href=\"https://doc.webpack-china.org/concepts/modules\" target=\"_blank\" rel=\"noopener\">模块</a>，然后你就可以利用 <code>webpack</code> 的打包能力，对它们进行处理。</li>\n<li>插件(plugins): <code>loader</code> 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。<a href=\"https://doc.webpack-china.org/api/plugins\" target=\"_blank\" rel=\"noopener\">插件接口</a>功能极其强大，可以用来处理各种各样的任务。</li>\n</ul>\n<h4 id=\"开始使用Webpack\"><a href=\"#开始使用Webpack\" class=\"headerlink\" title=\"开始使用Webpack\"></a>开始使用Webpack</h4><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install -g webpack</span><br><span class=\"line\">//安装到你的项目目录</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<h5 id=\"正式使用Webpack前的准备\"><a href=\"#正式使用Webpack前的准备\" class=\"headerlink\" title=\"正式使用Webpack前的准备\"></a>正式使用Webpack前的准备</h5><ol>\n<li>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个package.json文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>\n<ol>\n<li>package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装Webpack</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<ol>\n<li>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个<strong>index.html</strong>文件）。接下来我们再创建三个文件:</li>\n</ol>\n<ul>\n<li><code>index.html</code> – 放在public文件夹中;</li>\n<li><code>Greeter.js</code> – 放在app文件夹中;</li>\n<li><code>main.js</code> – 放在app文件夹中;<br>此时项目结构如下图所示</li>\n</ul>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/项目结构.png\" alt=\"项目结构\"></p>\n<p>我们在<strong>index.html</strong>文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为<strong>bundle.js</strong>，之后我们还会详细讲述）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- index.html --&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Webpack Sample Project&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&apos;root&apos;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>我们在<strong>Greeter.js</strong>中定义一个返回包含问候信息的<strong>html</strong>元素的函数,并依据<strong>CommonJS</strong>规范导出这个函数为一个模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Greeter.js</span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = &quot;Hi there and greetings!&quot;;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>main.js</strong>文件中我们写入下述代码，用以把<strong>Greeter模块</strong>返回的节点插入页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">const greeter = require(&apos;./Greeter.js&apos;);</span><br><span class=\"line\">document.querySelector(&quot;#root&quot;).appendChild(greeter());</span><br></pre></td></tr></table></figure>\n<h4 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h4><p>webpack可以在终端中使用，在基本的使用方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &#123;extry file&#125;出填写入口文件的路径，本文中就是上述main.js的路径，</span><br><span class=\"line\"># &#123;destination for bundled file&#125;处填写打包文件的存放路径</span><br><span class=\"line\"># 填写路径的时候不用添加&#123;&#125;</span><br><span class=\"line\">webpack &#123;entry file&#125; &#123;destination for bundled file&#125;</span><br></pre></td></tr></table></figure>\n<p>指定入口文件后，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack不是全局安装的，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中输入如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># webpack非全局安装的情况</span><br><span class=\"line\">node_modules/.bin/webpack app/main.js public/bundle.js</span><br></pre></td></tr></table></figure>\n<p>结果如下:</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/使用命令行打包.png\" alt=\"使用命令行打包\"></p>\n<p>可以看出<strong>webpack</strong>同时编译了<strong>main.js</strong> 和<strong>Greeter.js</strong>,现在打开<strong>index.html</strong>,可以看到如下结果:</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/htmlResult1.png\" alt=\"htmlResult1\"></p>\n<p>有没有很激动，已经成功的使用<strong>Webpack</strong>打包了一个文件了。不过在终端中进行复杂的操作，其实是不太方便且容易出错的，接下来看看Webpack的另一种更常见的使用方法。</p>\n<h5 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h5><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的<strong>loaders</strong>和<strong>plugins</strong>），这些功能其实都可以通过命令行模式实现，但是正如前面提到的，这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。</p>\n<p>继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为<strong>webpack.config.js</strong>的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</span><br></pre></td></tr></table></figure>\n<p>有了这个配置之后，再打包文件，只需在终端里运行<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>命令就可以了，这条命令会自动引用<strong>webpack.config.js</strong>文件中的配置选项，示例如下：</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/配合配置文件进行打包.png\" alt=\"配合配置文件进行打包\"></p>\n<p>又学会了一种使用<strong>Webpack</strong>的方法，这种方法不用管那烦人的命令行参数，有没有感觉很爽。如果我们可以连<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>\n<h5 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h5><p>在命令行中输入命令需要代码类似于<code>node_modules/.bin/webpack</code>这样的路径其实是比较烦人的，不过值得庆幸的是<strong>npm</strong>可以引导任务执行，对<strong>npm</strong>进行配置后可以在命令行中使用简单的<code>npm start</code>命令来替代上面略微繁琐的命令。在<strong>package.json</strong>中对<strong>scripts</strong>对象进行相关设置即可，设置方法如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-sample-project&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;Sample webpack project&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot; // 修改的是这里，JSON文件不支持注释，引用时请清除</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;zhang&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;3.10.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注：package.json中的script会安装一定顺序寻找命令对应位置，本地的node_modules/.bin路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</span><br></pre></td></tr></table></figure>\n<p>npm的<code>start</code>命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用<code>npm start</code>就可以执行其对于的命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，我们在命令行中输入<code>npm start</code>试试，输出结果如下：</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/使用npm start 打包代码.png\" alt=\"使用npm start 打包代码\"></p>\n<p>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得<strong>webpack</strong>也不过如此嘛，不过不要太小瞧<strong>webpack</strong>，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。</p>\n<h4 id=\"Webpack的强大功能\"><a href=\"#Webpack的强大功能\" class=\"headerlink\" title=\"Webpack的强大功能\"></a>Webpack的强大功能</h4><h5 id=\"生成Source-Maps（使调试更容易）\"><a href=\"#生成Source-Maps（使调试更容易）\" class=\"headerlink\" title=\"生成Source Maps（使调试更容易）\"></a>生成Source Maps（使调试更容易）</h5><p>开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，<code>Source Maps</code>就是来帮我们解决这个问题的。</p>\n<p>通过简单的配置，<strong>webpack</strong>就可以在打包时为我们生成的<code>source maps</code>，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>\n<p>在<strong>webpack</strong>的配置文件中配置<code>source maps</code>，需要配置<code>devtool</code>，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>devtool选项</th>\n<th>配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source-map</td>\n<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；</td>\n</tr>\n</tbody>\n</table>\n<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。</p>\n<p>对小到中型的项目中，<code>eval-source-map</code>是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的<code>webpack.config.js</code>，进行如下配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用webpack构建本地服务器\"><a href=\"#使用webpack构建本地服务器\" class=\"headerlink\" title=\"使用webpack构建本地服务器\"></a>使用webpack构建本地服务器</h5><p>想不想让你的浏览器监听你的代码的修改，并自动刷新显示修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>devserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考<a href=\"https://link.jianshu.com/?t=https://webpack.js.org/configuration/dev-server/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<table>\n<thead>\n<tr>\n<th>devserver的配置选项</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>contentBase</td>\n<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td>\n</tr>\n<tr>\n<td>port</td>\n<td>设置默认监听端口，如果省略，默认为”8080“</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>设置为true，当源文件改变时会自动刷新页面</td>\n</tr>\n<tr>\n<td>historyApiFallback</td>\n<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>\n</tr>\n</tbody>\n</table>\n<p>把这些命令加到webpack的配置文件中，现在的配置文件<code>webpack.config.js</code>如下所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">    historyApiFallback: true,//不跳转</span><br><span class=\"line\">    inline: true//实时刷新</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>package.json</code>中的<code>scripts</code>对象中添加如下命令，用以开启本地服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>在终端中输入<code>npm run server</code>即可在本地的<code>8080</code>端口查看结果</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/开启本地服务器.png\" alt=\"开启本地服务器\"></p>\n<h4 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h4><h5 id=\"鼎鼎大名的Loaders登场了！\"><a href=\"#鼎鼎大名的Loaders登场了！\" class=\"headerlink\" title=\"鼎鼎大名的Loaders登场了！\"></a>鼎鼎大名的Loaders登场了！</h5><p><strong>Loaders</strong>是<strong>webpack</strong>提供的最激动人心的功能之一了。通过使用不同的<strong>loader</strong>，<strong>webpack</strong>有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>中的modules关键字下进行配置，Loaders的配置包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>不过在配置<strong>loader</strong>之前，我们把<strong>Greeter.js</strong>里的问候消息放在一个单独的JSON文件里,并通过合适的配置使<strong>Greeter.js</strong>可以读取该JSON文件的值，各文件修改后的代码如下：</p>\n<p>在app文件夹中创建带有问候信息的JSON文件(命名为<code>config.json</code>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新后的Greeter.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var config = require(&apos;./config.json&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = config.greetText;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">注 由于webpack3.*/webpack2.*已经内置可处理JSON文件，这里我们无需再添加webpack1.*需要的json-loader。在看如何具体使用loader之前我们先看看Babel是什么？</span><br></pre></td></tr></table></figure>\n<h4 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h4><p>Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：</p>\n<ul>\n<li>让你能使用最新的JavaScript代码（ES6，ES7…），而不用管新标准是否被当前使用的浏览器完全支持；</li>\n<li>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</li>\n</ul>\n<h5 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h5><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的<code>babel-env-preset</code>包和解析JSX的<code>babel-preset-react</code>包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</span><br></pre></td></tr></table></figure>\n<p>在<code>webpack</code>中配置Babel的方法如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        presets: [</span><br><span class=\"line\">                            &quot;env&quot;, &quot;react&quot;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n<p>接下来我们使用ES6的语法，更新<strong>Greeter.js</strong>并返回一个React组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Greeter,js</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">import config from &apos;./config.json&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeter extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;config.greetText&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Greeter</span><br></pre></td></tr></table></figure>\n<p>修改<code>main.js</code>如下，使用ES6的模块定义和渲染Greeter模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<p>重新使用<code>npm start</code>打包，如果之前打开的本地服务器没有关闭，你应该可以在<code>localhost:8080</code>下看到与之前一样的内容，这说明react和es6被正常打包了。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/localhost-8080.png\" alt=\"localhost:8080\"></p>\n<h5 id=\"Babel的配置\"><a href=\"#Babel的配置\" class=\"headerlink\" title=\"Babel的配置\"></a>Babel的配置</h5><p>Babel其实可以完全在 <code>webpack.config.js</code> 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的<code>webpack.config.js</code>文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;env&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h4 id=\"一切皆模块\"><a href=\"#一切皆模块\" class=\"headerlink\" title=\"一切皆模块\"></a>一切皆模块</h4><p>Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。</p>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   ...</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">请注意这里对同一个文件引入多个loader的方法，以及先引style-loader后引css-loader</span><br></pre></td></tr></table></figure>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* main.css */</span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">  -ms-text-size-adjust: 100%;</span><br><span class=\"line\">  -webkit-text-size-adjust: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">*, *:before, *:after &#123;</span><br><span class=\"line\">  box-sizing: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1, h2, h3, h4, h5, h6, p, ul &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们这里例子中用到的<code>webpack</code>只有单一的入口，其它的模块需要通过 <code>import</code>, <code>require</code>,  <code>url</code>等与入口文件建立其关联，为了让webpack能找到”main.css”文件，我们把它导入”main.js”中，如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./main.css&apos;;//使用require导入css文件</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>\n<p>上面的代码说明webpack是怎么把css当做模块看待的，咱们继续看一个更加真实的css模块实践。</p>\n<h5 id=\"CSS-module\"><a href=\"#CSS-module\" class=\"headerlink\" title=\"CSS module\"></a>CSS module</h5><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。</p>\n<p>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常困难。</p>\n<p>被称为<code>CSS modules</code>的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。具体的代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true, // 指定启用css modules</span><br><span class=\"line\">                            localIdentName: &apos;[name]__[local]--[hash:base64:5]&apos; // 指定css的类名格式</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们在app文件夹下创建一个<code>Greeter.css</code>文件来进行一下测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Greeter.css */</span><br><span class=\"line\">.root &#123;</span><br><span class=\"line\">  background-color: #eee;</span><br><span class=\"line\">  padding: 10px;</span><br><span class=\"line\">  border: 3px solid #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>导入<code>.root</code>到Greeter.js中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">import config from &apos;./config.json&apos;;</span><br><span class=\"line\">import styles from &apos;./Greeter.css&apos;;//导入</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeter extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&#123;styles.root&#125;&gt; //使用cssModule添加类名的方法</span><br><span class=\"line\">        &#123;config.greetText&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Greeter</span><br></pre></td></tr></table></figure>\n<p>放心使用把，相同的类名也不会造成不同组件之间的污染。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/应用了css module后的样式.png\" alt=\"应用了css module后的样式\"></p>\n<p>CSS modules 也是一个很大的主题，有兴趣的话可以去其<a href=\"https://link.jianshu.com/?t=https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener\">官方文档</a>了解更多。</p>\n<h5 id=\"CSS预处理器\"><a href=\"#CSS预处理器\" class=\"headerlink\" title=\"CSS预处理器\"></a>CSS预处理器</h5><p><code>Sass</code> 和 <code>Less</code> 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于<code>variables</code>, <code>nesting</code>, <code>mixins</code>, <code>inheritance</code>等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，</p>\n<p>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理<code>loaders</code>:</p>\n<ul>\n<li><code>Less Loader</code></li>\n<li><code>Sass Loader</code></li>\n<li><code>Stylus Loader</code></li>\n</ul>\n<p>不过其实也存在一个CSS的处理平台-<code>PostCSS</code>，它可以帮助你的CSS实现更多的功能，在其<a href=\"https://link.jianshu.com/?t=https://github.com/postcss/postcss\" target=\"_blank\" rel=\"noopener\">官方文档</a>可了解更多相关知识。</p>\n<p>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>\n<p>首先安装<code>postcss-loader</code> 和 <code>autoprefixer</code>（自动添加前缀的插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n<p>接下来，在webpack配置文件中添加<code>postcss-loader</code>，在根目录新建<code>postcss.config.js</code>,并添加如下代码之后，重新使用<code>npm start打包</code>时，你写的css会自动根据Can i use里的数据添加不同前缀了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// postcss.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        require(&apos;autoprefixer&apos;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合<code>webpack</code>可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-<code>Plugins</code></p>\n<h4 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h4><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。</p>\n<p>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>\n<h5 id=\"使用插件的方法\"><a href=\"#使用插件的方法\" class=\"headerlink\" title=\"使用插件的方法\"></a>使用插件的方法</h5><p>要使用某个插件，我们需要通过<code>npm</code>安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码<a href=\"https://link.jianshu.com/?t=https://webpack.js.org/plugins/banner-plugin/\" target=\"_blank\" rel=\"noopener\">添加版权声明的插件</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过这个插件，打包后的JS文件显示如下</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/版权所有.png\" alt=\"版权所有，翻版必究\"></p>\n<p>这就是webpack插件的基础用法了，下面给大家推荐几个常用的插件</p>\n<h5 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h5><p>这个插件的作用是依据一个简单的<code>index.html</code>模板，生成一个自动引用你打包后的JS文件的新<code>index.html</code>。这在每次生成的js文件名称不同时非常有用（比如添加了<code>hash</code>值）。</p>\n<h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：</p>\n<ol>\n<li>移除public文件夹，利用此插件，<code>index.html</code>文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。</li>\n<li>在app目录下，创建一个<code>index.tmpl.html</code>文件模板，这个模板包含title等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，<code>index.tmpl.html</code>中的模板源代码如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Webpack Sample Project&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&apos;root&apos;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>3.更新<code>webpack</code>的配置文件，方法同上,新建一个<code>build</code>文件夹用来存放最终的输出文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>再次执行<code>npm start</code>你会发现，build文件夹下面生成了<code>bundle.js</code>和<code>index.html</code>。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/build文件夹.png\" alt=\"build文件夹\"></p>\n<h5 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h5><p><code>Hot Module Replacement</code>（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。</p>\n<p>在webpack中实现HMR也很简单，只需要做两项配置</p>\n<ol>\n<li>在webpack配置文件中添加HMR插件；</li>\n<li>在Webpack Dev Server中添加“hot”参数；</li>\n</ol>\n<p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p>\n<p>整理下我们的思路，具体实现方法如下</p>\n<ul>\n<li>Babel和webpack是独立的工具</li>\n<li>二者可以一起工作</li>\n<li>二者都可以通过插件拓展功能</li>\n<li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li>\n<li>Babel有一个叫做<code>react-transform-hrm</code>的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</li>\n</ul>\n<p>还是继续上例来实际看看如何配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        hot: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin()//热加载插件</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装react-transform-hmr\"><a href=\"#安装react-transform-hmr\" class=\"headerlink\" title=\"安装react-transform-hmr\"></a>安装<code>react-transform-hmr</code></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-plugin-react-transform react-transform-hmr</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置Babel\"><a href=\"#配置Babel\" class=\"headerlink\" title=\"配置Babel\"></a>配置Babel</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;env&quot;],</span><br><span class=\"line\">  &quot;env&quot;: &#123;</span><br><span class=\"line\">    &quot;development&quot;: &#123;</span><br><span class=\"line\">    &quot;plugins&quot;: [[&quot;react-transform&quot;, &#123;</span><br><span class=\"line\">       &quot;transforms&quot;: [&#123;</span><br><span class=\"line\">         &quot;transform&quot;: &quot;react-transform-hmr&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">         &quot;imports&quot;: [&quot;react&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\">         &quot;locals&quot;: [&quot;module&quot;]</span><br><span class=\"line\">       &#125;]</span><br><span class=\"line\">     &#125;]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在当你使用React时，可以热加载模块了,每次保存就能在浏览器上看到更新内容。</p>\n<h4 id=\"产品阶段的构建\"><a href=\"#产品阶段的构建\" class=\"headerlink\" title=\"产品阶段的构建\"></a>产品阶段的构建</h4><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>\n<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个webpack.production.config.js的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.production.config.js</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;, //已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;null&apos;, //注意修改了这里，这能大大压缩我们的打包代码</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;, //本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true, //不跳转</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        hot: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">            use: &#123;</span><br><span class=\"line\">                loader: &quot;babel-loader&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            exclude: /node_modules/</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.css$/,</span><br><span class=\"line\">            use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                use: [&#123;</span><br><span class=\"line\">                    loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        modules: true</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, &#123;</span><br><span class=\"line\">                    loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                &#125;],</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot; //new 一个这个插件的实例，并传入相关的参数</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin() //热加载插件</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;NODE_ENV=production webpack --config ./webpack.production.config.js --progress&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;react&quot;: &quot;^15.6.1&quot;,</span><br><span class=\"line\">    &quot;react-dom&quot;: &quot;^15.6.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意:如果是window电脑，build需要配置为&quot;build&quot;: &quot;set NODE_ENV=production &amp;&amp; webpack --config ./webpack.production.config.js --progress&quot;.</span><br></pre></td></tr></table></figure>\n<h5 id=\"优化插件\"><a href=\"#优化插件\" class=\"headerlink\" title=\"优化插件\"></a>优化插件</h5><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>\n<ul>\n<li><code>OccurenceOrderPlugin</code> :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>\n<li><code>UglifyJsPlugin</code>：压缩JS代码；</li>\n<li><code>ExtractTextPlugin</code>：分离CSS和JS文件</li>\n</ul>\n<p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>在配置文件的plugins后引用它们</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.production.config.js</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: &apos;none&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        hot: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /(\\.jsx|\\.js)$/,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                exclude: /node_modules/</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\">                            modules: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: __dirname + &quot;/app/index.tmpl.html&quot;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class=\"line\">        new webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">        new ExtractTextPlugin(&quot;style.css&quot;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>此时执行<code>npm run build</code>可以看见代码是被压缩后的</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/压缩后的代码.png\" alt=\"压缩后的代码\"></p>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">        filename: &quot;bundle-[hash].js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在用户会有合理的缓存了。</p>\n<p><img src=\"/2017/11/09/Webpack从入门到上手/带hash值的js名.png\" alt=\"带hash值的js名\"></p>\n<h5 id=\"去除build文件中的残余文件\"><a href=\"#去除build文件中的残余文件\" class=\"headerlink\" title=\"去除build文件中的残余文件\"></a>去除build文件中的残余文件</h5><p>添加了hash之后，会导致改变文件内容后重新打包时，文件名不同而内容越来越多，因此这里介绍另外一个很好用的插件<code>clean-webpack-plugin</code>。</p>\n<h5 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h5><p>引入<code>clean-webpack-plugin</code>插件后在配置文件的<code>plugins</code>中做相应配置即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CleanWebpackPlugin = require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...// 这里是之前配置的其它各种插件</span><br><span class=\"line\">    new CleanWebpackPlugin(&apos;build/*.*&apos;, &#123;</span><br><span class=\"line\">      root: __dirname,</span><br><span class=\"line\">      verbose: true,</span><br><span class=\"line\">      dry: false</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<p>关于<code>clean-webpack-plugin</code>的详细使用可参考<a href=\"https://link.jianshu.com/?t=https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><p><a href=\"https://doc.webpack-china.org/concepts/\" target=\"_blank\" rel=\"noopener\">webpack中文网</a></p>\n<p><a href=\"http://www.jqhtml.com/7626.html\" target=\"_blank\" rel=\"noopener\">webpack入门教程</a></p>\n<p><a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>"},{"title":"exports、module.exports 和 export、export default 之间的关系与区别","date":"2017-10-18T12:05:09.000Z","_content":"\n## exports、module.exports 和 export、export default 之间的关系与区别\n\n#### 前言\n\n开始之前，先理理require、export、module.exports等的使用范围。\n\n```\nrequire: node 和 ES6 都支持的引入\nexport / import : 只有 ES6 支持的导出引入\nmodule.exports / exports: 只有 node 支持的导出\n```\n\n#### node模块\n`Node`里面的模块系统遵循的是[CommonJS](http://javascript.ruanyifeng.com/nodejs/module.html)规范。\n\n<!--more-->\n\n##### 那问题又来了，什么是`CommonJS`规范呢？\n\n由于`js`以前比较混乱，各写各的代码，没有一个模块的概念，而这个规范出来其实就是对模块的一个定义。\n\n==CommonJS定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)==\n\n##### 先解释 `exports` 和 `module.exports`\n\n在一个node执行一个文件时，会给这个文件内生成一个 `exports` 和 `module` 对象，\n而module又有一个exports属性。他们之间的关系如下图，都指向一块{}内存区域。\n\n```\nexports = module.exports = {};\n```\n\n![内存结构示意图](exports、module.exports 和 export、export default 之间的关系与区别/内存结构示意图.png)\n\n那下面我们来看看代码的吧。\n\n```\n//utils.js\nlet a = 100;\n\nconsole.log(module.exports); //能打印出结果为：{}\nconsole.log(exports); //能打印出结果为：{}\n\nexports.a = 200; //这里辛苦劳作帮 module.exports 的内容给改成 {a : 200}\n\nexports = '指向其他内存区'; //这里把exports的指向指走\n\n//test.js\n\nvar a = require('/utils');\nconsole.log(a) // 打印为 {a : 200}\n```\n从上面可以看出，其实`require`导出的内容是`module.exports`的指向的内存块内容，并不是`exports`的。\n\n简而言之，区分他们之间的区别就是 exports 只是 module.exports的引用，辅助后者添加内容用的。\n\n用白话讲就是，`exports`只辅助`module.exports`操作内存中的数据，辛辛苦苦各种操作数据完，累得要死，结果到最后真正被`require`出去的内容还是`module.exports`的，真是好苦逼啊。\n\n其实大家用内存块的概念去理解，就会很清楚了。\n\n然后呢，为了避免糊涂，尽量都用 `module.exports` 导出，然后用`require`导入。\n\n#### ES中的模块导出导入\n说实话，在es中的模块，就非常清晰了。不过也有一些细节的东西需要搞清楚。\n比如 `export` 和 `export default`，还有 导入的时候，`import a from ..`,`import {a} from ..`，总之也有点乱，那么下面我们就开始把它们捋清楚吧。\n\n##### export 和 export default\n首先我们讲这两个导出，下面我们讲讲它们的区别\n\n1. export与export default均可用于导出常量、函数、文件、模块等\n2. 在一个文件或模块中，export、import可以有多个，export default仅有一个\n3. 通过export方式导出，在导入时要加{ }，export default则不需要\n4. export能直接导出变量表达式，export default不行。\n\n下面咱们看看代码去验证一下\n\n##### testEs6Export.js\n\n```\n'use strict'\n//导出变量\nexport const a = '100';\n\n //导出方法\nexport const dogSay = function(){\n    console.log('wang wang');\n}\n\n //导出方法第二种\nfunction catSay(){\n   console.log('miao miao');\n}\nexport { catSay };\n\n//export default导出\nconst m = 100;\nexport default m;\n//export defult const m = 100;// 这里不能写这种格式。\n```\n\n##### index.js\n\n```\n//index.js\n'use strict'\nvar express = require('express');\nvar router = express.Router();\n\nimport { dogSay, catSay } from './testEs6Export'; //导出了 export 方法\nimport m from './testEs6Export';  //导出了 export default\n\nimport * as testModule from './testEs6Export';//as 集合成对象导出\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  dogSay();\n  catSay();\n  console.log(m);\n  testModule.dogSay();\n  console.log(testModule.m); // undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。\n  console.log(testModule.default); // 100\n  res.send('恭喜你，成功验证');\n});\n\nmodule.exports = router;\n```\n从上面可以看出，确实感觉 `ES6` 的模块系统非常灵活的。\n\n#### 参考文献\n[老树新芽，在ES6下使用Express](https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000006707756)\n\n[exports 和 module.exports 的区别](https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fcnodejs.org%2Ftopic%2F5231a630101e574521e45ef8)\n\n[module.exports与exports,export与export default之间的关系](https://link.jianshu.com/?t=https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Ffayin%2Fp%2F6831071.html)\n\n\n[尊重原创，感谢原创分享](https://www.jianshu.com/p/076f2af97db0)","source":"_posts/exports、module-exports-和-export、export-default-之间的关系与区别.md","raw":"---\ntitle: exports、module.exports 和 export、export default 之间的关系与区别\ndate: 2017-10-18 20:05:09\ncategories: 模块化\ntags: 模块化\n---\n\n## exports、module.exports 和 export、export default 之间的关系与区别\n\n#### 前言\n\n开始之前，先理理require、export、module.exports等的使用范围。\n\n```\nrequire: node 和 ES6 都支持的引入\nexport / import : 只有 ES6 支持的导出引入\nmodule.exports / exports: 只有 node 支持的导出\n```\n\n#### node模块\n`Node`里面的模块系统遵循的是[CommonJS](http://javascript.ruanyifeng.com/nodejs/module.html)规范。\n\n<!--more-->\n\n##### 那问题又来了，什么是`CommonJS`规范呢？\n\n由于`js`以前比较混乱，各写各的代码，没有一个模块的概念，而这个规范出来其实就是对模块的一个定义。\n\n==CommonJS定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)==\n\n##### 先解释 `exports` 和 `module.exports`\n\n在一个node执行一个文件时，会给这个文件内生成一个 `exports` 和 `module` 对象，\n而module又有一个exports属性。他们之间的关系如下图，都指向一块{}内存区域。\n\n```\nexports = module.exports = {};\n```\n\n![内存结构示意图](exports、module.exports 和 export、export default 之间的关系与区别/内存结构示意图.png)\n\n那下面我们来看看代码的吧。\n\n```\n//utils.js\nlet a = 100;\n\nconsole.log(module.exports); //能打印出结果为：{}\nconsole.log(exports); //能打印出结果为：{}\n\nexports.a = 200; //这里辛苦劳作帮 module.exports 的内容给改成 {a : 200}\n\nexports = '指向其他内存区'; //这里把exports的指向指走\n\n//test.js\n\nvar a = require('/utils');\nconsole.log(a) // 打印为 {a : 200}\n```\n从上面可以看出，其实`require`导出的内容是`module.exports`的指向的内存块内容，并不是`exports`的。\n\n简而言之，区分他们之间的区别就是 exports 只是 module.exports的引用，辅助后者添加内容用的。\n\n用白话讲就是，`exports`只辅助`module.exports`操作内存中的数据，辛辛苦苦各种操作数据完，累得要死，结果到最后真正被`require`出去的内容还是`module.exports`的，真是好苦逼啊。\n\n其实大家用内存块的概念去理解，就会很清楚了。\n\n然后呢，为了避免糊涂，尽量都用 `module.exports` 导出，然后用`require`导入。\n\n#### ES中的模块导出导入\n说实话，在es中的模块，就非常清晰了。不过也有一些细节的东西需要搞清楚。\n比如 `export` 和 `export default`，还有 导入的时候，`import a from ..`,`import {a} from ..`，总之也有点乱，那么下面我们就开始把它们捋清楚吧。\n\n##### export 和 export default\n首先我们讲这两个导出，下面我们讲讲它们的区别\n\n1. export与export default均可用于导出常量、函数、文件、模块等\n2. 在一个文件或模块中，export、import可以有多个，export default仅有一个\n3. 通过export方式导出，在导入时要加{ }，export default则不需要\n4. export能直接导出变量表达式，export default不行。\n\n下面咱们看看代码去验证一下\n\n##### testEs6Export.js\n\n```\n'use strict'\n//导出变量\nexport const a = '100';\n\n //导出方法\nexport const dogSay = function(){\n    console.log('wang wang');\n}\n\n //导出方法第二种\nfunction catSay(){\n   console.log('miao miao');\n}\nexport { catSay };\n\n//export default导出\nconst m = 100;\nexport default m;\n//export defult const m = 100;// 这里不能写这种格式。\n```\n\n##### index.js\n\n```\n//index.js\n'use strict'\nvar express = require('express');\nvar router = express.Router();\n\nimport { dogSay, catSay } from './testEs6Export'; //导出了 export 方法\nimport m from './testEs6Export';  //导出了 export default\n\nimport * as testModule from './testEs6Export';//as 集合成对象导出\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  dogSay();\n  catSay();\n  console.log(m);\n  testModule.dogSay();\n  console.log(testModule.m); // undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。\n  console.log(testModule.default); // 100\n  res.send('恭喜你，成功验证');\n});\n\nmodule.exports = router;\n```\n从上面可以看出，确实感觉 `ES6` 的模块系统非常灵活的。\n\n#### 参考文献\n[老树新芽，在ES6下使用Express](https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000006707756)\n\n[exports 和 module.exports 的区别](https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fcnodejs.org%2Ftopic%2F5231a630101e574521e45ef8)\n\n[module.exports与exports,export与export default之间的关系](https://link.jianshu.com/?t=https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Ffayin%2Fp%2F6831071.html)\n\n\n[尊重原创，感谢原创分享](https://www.jianshu.com/p/076f2af97db0)","slug":"exports、module-exports-和-export、export-default-之间的关系与区别","published":1,"updated":"2018-02-09T03:14:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmd0018lxnd57xtm8ix","content":"<h2 id=\"exports、module-exports-和-export、export-default-之间的关系与区别\"><a href=\"#exports、module-exports-和-export、export-default-之间的关系与区别\" class=\"headerlink\" title=\"exports、module.exports 和 export、export default 之间的关系与区别\"></a>exports、module.exports 和 export、export default 之间的关系与区别</h2><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>开始之前，先理理require、export、module.exports等的使用范围。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require: node 和 ES6 都支持的引入</span><br><span class=\"line\">export / import : 只有 ES6 支持的导出引入</span><br><span class=\"line\">module.exports / exports: 只有 node 支持的导出</span><br></pre></td></tr></table></figure>\n<h4 id=\"node模块\"><a href=\"#node模块\" class=\"headerlink\" title=\"node模块\"></a>node模块</h4><p><code>Node</code>里面的模块系统遵循的是<a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"noopener\">CommonJS</a>规范。</p>\n<a id=\"more\"></a>\n<h5 id=\"那问题又来了，什么是CommonJS规范呢？\"><a href=\"#那问题又来了，什么是CommonJS规范呢？\" class=\"headerlink\" title=\"那问题又来了，什么是CommonJS规范呢？\"></a>那问题又来了，什么是<code>CommonJS</code>规范呢？</h5><p>由于<code>js</code>以前比较混乱，各写各的代码，没有一个模块的概念，而这个规范出来其实就是对模块的一个定义。</p>\n<p>==CommonJS定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)==</p>\n<h5 id=\"先解释-exports-和-module-exports\"><a href=\"#先解释-exports-和-module-exports\" class=\"headerlink\" title=\"先解释 exports 和 module.exports\"></a>先解释 <code>exports</code> 和 <code>module.exports</code></h5><p>在一个node执行一个文件时，会给这个文件内生成一个 <code>exports</code> 和 <code>module</code> 对象，<br>而module又有一个exports属性。他们之间的关系如下图，都指向一块{}内存区域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = module.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/18/exports、module-exports-和-export、export-default-之间的关系与区别/内存结构示意图.png\" alt=\"内存结构示意图\"></p>\n<p>那下面我们来看看代码的吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//utils.js</span><br><span class=\"line\">let a = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(module.exports); //能打印出结果为：&#123;&#125;</span><br><span class=\"line\">console.log(exports); //能打印出结果为：&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.a = 200; //这里辛苦劳作帮 module.exports 的内容给改成 &#123;a : 200&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports = &apos;指向其他内存区&apos;; //这里把exports的指向指走</span><br><span class=\"line\"></span><br><span class=\"line\">//test.js</span><br><span class=\"line\"></span><br><span class=\"line\">var a = require(&apos;/utils&apos;);</span><br><span class=\"line\">console.log(a) // 打印为 &#123;a : 200&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，其实<code>require</code>导出的内容是<code>module.exports</code>的指向的内存块内容，并不是<code>exports</code>的。</p>\n<p>简而言之，区分他们之间的区别就是 exports 只是 module.exports的引用，辅助后者添加内容用的。</p>\n<p>用白话讲就是，<code>exports</code>只辅助<code>module.exports</code>操作内存中的数据，辛辛苦苦各种操作数据完，累得要死，结果到最后真正被<code>require</code>出去的内容还是<code>module.exports</code>的，真是好苦逼啊。</p>\n<p>其实大家用内存块的概念去理解，就会很清楚了。</p>\n<p>然后呢，为了避免糊涂，尽量都用 <code>module.exports</code> 导出，然后用<code>require</code>导入。</p>\n<h4 id=\"ES中的模块导出导入\"><a href=\"#ES中的模块导出导入\" class=\"headerlink\" title=\"ES中的模块导出导入\"></a>ES中的模块导出导入</h4><p>说实话，在es中的模块，就非常清晰了。不过也有一些细节的东西需要搞清楚。<br>比如 <code>export</code> 和 <code>export default</code>，还有 导入的时候，<code>import a from ..</code>,<code>import {a} from ..</code>，总之也有点乱，那么下面我们就开始把它们捋清楚吧。</p>\n<h5 id=\"export-和-export-default\"><a href=\"#export-和-export-default\" class=\"headerlink\" title=\"export 和 export default\"></a>export 和 export default</h5><p>首先我们讲这两个导出，下面我们讲讲它们的区别</p>\n<ol>\n<li>export与export default均可用于导出常量、函数、文件、模块等</li>\n<li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li>\n<li>通过export方式导出，在导入时要加{ }，export default则不需要</li>\n<li>export能直接导出变量表达式，export default不行。</li>\n</ol>\n<p>下面咱们看看代码去验证一下</p>\n<h5 id=\"testEs6Export-js\"><a href=\"#testEs6Export-js\" class=\"headerlink\" title=\"testEs6Export.js\"></a>testEs6Export.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\">//导出变量</span><br><span class=\"line\">export const a = &apos;100&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"> //导出方法</span><br><span class=\"line\">export const dogSay = function()&#123;</span><br><span class=\"line\">    console.log(&apos;wang wang&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> //导出方法第二种</span><br><span class=\"line\">function catSay()&#123;</span><br><span class=\"line\">   console.log(&apos;miao miao&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export &#123; catSay &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//export default导出</span><br><span class=\"line\">const m = 100;</span><br><span class=\"line\">export default m;</span><br><span class=\"line\">//export defult const m = 100;// 这里不能写这种格式。</span><br></pre></td></tr></table></figure>\n<h5 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; dogSay, catSay &#125; from &apos;./testEs6Export&apos;; //导出了 export 方法</span><br><span class=\"line\">import m from &apos;./testEs6Export&apos;;  //导出了 export default</span><br><span class=\"line\"></span><br><span class=\"line\">import * as testModule from &apos;./testEs6Export&apos;;//as 集合成对象导出</span><br><span class=\"line\"></span><br><span class=\"line\">/* GET home page. */</span><br><span class=\"line\">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class=\"line\">  dogSay();</span><br><span class=\"line\">  catSay();</span><br><span class=\"line\">  console.log(m);</span><br><span class=\"line\">  testModule.dogSay();</span><br><span class=\"line\">  console.log(testModule.m); // undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。</span><br><span class=\"line\">  console.log(testModule.default); // 100</span><br><span class=\"line\">  res.send(&apos;恭喜你，成功验证&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，确实感觉 <code>ES6</code> 的模块系统非常灵活的。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><p><a href=\"https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000006707756\" target=\"_blank\" rel=\"noopener\">老树新芽，在ES6下使用Express</a></p>\n<p><a href=\"https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fcnodejs.org%2Ftopic%2F5231a630101e574521e45ef8\" target=\"_blank\" rel=\"noopener\">exports 和 module.exports 的区别</a></p>\n<p><a href=\"https://link.jianshu.com/?t=https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Ffayin%2Fp%2F6831071.html\" target=\"_blank\" rel=\"noopener\">module.exports与exports,export与export default之间的关系</a></p>\n<p><a href=\"https://www.jianshu.com/p/076f2af97db0\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"exports、module-exports-和-export、export-default-之间的关系与区别\"><a href=\"#exports、module-exports-和-export、export-default-之间的关系与区别\" class=\"headerlink\" title=\"exports、module.exports 和 export、export default 之间的关系与区别\"></a>exports、module.exports 和 export、export default 之间的关系与区别</h2><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>开始之前，先理理require、export、module.exports等的使用范围。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require: node 和 ES6 都支持的引入</span><br><span class=\"line\">export / import : 只有 ES6 支持的导出引入</span><br><span class=\"line\">module.exports / exports: 只有 node 支持的导出</span><br></pre></td></tr></table></figure>\n<h4 id=\"node模块\"><a href=\"#node模块\" class=\"headerlink\" title=\"node模块\"></a>node模块</h4><p><code>Node</code>里面的模块系统遵循的是<a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"noopener\">CommonJS</a>规范。</p>","more":"<h5 id=\"那问题又来了，什么是CommonJS规范呢？\"><a href=\"#那问题又来了，什么是CommonJS规范呢？\" class=\"headerlink\" title=\"那问题又来了，什么是CommonJS规范呢？\"></a>那问题又来了，什么是<code>CommonJS</code>规范呢？</h5><p>由于<code>js</code>以前比较混乱，各写各的代码，没有一个模块的概念，而这个规范出来其实就是对模块的一个定义。</p>\n<p>==CommonJS定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)==</p>\n<h5 id=\"先解释-exports-和-module-exports\"><a href=\"#先解释-exports-和-module-exports\" class=\"headerlink\" title=\"先解释 exports 和 module.exports\"></a>先解释 <code>exports</code> 和 <code>module.exports</code></h5><p>在一个node执行一个文件时，会给这个文件内生成一个 <code>exports</code> 和 <code>module</code> 对象，<br>而module又有一个exports属性。他们之间的关系如下图，都指向一块{}内存区域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = module.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/18/exports、module-exports-和-export、export-default-之间的关系与区别/内存结构示意图.png\" alt=\"内存结构示意图\"></p>\n<p>那下面我们来看看代码的吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//utils.js</span><br><span class=\"line\">let a = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(module.exports); //能打印出结果为：&#123;&#125;</span><br><span class=\"line\">console.log(exports); //能打印出结果为：&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.a = 200; //这里辛苦劳作帮 module.exports 的内容给改成 &#123;a : 200&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports = &apos;指向其他内存区&apos;; //这里把exports的指向指走</span><br><span class=\"line\"></span><br><span class=\"line\">//test.js</span><br><span class=\"line\"></span><br><span class=\"line\">var a = require(&apos;/utils&apos;);</span><br><span class=\"line\">console.log(a) // 打印为 &#123;a : 200&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，其实<code>require</code>导出的内容是<code>module.exports</code>的指向的内存块内容，并不是<code>exports</code>的。</p>\n<p>简而言之，区分他们之间的区别就是 exports 只是 module.exports的引用，辅助后者添加内容用的。</p>\n<p>用白话讲就是，<code>exports</code>只辅助<code>module.exports</code>操作内存中的数据，辛辛苦苦各种操作数据完，累得要死，结果到最后真正被<code>require</code>出去的内容还是<code>module.exports</code>的，真是好苦逼啊。</p>\n<p>其实大家用内存块的概念去理解，就会很清楚了。</p>\n<p>然后呢，为了避免糊涂，尽量都用 <code>module.exports</code> 导出，然后用<code>require</code>导入。</p>\n<h4 id=\"ES中的模块导出导入\"><a href=\"#ES中的模块导出导入\" class=\"headerlink\" title=\"ES中的模块导出导入\"></a>ES中的模块导出导入</h4><p>说实话，在es中的模块，就非常清晰了。不过也有一些细节的东西需要搞清楚。<br>比如 <code>export</code> 和 <code>export default</code>，还有 导入的时候，<code>import a from ..</code>,<code>import {a} from ..</code>，总之也有点乱，那么下面我们就开始把它们捋清楚吧。</p>\n<h5 id=\"export-和-export-default\"><a href=\"#export-和-export-default\" class=\"headerlink\" title=\"export 和 export default\"></a>export 和 export default</h5><p>首先我们讲这两个导出，下面我们讲讲它们的区别</p>\n<ol>\n<li>export与export default均可用于导出常量、函数、文件、模块等</li>\n<li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li>\n<li>通过export方式导出，在导入时要加{ }，export default则不需要</li>\n<li>export能直接导出变量表达式，export default不行。</li>\n</ol>\n<p>下面咱们看看代码去验证一下</p>\n<h5 id=\"testEs6Export-js\"><a href=\"#testEs6Export-js\" class=\"headerlink\" title=\"testEs6Export.js\"></a>testEs6Export.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\">//导出变量</span><br><span class=\"line\">export const a = &apos;100&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"> //导出方法</span><br><span class=\"line\">export const dogSay = function()&#123;</span><br><span class=\"line\">    console.log(&apos;wang wang&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> //导出方法第二种</span><br><span class=\"line\">function catSay()&#123;</span><br><span class=\"line\">   console.log(&apos;miao miao&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export &#123; catSay &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//export default导出</span><br><span class=\"line\">const m = 100;</span><br><span class=\"line\">export default m;</span><br><span class=\"line\">//export defult const m = 100;// 这里不能写这种格式。</span><br></pre></td></tr></table></figure>\n<h5 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; dogSay, catSay &#125; from &apos;./testEs6Export&apos;; //导出了 export 方法</span><br><span class=\"line\">import m from &apos;./testEs6Export&apos;;  //导出了 export default</span><br><span class=\"line\"></span><br><span class=\"line\">import * as testModule from &apos;./testEs6Export&apos;;//as 集合成对象导出</span><br><span class=\"line\"></span><br><span class=\"line\">/* GET home page. */</span><br><span class=\"line\">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class=\"line\">  dogSay();</span><br><span class=\"line\">  catSay();</span><br><span class=\"line\">  console.log(m);</span><br><span class=\"line\">  testModule.dogSay();</span><br><span class=\"line\">  console.log(testModule.m); // undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。</span><br><span class=\"line\">  console.log(testModule.default); // 100</span><br><span class=\"line\">  res.send(&apos;恭喜你，成功验证&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，确实感觉 <code>ES6</code> 的模块系统非常灵活的。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><p><a href=\"https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000006707756\" target=\"_blank\" rel=\"noopener\">老树新芽，在ES6下使用Express</a></p>\n<p><a href=\"https://link.jianshu.com/?t=https://link.juejin.im?target=https%3A%2F%2Fcnodejs.org%2Ftopic%2F5231a630101e574521e45ef8\" target=\"_blank\" rel=\"noopener\">exports 和 module.exports 的区别</a></p>\n<p><a href=\"https://link.jianshu.com/?t=https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Ffayin%2Fp%2F6831071.html\" target=\"_blank\" rel=\"noopener\">module.exports与exports,export与export default之间的关系</a></p>\n<p><a href=\"https://www.jianshu.com/p/076f2af97db0\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>"},{"title":"Hello Hexo","date":"2017-06-08T14:10:26.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n<!--more-->\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### clean cache\n\n``` bash\n$ hexo clean\n```\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-hexo.md","raw":"---\ntitle: Hello Hexo\ndate: 2017-06-08 22:10:26\ncategories: 框架\ntags: Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n<!--more-->\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### clean cache\n\n``` bash\n$ hexo clean\n```\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-hexo","published":1,"updated":"2018-02-06T11:55:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmg001alxndtgbky26w","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"clean-cache\"><a href=\"#clean-cache\" class=\"headerlink\" title=\"clean cache\"></a>clean cache</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"clean-cache\"><a href=\"#clean-cache\" class=\"headerlink\" title=\"clean cache\"></a>clean cache</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"dva入门开发的小总结","date":"2018-01-05T11:53:05.000Z","_content":"## dva入门开发的小总结\n`dva 是对 redux 的一层浅封装，基于 react 语言，实现前端代码的分层`\n\n##### 一般会分为3层：\n1. component：组件渲染、展示页面\n2. models：数据组装、处理\n3. services：接口调用、拿数据\n\n##### 框架主要构成模块：\n\n<!--more-->\n\n**1. `router.js` 文件中配置路由，指定具体路径所要加载的 views 和 models**\n```\n{\n    path: '/security/users',\n    models: () => [import('./models/security/user')],\n    component: () => import('./views/security/user/'),\n}\n```\n**2. services**\n\n`.roadhogrc.js`文件中配置好代理请求地址\n```\nproxy: {\n    \"/api/v1/weather\": {\n      \"target\": \"https://api.seniverse.com/\",\n      \"changeOrigin\": true,\n      \"pathRewrite\": { \"^/api/v1/weather\" : \"/v3/weather\" }\n    },\n    \"/services\": {\n        \"target\": \"http://ip地址:8080/\",\n        \"changeOrigin\": true,\n        \"pathRewrite\": { \"^/services\" : \"/services\" }\n      },\n  },\n```\n`serviecs/user.js`中定义好接口，获取原始数据。\n\n对于自定义方法，提供 url、method、data（可选），返回 request 封装好的 http 请求。\n```\nexport async function query({page = 1 , pageSize = 10 , ...qs}) {\n    return user.listPage(page,pageSize,qs)\n}\n\nexport async function get({id}) {\n    return user.get(id)\n}\n\nexport async function create (params) {\n    return user.create(params);\n}\n\nexport async function update (params) {\n    return user.update(params);\n}\n\n// 用户设置 自定义方法\n//修改用户\nexport async function modify(payload) {\n    return request({\n        url: `${apiPrefix}/security/user/modify`,\n        method: 'put',\n        data: payload\n    })\n}\n```\n\n**3. models**\n```\nimport pathToRegexp from 'path-to-regexp'\nimport modelExtend from 'dva-model-extend'\nimport * as user from 'services/security/user'\nimport { pageModel } from 'models/common'\nimport { message } from 'antd'\n\nexport default modelExtend(pageModel, {\n\n  namespace: 'secUser',\n\n  state: {\n   currentItem: {},\n   modalVisible: false,\n   modalType: 'create',\n   selectedRowKeys: [],\n  },\n\n  // 添加一个监听器，当pathname === '/security/users'时执行dispatch\n  subscriptions: {\n    setup ({ dispatch, history }) {\n      history.listen((location) => {\n        if (location.pathname === '/security/users') {\n          dispatch({\n              type: 'query',\n              payload: location.query || {},\n          })\n        }\n      })\n    },\n  },\n\n//\n  effects: {\n    * query ({\n      payload,\n    }, { call, put }) {\n      const result = yield call(user.query, payload)\n      const { success, message, status, data } = result\n      if (success) {\n        yield put({\n          type: 'querySuccess',\n          payload: data,\n        })\n      } else {\n        throw result\n      }\n    },\n\n    * create ({ payload }, { call, put,select }) {\n      const {data} = yield call(user.create, payload)\n      message.info(\"新增成功\");\n      yield put({ type: 'hideModal' })\n      const { pagination: { pageSize,current } } = yield select(_ => _.secUser)\n      yield put({ type: 'query', payload: {pageSize, page:current } })\n    },\n\n    * update ({ payload }, { select, call, put }) {\n      const id = yield select(({ secUser }) => secUser.currentItem.id)\n      const newUser = { ...payload, id }\n      const {data} = yield call(user.update, newUser)\n      message.info(\"修改成功\");\n      yield put({ type: 'hideModal' })\n      const { pagination: { pageSize,current } } = yield select(_ => _.secUser)\n      yield put({ type: 'query', payload: {pageSize, page:current } })\n    },\n  },\n\n  reducers: {\n     showModal (state, { payload }) {\n      return { ...state, ...payload, modalVisible: true }\n    },\n\n    hideModal (state) {\n      return { ...state, modalVisible: false }\n    },\n  },\n})\n```\n- **query、update 前面的 * 号，表示这个方法是一个 Generator函数**\n\n- **subscriptions：用于添加一个监听器**\n\n- **effects：异步执行 dispatch，用于发起异步请求**\n```\ncall 是调用执行一个函数 (调用service里面的方法)\nput 则是相当于 dispatch 执行一个 action\nselect 则可以用来访问其它 model\n```\n- **reducers：同步请求，主要用来改变state**\n\n**4.component**\n\n==注意：组件入口文件一定要命名为 index.js ，否则会找不到==\n```\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { routerRedux } from 'dva/router'\nimport { connect } from 'dva'\nimport { Row, Col, Button, Popconfirm } from 'antd'\nimport List from './List'\nimport Filter from './Filter'\nimport Modal from './Modal'\nimport { Page } from 'components'\nimport { i18n }  from 'utils'\n\nconst User = ({ location, dispatch, secUser, loading }) => {\n  const { dataSource, pagination, currentItem, modalVisible, modalType, selectedRowKeys } = secUser\n  const { pageSize } = 10\n\n  const modalProps = {\n    item: modalType === 'create' ? {} : currentItem,\n    visible: modalVisible,\n    maskClosable: false,\n    confirmLoading: loading.effects['secUser/update'],\n    title: modalType === 'create' ? i18n('lab.user.create') : i18n('lab.user.update'),\n    wrapClassName: 'vertical-center-modal',\n    onOk (data) {\n      dispatch({\n        type: `secUser/${modalType}`,\n        payload: data,\n      })\n    },\n    onCancel () {\n      dispatch({\n        type: 'secUser/hideModal',\n      })\n    },\n  }\n\n  const listProps = {\n    dataSource,\n    loading: loading.effects['secUser/query'],\n    pagination,\n    location,\n    onChange (page) {\n      const { query, pathname } = location\n      dispatch(routerRedux.push({\n        pathname,\n        query: {\n          ...query,\n          page: page.current,\n          pageSize: page.pageSize,\n        },\n      }))\n    },\n    onDeleteItem (id) {\n      dispatch({\n        type: 'secUser/delete',\n        payload: id,\n      })\n    },\n    onEditItem (item) {\n      dispatch({\n        type: 'secUser/showModal',\n        payload: {\n          modalType: 'update',\n          currentItem: item,\n        },\n      })\n    },\n    rowSelection: {\n      selectedRowKeys,\n      onChange: (keys) => {\n        dispatch({\n          type: 'secUser/updateState',\n          payload: {\n            selectedRowKeys: keys,\n          },\n        })\n      },\n    },\n  }\n\n  const filterProps = {\n    ...\n  }\n\n  const handleDeleteItems = () => {\n    dispatch({\n      type: 'secUser/multiDelete',\n      payload: {\n        ids: selectedRowKeys,\n      },\n    })\n  }\n\n  return (\n    <Page inner>\n      <Filter {...filterProps} />\n      <List {...listProps} />\n      {modalVisible && <Modal {...modalProps} />}\n    </Page>\n  )\n}\n\nUser.propTypes = {\n  secUser: PropTypes.object,\n  location: PropTypes.object,\n  dispatch: PropTypes.func,\n  loading: PropTypes.object,\n}\n\nexport default connect(({ secUser }) => ({ secUser}))(User)\n```\n- **connect方法将组件与数据关联在一起**\n`export default connect(({ secUser }) => ({ secUser}))(User)`\n- **secUser 必须与对应 models 里面定义的 namespace 字段一致**\n\n- **组件中发起请求调用 dispatch**\n```\ntype 字段对应 models 中 effects 和 reducers 对应方法\npayload 为传参对象\n```\n\n[尊重原创，感谢原创分享](https://www.jianshu.com/p/6d4c70ef63be)","source":"_posts/dva入门开发的小总结.md","raw":"---\ntitle: dva入门开发的小总结\ndate: 2018-01-05 19:53:05\ncategories: React\ntags: Dva\n---\n## dva入门开发的小总结\n`dva 是对 redux 的一层浅封装，基于 react 语言，实现前端代码的分层`\n\n##### 一般会分为3层：\n1. component：组件渲染、展示页面\n2. models：数据组装、处理\n3. services：接口调用、拿数据\n\n##### 框架主要构成模块：\n\n<!--more-->\n\n**1. `router.js` 文件中配置路由，指定具体路径所要加载的 views 和 models**\n```\n{\n    path: '/security/users',\n    models: () => [import('./models/security/user')],\n    component: () => import('./views/security/user/'),\n}\n```\n**2. services**\n\n`.roadhogrc.js`文件中配置好代理请求地址\n```\nproxy: {\n    \"/api/v1/weather\": {\n      \"target\": \"https://api.seniverse.com/\",\n      \"changeOrigin\": true,\n      \"pathRewrite\": { \"^/api/v1/weather\" : \"/v3/weather\" }\n    },\n    \"/services\": {\n        \"target\": \"http://ip地址:8080/\",\n        \"changeOrigin\": true,\n        \"pathRewrite\": { \"^/services\" : \"/services\" }\n      },\n  },\n```\n`serviecs/user.js`中定义好接口，获取原始数据。\n\n对于自定义方法，提供 url、method、data（可选），返回 request 封装好的 http 请求。\n```\nexport async function query({page = 1 , pageSize = 10 , ...qs}) {\n    return user.listPage(page,pageSize,qs)\n}\n\nexport async function get({id}) {\n    return user.get(id)\n}\n\nexport async function create (params) {\n    return user.create(params);\n}\n\nexport async function update (params) {\n    return user.update(params);\n}\n\n// 用户设置 自定义方法\n//修改用户\nexport async function modify(payload) {\n    return request({\n        url: `${apiPrefix}/security/user/modify`,\n        method: 'put',\n        data: payload\n    })\n}\n```\n\n**3. models**\n```\nimport pathToRegexp from 'path-to-regexp'\nimport modelExtend from 'dva-model-extend'\nimport * as user from 'services/security/user'\nimport { pageModel } from 'models/common'\nimport { message } from 'antd'\n\nexport default modelExtend(pageModel, {\n\n  namespace: 'secUser',\n\n  state: {\n   currentItem: {},\n   modalVisible: false,\n   modalType: 'create',\n   selectedRowKeys: [],\n  },\n\n  // 添加一个监听器，当pathname === '/security/users'时执行dispatch\n  subscriptions: {\n    setup ({ dispatch, history }) {\n      history.listen((location) => {\n        if (location.pathname === '/security/users') {\n          dispatch({\n              type: 'query',\n              payload: location.query || {},\n          })\n        }\n      })\n    },\n  },\n\n//\n  effects: {\n    * query ({\n      payload,\n    }, { call, put }) {\n      const result = yield call(user.query, payload)\n      const { success, message, status, data } = result\n      if (success) {\n        yield put({\n          type: 'querySuccess',\n          payload: data,\n        })\n      } else {\n        throw result\n      }\n    },\n\n    * create ({ payload }, { call, put,select }) {\n      const {data} = yield call(user.create, payload)\n      message.info(\"新增成功\");\n      yield put({ type: 'hideModal' })\n      const { pagination: { pageSize,current } } = yield select(_ => _.secUser)\n      yield put({ type: 'query', payload: {pageSize, page:current } })\n    },\n\n    * update ({ payload }, { select, call, put }) {\n      const id = yield select(({ secUser }) => secUser.currentItem.id)\n      const newUser = { ...payload, id }\n      const {data} = yield call(user.update, newUser)\n      message.info(\"修改成功\");\n      yield put({ type: 'hideModal' })\n      const { pagination: { pageSize,current } } = yield select(_ => _.secUser)\n      yield put({ type: 'query', payload: {pageSize, page:current } })\n    },\n  },\n\n  reducers: {\n     showModal (state, { payload }) {\n      return { ...state, ...payload, modalVisible: true }\n    },\n\n    hideModal (state) {\n      return { ...state, modalVisible: false }\n    },\n  },\n})\n```\n- **query、update 前面的 * 号，表示这个方法是一个 Generator函数**\n\n- **subscriptions：用于添加一个监听器**\n\n- **effects：异步执行 dispatch，用于发起异步请求**\n```\ncall 是调用执行一个函数 (调用service里面的方法)\nput 则是相当于 dispatch 执行一个 action\nselect 则可以用来访问其它 model\n```\n- **reducers：同步请求，主要用来改变state**\n\n**4.component**\n\n==注意：组件入口文件一定要命名为 index.js ，否则会找不到==\n```\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { routerRedux } from 'dva/router'\nimport { connect } from 'dva'\nimport { Row, Col, Button, Popconfirm } from 'antd'\nimport List from './List'\nimport Filter from './Filter'\nimport Modal from './Modal'\nimport { Page } from 'components'\nimport { i18n }  from 'utils'\n\nconst User = ({ location, dispatch, secUser, loading }) => {\n  const { dataSource, pagination, currentItem, modalVisible, modalType, selectedRowKeys } = secUser\n  const { pageSize } = 10\n\n  const modalProps = {\n    item: modalType === 'create' ? {} : currentItem,\n    visible: modalVisible,\n    maskClosable: false,\n    confirmLoading: loading.effects['secUser/update'],\n    title: modalType === 'create' ? i18n('lab.user.create') : i18n('lab.user.update'),\n    wrapClassName: 'vertical-center-modal',\n    onOk (data) {\n      dispatch({\n        type: `secUser/${modalType}`,\n        payload: data,\n      })\n    },\n    onCancel () {\n      dispatch({\n        type: 'secUser/hideModal',\n      })\n    },\n  }\n\n  const listProps = {\n    dataSource,\n    loading: loading.effects['secUser/query'],\n    pagination,\n    location,\n    onChange (page) {\n      const { query, pathname } = location\n      dispatch(routerRedux.push({\n        pathname,\n        query: {\n          ...query,\n          page: page.current,\n          pageSize: page.pageSize,\n        },\n      }))\n    },\n    onDeleteItem (id) {\n      dispatch({\n        type: 'secUser/delete',\n        payload: id,\n      })\n    },\n    onEditItem (item) {\n      dispatch({\n        type: 'secUser/showModal',\n        payload: {\n          modalType: 'update',\n          currentItem: item,\n        },\n      })\n    },\n    rowSelection: {\n      selectedRowKeys,\n      onChange: (keys) => {\n        dispatch({\n          type: 'secUser/updateState',\n          payload: {\n            selectedRowKeys: keys,\n          },\n        })\n      },\n    },\n  }\n\n  const filterProps = {\n    ...\n  }\n\n  const handleDeleteItems = () => {\n    dispatch({\n      type: 'secUser/multiDelete',\n      payload: {\n        ids: selectedRowKeys,\n      },\n    })\n  }\n\n  return (\n    <Page inner>\n      <Filter {...filterProps} />\n      <List {...listProps} />\n      {modalVisible && <Modal {...modalProps} />}\n    </Page>\n  )\n}\n\nUser.propTypes = {\n  secUser: PropTypes.object,\n  location: PropTypes.object,\n  dispatch: PropTypes.func,\n  loading: PropTypes.object,\n}\n\nexport default connect(({ secUser }) => ({ secUser}))(User)\n```\n- **connect方法将组件与数据关联在一起**\n`export default connect(({ secUser }) => ({ secUser}))(User)`\n- **secUser 必须与对应 models 里面定义的 namespace 字段一致**\n\n- **组件中发起请求调用 dispatch**\n```\ntype 字段对应 models 中 effects 和 reducers 对应方法\npayload 为传参对象\n```\n\n[尊重原创，感谢原创分享](https://www.jianshu.com/p/6d4c70ef63be)","slug":"dva入门开发的小总结","published":1,"updated":"2018-02-07T03:28:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmi001elxndgv4ka8yq","content":"<h2 id=\"dva入门开发的小总结\"><a href=\"#dva入门开发的小总结\" class=\"headerlink\" title=\"dva入门开发的小总结\"></a>dva入门开发的小总结</h2><p><code>dva 是对 redux 的一层浅封装，基于 react 语言，实现前端代码的分层</code></p>\n<h5 id=\"一般会分为3层：\"><a href=\"#一般会分为3层：\" class=\"headerlink\" title=\"一般会分为3层：\"></a>一般会分为3层：</h5><ol>\n<li>component：组件渲染、展示页面</li>\n<li>models：数据组装、处理</li>\n<li>services：接口调用、拿数据</li>\n</ol>\n<h5 id=\"框架主要构成模块：\"><a href=\"#框架主要构成模块：\" class=\"headerlink\" title=\"框架主要构成模块：\"></a>框架主要构成模块：</h5><a id=\"more\"></a>\n<p><strong>1. <code>router.js</code> 文件中配置路由，指定具体路径所要加载的 views 和 models</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: &apos;/security/users&apos;,</span><br><span class=\"line\">    models: () =&gt; [import(&apos;./models/security/user&apos;)],</span><br><span class=\"line\">    component: () =&gt; import(&apos;./views/security/user/&apos;),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. services</strong></p>\n<p><code>.roadhogrc.js</code>文件中配置好代理请求地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">    &quot;/api/v1/weather&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;https://api.seniverse.com/&quot;,</span><br><span class=\"line\">      &quot;changeOrigin&quot;: true,</span><br><span class=\"line\">      &quot;pathRewrite&quot;: &#123; &quot;^/api/v1/weather&quot; : &quot;/v3/weather&quot; &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;/services&quot;: &#123;</span><br><span class=\"line\">        &quot;target&quot;: &quot;http://ip地址:8080/&quot;,</span><br><span class=\"line\">        &quot;changeOrigin&quot;: true,</span><br><span class=\"line\">        &quot;pathRewrite&quot;: &#123; &quot;^/services&quot; : &quot;/services&quot; &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<p><code>serviecs/user.js</code>中定义好接口，获取原始数据。</p>\n<p>对于自定义方法，提供 url、method、data（可选），返回 request 封装好的 http 请求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export async function query(&#123;page = 1 , pageSize = 10 , ...qs&#125;) &#123;</span><br><span class=\"line\">    return user.listPage(page,pageSize,qs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function get(&#123;id&#125;) &#123;</span><br><span class=\"line\">    return user.get(id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function create (params) &#123;</span><br><span class=\"line\">    return user.create(params);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function update (params) &#123;</span><br><span class=\"line\">    return user.update(params);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 用户设置 自定义方法</span><br><span class=\"line\">//修改用户</span><br><span class=\"line\">export async function modify(payload) &#123;</span><br><span class=\"line\">    return request(&#123;</span><br><span class=\"line\">        url: `$&#123;apiPrefix&#125;/security/user/modify`,</span><br><span class=\"line\">        method: &apos;put&apos;,</span><br><span class=\"line\">        data: payload</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3. models</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pathToRegexp from &apos;path-to-regexp&apos;</span><br><span class=\"line\">import modelExtend from &apos;dva-model-extend&apos;</span><br><span class=\"line\">import * as user from &apos;services/security/user&apos;</span><br><span class=\"line\">import &#123; pageModel &#125; from &apos;models/common&apos;</span><br><span class=\"line\">import &#123; message &#125; from &apos;antd&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default modelExtend(pageModel, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  namespace: &apos;secUser&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">   currentItem: &#123;&#125;,</span><br><span class=\"line\">   modalVisible: false,</span><br><span class=\"line\">   modalType: &apos;create&apos;,</span><br><span class=\"line\">   selectedRowKeys: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 添加一个监听器，当pathname === &apos;/security/users&apos;时执行dispatch</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    setup (&#123; dispatch, history &#125;) &#123;</span><br><span class=\"line\">      history.listen((location) =&gt; &#123;</span><br><span class=\"line\">        if (location.pathname === &apos;/security/users&apos;) &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">              type: &apos;query&apos;,</span><br><span class=\"line\">              payload: location.query || &#123;&#125;,</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    * query (&#123;</span><br><span class=\"line\">      payload,</span><br><span class=\"line\">    &#125;, &#123; call, put &#125;) &#123;</span><br><span class=\"line\">      const result = yield call(user.query, payload)</span><br><span class=\"line\">      const &#123; success, message, status, data &#125; = result</span><br><span class=\"line\">      if (success) &#123;</span><br><span class=\"line\">        yield put(&#123;</span><br><span class=\"line\">          type: &apos;querySuccess&apos;,</span><br><span class=\"line\">          payload: data,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        throw result</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    * create (&#123; payload &#125;, &#123; call, put,select &#125;) &#123;</span><br><span class=\"line\">      const &#123;data&#125; = yield call(user.create, payload)</span><br><span class=\"line\">      message.info(&quot;新增成功&quot;);</span><br><span class=\"line\">      yield put(&#123; type: &apos;hideModal&apos; &#125;)</span><br><span class=\"line\">      const &#123; pagination: &#123; pageSize,current &#125; &#125; = yield select(_ =&gt; _.secUser)</span><br><span class=\"line\">      yield put(&#123; type: &apos;query&apos;, payload: &#123;pageSize, page:current &#125; &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    * update (&#123; payload &#125;, &#123; select, call, put &#125;) &#123;</span><br><span class=\"line\">      const id = yield select((&#123; secUser &#125;) =&gt; secUser.currentItem.id)</span><br><span class=\"line\">      const newUser = &#123; ...payload, id &#125;</span><br><span class=\"line\">      const &#123;data&#125; = yield call(user.update, newUser)</span><br><span class=\"line\">      message.info(&quot;修改成功&quot;);</span><br><span class=\"line\">      yield put(&#123; type: &apos;hideModal&apos; &#125;)</span><br><span class=\"line\">      const &#123; pagination: &#123; pageSize,current &#125; &#125; = yield select(_ =&gt; _.secUser)</span><br><span class=\"line\">      yield put(&#123; type: &apos;query&apos;, payload: &#123;pageSize, page:current &#125; &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">     showModal (state, &#123; payload &#125;) &#123;</span><br><span class=\"line\">      return &#123; ...state, ...payload, modalVisible: true &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    hideModal (state) &#123;</span><br><span class=\"line\">      return &#123; ...state, modalVisible: false &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><strong>query、update 前面的 * 号，表示这个方法是一个 Generator函数</strong></p>\n</li>\n<li><p><strong>subscriptions：用于添加一个监听器</strong></p>\n</li>\n<li><p><strong>effects：异步执行 dispatch，用于发起异步请求</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call 是调用执行一个函数 (调用service里面的方法)</span><br><span class=\"line\">put 则是相当于 dispatch 执行一个 action</span><br><span class=\"line\">select 则可以用来访问其它 model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>reducers：同步请求，主要用来改变state</strong></p>\n</li>\n</ul>\n<p><strong>4.component</strong></p>\n<p>==注意：组件入口文件一定要命名为 index.js ，否则会找不到==<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\">import &#123; routerRedux &#125; from &apos;dva/router&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;dva&apos;</span><br><span class=\"line\">import &#123; Row, Col, Button, Popconfirm &#125; from &apos;antd&apos;</span><br><span class=\"line\">import List from &apos;./List&apos;</span><br><span class=\"line\">import Filter from &apos;./Filter&apos;</span><br><span class=\"line\">import Modal from &apos;./Modal&apos;</span><br><span class=\"line\">import &#123; Page &#125; from &apos;components&apos;</span><br><span class=\"line\">import &#123; i18n &#125;  from &apos;utils&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const User = (&#123; location, dispatch, secUser, loading &#125;) =&gt; &#123;</span><br><span class=\"line\">  const &#123; dataSource, pagination, currentItem, modalVisible, modalType, selectedRowKeys &#125; = secUser</span><br><span class=\"line\">  const &#123; pageSize &#125; = 10</span><br><span class=\"line\"></span><br><span class=\"line\">  const modalProps = &#123;</span><br><span class=\"line\">    item: modalType === &apos;create&apos; ? &#123;&#125; : currentItem,</span><br><span class=\"line\">    visible: modalVisible,</span><br><span class=\"line\">    maskClosable: false,</span><br><span class=\"line\">    confirmLoading: loading.effects[&apos;secUser/update&apos;],</span><br><span class=\"line\">    title: modalType === &apos;create&apos; ? i18n(&apos;lab.user.create&apos;) : i18n(&apos;lab.user.update&apos;),</span><br><span class=\"line\">    wrapClassName: &apos;vertical-center-modal&apos;,</span><br><span class=\"line\">    onOk (data) &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: `secUser/$&#123;modalType&#125;`,</span><br><span class=\"line\">        payload: data,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onCancel () &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: &apos;secUser/hideModal&apos;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const listProps = &#123;</span><br><span class=\"line\">    dataSource,</span><br><span class=\"line\">    loading: loading.effects[&apos;secUser/query&apos;],</span><br><span class=\"line\">    pagination,</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    onChange (page) &#123;</span><br><span class=\"line\">      const &#123; query, pathname &#125; = location</span><br><span class=\"line\">      dispatch(routerRedux.push(&#123;</span><br><span class=\"line\">        pathname,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          ...query,</span><br><span class=\"line\">          page: page.current,</span><br><span class=\"line\">          pageSize: page.pageSize,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onDeleteItem (id) &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: &apos;secUser/delete&apos;,</span><br><span class=\"line\">        payload: id,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onEditItem (item) &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: &apos;secUser/showModal&apos;,</span><br><span class=\"line\">        payload: &#123;</span><br><span class=\"line\">          modalType: &apos;update&apos;,</span><br><span class=\"line\">          currentItem: item,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    rowSelection: &#123;</span><br><span class=\"line\">      selectedRowKeys,</span><br><span class=\"line\">      onChange: (keys) =&gt; &#123;</span><br><span class=\"line\">        dispatch(&#123;</span><br><span class=\"line\">          type: &apos;secUser/updateState&apos;,</span><br><span class=\"line\">          payload: &#123;</span><br><span class=\"line\">            selectedRowKeys: keys,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const filterProps = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleDeleteItems = () =&gt; &#123;</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">      type: &apos;secUser/multiDelete&apos;,</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        ids: selectedRowKeys,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Page inner&gt;</span><br><span class=\"line\">      &lt;Filter &#123;...filterProps&#125; /&gt;</span><br><span class=\"line\">      &lt;List &#123;...listProps&#125; /&gt;</span><br><span class=\"line\">      &#123;modalVisible &amp;&amp; &lt;Modal &#123;...modalProps&#125; /&gt;&#125;</span><br><span class=\"line\">    &lt;/Page&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.propTypes = &#123;</span><br><span class=\"line\">  secUser: PropTypes.object,</span><br><span class=\"line\">  location: PropTypes.object,</span><br><span class=\"line\">  dispatch: PropTypes.func,</span><br><span class=\"line\">  loading: PropTypes.object,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect((&#123; secUser &#125;) =&gt; (&#123; secUser&#125;))(User)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>connect方法将组件与数据关联在一起</strong><br><code>export default connect(({ secUser }) =&gt; ({ secUser}))(User)</code></li>\n<li><p><strong>secUser 必须与对应 models 里面定义的 namespace 字段一致</strong></p>\n</li>\n<li><p><strong>组件中发起请求调用 dispatch</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type 字段对应 models 中 effects 和 reducers 对应方法</span><br><span class=\"line\">payload 为传参对象</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/6d4c70ef63be\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"dva入门开发的小总结\"><a href=\"#dva入门开发的小总结\" class=\"headerlink\" title=\"dva入门开发的小总结\"></a>dva入门开发的小总结</h2><p><code>dva 是对 redux 的一层浅封装，基于 react 语言，实现前端代码的分层</code></p>\n<h5 id=\"一般会分为3层：\"><a href=\"#一般会分为3层：\" class=\"headerlink\" title=\"一般会分为3层：\"></a>一般会分为3层：</h5><ol>\n<li>component：组件渲染、展示页面</li>\n<li>models：数据组装、处理</li>\n<li>services：接口调用、拿数据</li>\n</ol>\n<h5 id=\"框架主要构成模块：\"><a href=\"#框架主要构成模块：\" class=\"headerlink\" title=\"框架主要构成模块：\"></a>框架主要构成模块：</h5>","more":"<p><strong>1. <code>router.js</code> 文件中配置路由，指定具体路径所要加载的 views 和 models</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: &apos;/security/users&apos;,</span><br><span class=\"line\">    models: () =&gt; [import(&apos;./models/security/user&apos;)],</span><br><span class=\"line\">    component: () =&gt; import(&apos;./views/security/user/&apos;),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. services</strong></p>\n<p><code>.roadhogrc.js</code>文件中配置好代理请求地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">    &quot;/api/v1/weather&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;https://api.seniverse.com/&quot;,</span><br><span class=\"line\">      &quot;changeOrigin&quot;: true,</span><br><span class=\"line\">      &quot;pathRewrite&quot;: &#123; &quot;^/api/v1/weather&quot; : &quot;/v3/weather&quot; &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;/services&quot;: &#123;</span><br><span class=\"line\">        &quot;target&quot;: &quot;http://ip地址:8080/&quot;,</span><br><span class=\"line\">        &quot;changeOrigin&quot;: true,</span><br><span class=\"line\">        &quot;pathRewrite&quot;: &#123; &quot;^/services&quot; : &quot;/services&quot; &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<p><code>serviecs/user.js</code>中定义好接口，获取原始数据。</p>\n<p>对于自定义方法，提供 url、method、data（可选），返回 request 封装好的 http 请求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export async function query(&#123;page = 1 , pageSize = 10 , ...qs&#125;) &#123;</span><br><span class=\"line\">    return user.listPage(page,pageSize,qs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function get(&#123;id&#125;) &#123;</span><br><span class=\"line\">    return user.get(id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function create (params) &#123;</span><br><span class=\"line\">    return user.create(params);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export async function update (params) &#123;</span><br><span class=\"line\">    return user.update(params);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 用户设置 自定义方法</span><br><span class=\"line\">//修改用户</span><br><span class=\"line\">export async function modify(payload) &#123;</span><br><span class=\"line\">    return request(&#123;</span><br><span class=\"line\">        url: `$&#123;apiPrefix&#125;/security/user/modify`,</span><br><span class=\"line\">        method: &apos;put&apos;,</span><br><span class=\"line\">        data: payload</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3. models</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pathToRegexp from &apos;path-to-regexp&apos;</span><br><span class=\"line\">import modelExtend from &apos;dva-model-extend&apos;</span><br><span class=\"line\">import * as user from &apos;services/security/user&apos;</span><br><span class=\"line\">import &#123; pageModel &#125; from &apos;models/common&apos;</span><br><span class=\"line\">import &#123; message &#125; from &apos;antd&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default modelExtend(pageModel, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  namespace: &apos;secUser&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">   currentItem: &#123;&#125;,</span><br><span class=\"line\">   modalVisible: false,</span><br><span class=\"line\">   modalType: &apos;create&apos;,</span><br><span class=\"line\">   selectedRowKeys: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 添加一个监听器，当pathname === &apos;/security/users&apos;时执行dispatch</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    setup (&#123; dispatch, history &#125;) &#123;</span><br><span class=\"line\">      history.listen((location) =&gt; &#123;</span><br><span class=\"line\">        if (location.pathname === &apos;/security/users&apos;) &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">              type: &apos;query&apos;,</span><br><span class=\"line\">              payload: location.query || &#123;&#125;,</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    * query (&#123;</span><br><span class=\"line\">      payload,</span><br><span class=\"line\">    &#125;, &#123; call, put &#125;) &#123;</span><br><span class=\"line\">      const result = yield call(user.query, payload)</span><br><span class=\"line\">      const &#123; success, message, status, data &#125; = result</span><br><span class=\"line\">      if (success) &#123;</span><br><span class=\"line\">        yield put(&#123;</span><br><span class=\"line\">          type: &apos;querySuccess&apos;,</span><br><span class=\"line\">          payload: data,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        throw result</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    * create (&#123; payload &#125;, &#123; call, put,select &#125;) &#123;</span><br><span class=\"line\">      const &#123;data&#125; = yield call(user.create, payload)</span><br><span class=\"line\">      message.info(&quot;新增成功&quot;);</span><br><span class=\"line\">      yield put(&#123; type: &apos;hideModal&apos; &#125;)</span><br><span class=\"line\">      const &#123; pagination: &#123; pageSize,current &#125; &#125; = yield select(_ =&gt; _.secUser)</span><br><span class=\"line\">      yield put(&#123; type: &apos;query&apos;, payload: &#123;pageSize, page:current &#125; &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    * update (&#123; payload &#125;, &#123; select, call, put &#125;) &#123;</span><br><span class=\"line\">      const id = yield select((&#123; secUser &#125;) =&gt; secUser.currentItem.id)</span><br><span class=\"line\">      const newUser = &#123; ...payload, id &#125;</span><br><span class=\"line\">      const &#123;data&#125; = yield call(user.update, newUser)</span><br><span class=\"line\">      message.info(&quot;修改成功&quot;);</span><br><span class=\"line\">      yield put(&#123; type: &apos;hideModal&apos; &#125;)</span><br><span class=\"line\">      const &#123; pagination: &#123; pageSize,current &#125; &#125; = yield select(_ =&gt; _.secUser)</span><br><span class=\"line\">      yield put(&#123; type: &apos;query&apos;, payload: &#123;pageSize, page:current &#125; &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">     showModal (state, &#123; payload &#125;) &#123;</span><br><span class=\"line\">      return &#123; ...state, ...payload, modalVisible: true &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    hideModal (state) &#123;</span><br><span class=\"line\">      return &#123; ...state, modalVisible: false &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><strong>query、update 前面的 * 号，表示这个方法是一个 Generator函数</strong></p>\n</li>\n<li><p><strong>subscriptions：用于添加一个监听器</strong></p>\n</li>\n<li><p><strong>effects：异步执行 dispatch，用于发起异步请求</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call 是调用执行一个函数 (调用service里面的方法)</span><br><span class=\"line\">put 则是相当于 dispatch 执行一个 action</span><br><span class=\"line\">select 则可以用来访问其它 model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>reducers：同步请求，主要用来改变state</strong></p>\n</li>\n</ul>\n<p><strong>4.component</strong></p>\n<p>==注意：组件入口文件一定要命名为 index.js ，否则会找不到==<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\">import &#123; routerRedux &#125; from &apos;dva/router&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;dva&apos;</span><br><span class=\"line\">import &#123; Row, Col, Button, Popconfirm &#125; from &apos;antd&apos;</span><br><span class=\"line\">import List from &apos;./List&apos;</span><br><span class=\"line\">import Filter from &apos;./Filter&apos;</span><br><span class=\"line\">import Modal from &apos;./Modal&apos;</span><br><span class=\"line\">import &#123; Page &#125; from &apos;components&apos;</span><br><span class=\"line\">import &#123; i18n &#125;  from &apos;utils&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const User = (&#123; location, dispatch, secUser, loading &#125;) =&gt; &#123;</span><br><span class=\"line\">  const &#123; dataSource, pagination, currentItem, modalVisible, modalType, selectedRowKeys &#125; = secUser</span><br><span class=\"line\">  const &#123; pageSize &#125; = 10</span><br><span class=\"line\"></span><br><span class=\"line\">  const modalProps = &#123;</span><br><span class=\"line\">    item: modalType === &apos;create&apos; ? &#123;&#125; : currentItem,</span><br><span class=\"line\">    visible: modalVisible,</span><br><span class=\"line\">    maskClosable: false,</span><br><span class=\"line\">    confirmLoading: loading.effects[&apos;secUser/update&apos;],</span><br><span class=\"line\">    title: modalType === &apos;create&apos; ? i18n(&apos;lab.user.create&apos;) : i18n(&apos;lab.user.update&apos;),</span><br><span class=\"line\">    wrapClassName: &apos;vertical-center-modal&apos;,</span><br><span class=\"line\">    onOk (data) &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: `secUser/$&#123;modalType&#125;`,</span><br><span class=\"line\">        payload: data,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onCancel () &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: &apos;secUser/hideModal&apos;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const listProps = &#123;</span><br><span class=\"line\">    dataSource,</span><br><span class=\"line\">    loading: loading.effects[&apos;secUser/query&apos;],</span><br><span class=\"line\">    pagination,</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    onChange (page) &#123;</span><br><span class=\"line\">      const &#123; query, pathname &#125; = location</span><br><span class=\"line\">      dispatch(routerRedux.push(&#123;</span><br><span class=\"line\">        pathname,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          ...query,</span><br><span class=\"line\">          page: page.current,</span><br><span class=\"line\">          pageSize: page.pageSize,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onDeleteItem (id) &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: &apos;secUser/delete&apos;,</span><br><span class=\"line\">        payload: id,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onEditItem (item) &#123;</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: &apos;secUser/showModal&apos;,</span><br><span class=\"line\">        payload: &#123;</span><br><span class=\"line\">          modalType: &apos;update&apos;,</span><br><span class=\"line\">          currentItem: item,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    rowSelection: &#123;</span><br><span class=\"line\">      selectedRowKeys,</span><br><span class=\"line\">      onChange: (keys) =&gt; &#123;</span><br><span class=\"line\">        dispatch(&#123;</span><br><span class=\"line\">          type: &apos;secUser/updateState&apos;,</span><br><span class=\"line\">          payload: &#123;</span><br><span class=\"line\">            selectedRowKeys: keys,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const filterProps = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const handleDeleteItems = () =&gt; &#123;</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">      type: &apos;secUser/multiDelete&apos;,</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        ids: selectedRowKeys,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Page inner&gt;</span><br><span class=\"line\">      &lt;Filter &#123;...filterProps&#125; /&gt;</span><br><span class=\"line\">      &lt;List &#123;...listProps&#125; /&gt;</span><br><span class=\"line\">      &#123;modalVisible &amp;&amp; &lt;Modal &#123;...modalProps&#125; /&gt;&#125;</span><br><span class=\"line\">    &lt;/Page&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.propTypes = &#123;</span><br><span class=\"line\">  secUser: PropTypes.object,</span><br><span class=\"line\">  location: PropTypes.object,</span><br><span class=\"line\">  dispatch: PropTypes.func,</span><br><span class=\"line\">  loading: PropTypes.object,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect((&#123; secUser &#125;) =&gt; (&#123; secUser&#125;))(User)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>connect方法将组件与数据关联在一起</strong><br><code>export default connect(({ secUser }) =&gt; ({ secUser}))(User)</code></li>\n<li><p><strong>secUser 必须与对应 models 里面定义的 namespace 字段一致</strong></p>\n</li>\n<li><p><strong>组件中发起请求调用 dispatch</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type 字段对应 models 中 effects 和 reducers 对应方法</span><br><span class=\"line\">payload 为传参对象</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/6d4c70ef63be\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>"},{"title":"使用PropTypes进行类型检查","date":"2017-10-12T11:50:19.000Z","_content":"\n## 使用 PropTypes 进行类型检查\n\n注意： 从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 [prop-types库](https://www.npmjs.com/package/prop-types) 来定义contextTypes。\n\n我们提供[一个 codemod 脚本](http://www.css88.com/blog/2017/04/07/react-v15.5.0.html#migrating-from-react.proptypes)来自动转换。\n\n随着应用规模的提升，你可以通过类型检测捕获更多的bug。对于部分应用，你可能需要使用类似于 [Flow](https://flowtype.org/) 或者 [TypeScript](https://www.typescriptlang.org/) 等 JavaScript 扩展来对你整个应用类型进行类型检测。但即使你不使用这些，React 内置了类型检测的功能。要在组件中进行类型检测，你可以赋值 `propTypes` 属性。\n```\nimport PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};\n```\n\n<!--more-->\n\n`PropTypes` 输出了一系列的验证器，可以用来确保接收到的参数是有效的。例如，我们可以使用`PropTypes.string` 语句。当给 prop 传递了一个不正确的值时，JavaScript控制台将会显示一条警告。出于性能的原因，`propTypes` 仅在开发模式中检测。\n\n#### PropTypes\n这里是一个示例记录提供的不同的验证器：\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // 你可以声明一个 prop 是一个特定的 JS 原始类型。\n  // 默认情况下，这些都是可选的。\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 你也可以声明一个 prop 是类的一个实例。\n  // 使用 JS 的 instanceof 运算符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以声明 prop 是特定的值，类似于枚举\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 一个对象可以是多种类型其中之一\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 一个某种类型的数组\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 属性值为某种类型的对象\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 一个特定形式的对象\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任何数据类型的值\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，\n  // 因为这不会在 `oneOfType` 类型的验证器中起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。\n  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，\n  // 以及当前元素的键值。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n#### 要求单独的 Child\n使用 `PropTypes.element` ，你可以指定仅将单一子元素传递给组件，作为子节点。\n```\nimport PropTypes from 'prop-types';\n\nclass MyComponent extends React.Component {\n  render() {\n    // 这里必须是一个元素，否则会发出警告。\n    const children = this.props.children;\n    return (\n      <div>\n        {children}\n      </div>\n    );\n  }\n}\n\nMyComponent.propTypes = {\n  children: PropTypes.element.isRequired\n};\n```\n\n#### 默认的 prop 值\n你可以通过赋值特定的 `defaultProps` 属性为 `props` 定义默认值：\n\n```\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\n// 指定 props 的默认值：\nGreeting.defaultProps = {\n  name: 'Stranger'\n};\n\n// 渲染为 \"Hello, Stranger\":\nReactDOM.render(\n  <Greeting />,\n  document.getElementById('example')\n);\n```\n\n如果你在使用像 [transform-class-properties](https://babeljs.io/docs/plugins/transform-class-properties/) 的 Babel 转换器，你也可以在 React 组件类中声明 `defaultProps` 作为静态属性。这个语法还没有最终通过，在浏览器中需要一步编译工作。更多信息，查看[类字段提议](https://github.com/tc39/proposal-class-fields)。\n\n```\nclass Greeting extends React.Component {\n  static defaultProps = {\n    name: 'stranger'\n  }\n\n  render() {\n    return (\n      <div>Hello, {this.props.name}</div>\n    )\n  }\n}\n```\n\n如果父组件没有为 `this.props.name` 传值，`defaultProps` 会给其一个默认值。`propTypes` 的类型检测是在`defaultProps` 解析之后发生的，因此也会对默认属性 `defaultProps` 进行类型检测。\n\n[参考文章](http://www.css88.com/react/docs/typechecking-with-proptypes.html)","source":"_posts/使用PropTypes进行类型检查.md","raw":"---\ntitle: 使用PropTypes进行类型检查\ndate: 2017-10-12 19:50:19\ncategories: React\ntags: PropTypes\n---\n\n## 使用 PropTypes 进行类型检查\n\n注意： 从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 [prop-types库](https://www.npmjs.com/package/prop-types) 来定义contextTypes。\n\n我们提供[一个 codemod 脚本](http://www.css88.com/blog/2017/04/07/react-v15.5.0.html#migrating-from-react.proptypes)来自动转换。\n\n随着应用规模的提升，你可以通过类型检测捕获更多的bug。对于部分应用，你可能需要使用类似于 [Flow](https://flowtype.org/) 或者 [TypeScript](https://www.typescriptlang.org/) 等 JavaScript 扩展来对你整个应用类型进行类型检测。但即使你不使用这些，React 内置了类型检测的功能。要在组件中进行类型检测，你可以赋值 `propTypes` 属性。\n```\nimport PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};\n```\n\n<!--more-->\n\n`PropTypes` 输出了一系列的验证器，可以用来确保接收到的参数是有效的。例如，我们可以使用`PropTypes.string` 语句。当给 prop 传递了一个不正确的值时，JavaScript控制台将会显示一条警告。出于性能的原因，`propTypes` 仅在开发模式中检测。\n\n#### PropTypes\n这里是一个示例记录提供的不同的验证器：\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // 你可以声明一个 prop 是一个特定的 JS 原始类型。\n  // 默认情况下，这些都是可选的。\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 你也可以声明一个 prop 是类的一个实例。\n  // 使用 JS 的 instanceof 运算符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以声明 prop 是特定的值，类似于枚举\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 一个对象可以是多种类型其中之一\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 一个某种类型的数组\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 属性值为某种类型的对象\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 一个特定形式的对象\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任何数据类型的值\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，\n  // 因为这不会在 `oneOfType` 类型的验证器中起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。\n  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，\n  // 以及当前元素的键值。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n#### 要求单独的 Child\n使用 `PropTypes.element` ，你可以指定仅将单一子元素传递给组件，作为子节点。\n```\nimport PropTypes from 'prop-types';\n\nclass MyComponent extends React.Component {\n  render() {\n    // 这里必须是一个元素，否则会发出警告。\n    const children = this.props.children;\n    return (\n      <div>\n        {children}\n      </div>\n    );\n  }\n}\n\nMyComponent.propTypes = {\n  children: PropTypes.element.isRequired\n};\n```\n\n#### 默认的 prop 值\n你可以通过赋值特定的 `defaultProps` 属性为 `props` 定义默认值：\n\n```\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\n// 指定 props 的默认值：\nGreeting.defaultProps = {\n  name: 'Stranger'\n};\n\n// 渲染为 \"Hello, Stranger\":\nReactDOM.render(\n  <Greeting />,\n  document.getElementById('example')\n);\n```\n\n如果你在使用像 [transform-class-properties](https://babeljs.io/docs/plugins/transform-class-properties/) 的 Babel 转换器，你也可以在 React 组件类中声明 `defaultProps` 作为静态属性。这个语法还没有最终通过，在浏览器中需要一步编译工作。更多信息，查看[类字段提议](https://github.com/tc39/proposal-class-fields)。\n\n```\nclass Greeting extends React.Component {\n  static defaultProps = {\n    name: 'stranger'\n  }\n\n  render() {\n    return (\n      <div>Hello, {this.props.name}</div>\n    )\n  }\n}\n```\n\n如果父组件没有为 `this.props.name` 传值，`defaultProps` 会给其一个默认值。`propTypes` 的类型检测是在`defaultProps` 解析之后发生的，因此也会对默认属性 `defaultProps` 进行类型检测。\n\n[参考文章](http://www.css88.com/react/docs/typechecking-with-proptypes.html)","slug":"使用PropTypes进行类型检查","published":1,"updated":"2018-02-07T10:55:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmk001glxnd28nffvsm","content":"<h2 id=\"使用-PropTypes-进行类型检查\"><a href=\"#使用-PropTypes-进行类型检查\" class=\"headerlink\" title=\"使用 PropTypes 进行类型检查\"></a>使用 PropTypes 进行类型检查</h2><p>注意： 从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 <a href=\"https://www.npmjs.com/package/prop-types\" target=\"_blank\" rel=\"noopener\">prop-types库</a> 来定义contextTypes。</p>\n<p>我们提供<a href=\"http://www.css88.com/blog/2017/04/07/react-v15.5.0.html#migrating-from-react.proptypes\" target=\"_blank\" rel=\"noopener\">一个 codemod 脚本</a>来自动转换。</p>\n<p>随着应用规模的提升，你可以通过类型检测捕获更多的bug。对于部分应用，你可能需要使用类似于 <a href=\"https://flowtype.org/\" target=\"_blank\" rel=\"noopener\">Flow</a> 或者 <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">TypeScript</a> 等 JavaScript 扩展来对你整个应用类型进行类型检测。但即使你不使用这些，React 内置了类型检测的功能。要在组件中进行类型检测，你可以赋值 <code>propTypes</code> 属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeting extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Greeting.propTypes = &#123;</span><br><span class=\"line\">  name: PropTypes.string</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><code>PropTypes</code> 输出了一系列的验证器，可以用来确保接收到的参数是有效的。例如，我们可以使用<code>PropTypes.string</code> 语句。当给 prop 传递了一个不正确的值时，JavaScript控制台将会显示一条警告。出于性能的原因，<code>propTypes</code> 仅在开发模式中检测。</p>\n<h4 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h4><p>这里是一个示例记录提供的不同的验证器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  // 你可以声明一个 prop 是一个特定的 JS 原始类型。</span><br><span class=\"line\">  // 默认情况下，这些都是可选的。</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。</span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个 React 元素。</span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以声明一个 prop 是类的一个实例。</span><br><span class=\"line\">  // 使用 JS 的 instanceof 运算符。</span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你可以声明 prop 是特定的值，类似于枚举</span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个对象可以是多种类型其中之一</span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个某种类型的数组</span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 属性值为某种类型的对象</span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个特定形式的对象</span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你可以使用 `isRequired&apos; 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。</span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 任何数据类型的值</span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，</span><br><span class=\"line\">  // 因为这不会在 `oneOfType` 类型的验证器中起作用。</span><br><span class=\"line\">  customProp: function(props, propName, componentName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(props[propName])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。</span><br><span class=\"line\">  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，</span><br><span class=\"line\">  // 以及当前元素的键值。</span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(propValue[key])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"要求单独的-Child\"><a href=\"#要求单独的-Child\" class=\"headerlink\" title=\"要求单独的 Child\"></a>要求单独的 Child</h4><p>使用 <code>PropTypes.element</code> ，你可以指定仅将单一子元素传递给组件，作为子节点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyComponent extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 这里必须是一个元素，否则会发出警告。</span><br><span class=\"line\">    const children = this.props.children;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;children&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  children: PropTypes.element.isRequired</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"默认的-prop-值\"><a href=\"#默认的-prop-值\" class=\"headerlink\" title=\"默认的 prop 值\"></a>默认的 prop 值</h4><p>你可以通过赋值特定的 <code>defaultProps</code> 属性为 <code>props</code> 定义默认值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Greeting extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 指定 props 的默认值：</span><br><span class=\"line\">Greeting.defaultProps = &#123;</span><br><span class=\"line\">  name: &apos;Stranger&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染为 &quot;Hello, Stranger&quot;:</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Greeting /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>如果你在使用像 <a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\" target=\"_blank\" rel=\"noopener\">transform-class-properties</a> 的 Babel 转换器，你也可以在 React 组件类中声明 <code>defaultProps</code> 作为静态属性。这个语法还没有最终通过，在浏览器中需要一步编译工作。更多信息，查看<a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"noopener\">类字段提议</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Greeting extends React.Component &#123;</span><br><span class=\"line\">  static defaultProps = &#123;</span><br><span class=\"line\">    name: &apos;stranger&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;Hello, &#123;this.props.name&#125;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果父组件没有为 <code>this.props.name</code> 传值，<code>defaultProps</code> 会给其一个默认值。<code>propTypes</code> 的类型检测是在<code>defaultProps</code> 解析之后发生的，因此也会对默认属性 <code>defaultProps</code> 进行类型检测。</p>\n<p><a href=\"http://www.css88.com/react/docs/typechecking-with-proptypes.html\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用-PropTypes-进行类型检查\"><a href=\"#使用-PropTypes-进行类型检查\" class=\"headerlink\" title=\"使用 PropTypes 进行类型检查\"></a>使用 PropTypes 进行类型检查</h2><p>注意： 从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 <a href=\"https://www.npmjs.com/package/prop-types\" target=\"_blank\" rel=\"noopener\">prop-types库</a> 来定义contextTypes。</p>\n<p>我们提供<a href=\"http://www.css88.com/blog/2017/04/07/react-v15.5.0.html#migrating-from-react.proptypes\" target=\"_blank\" rel=\"noopener\">一个 codemod 脚本</a>来自动转换。</p>\n<p>随着应用规模的提升，你可以通过类型检测捕获更多的bug。对于部分应用，你可能需要使用类似于 <a href=\"https://flowtype.org/\" target=\"_blank\" rel=\"noopener\">Flow</a> 或者 <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">TypeScript</a> 等 JavaScript 扩展来对你整个应用类型进行类型检测。但即使你不使用这些，React 内置了类型检测的功能。要在组件中进行类型检测，你可以赋值 <code>propTypes</code> 属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeting extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Greeting.propTypes = &#123;</span><br><span class=\"line\">  name: PropTypes.string</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>","more":"<p><code>PropTypes</code> 输出了一系列的验证器，可以用来确保接收到的参数是有效的。例如，我们可以使用<code>PropTypes.string</code> 语句。当给 prop 传递了一个不正确的值时，JavaScript控制台将会显示一条警告。出于性能的原因，<code>propTypes</code> 仅在开发模式中检测。</p>\n<h4 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h4><p>这里是一个示例记录提供的不同的验证器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  // 你可以声明一个 prop 是一个特定的 JS 原始类型。</span><br><span class=\"line\">  // 默认情况下，这些都是可选的。</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。</span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个 React 元素。</span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以声明一个 prop 是类的一个实例。</span><br><span class=\"line\">  // 使用 JS 的 instanceof 运算符。</span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你可以声明 prop 是特定的值，类似于枚举</span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个对象可以是多种类型其中之一</span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个某种类型的数组</span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 属性值为某种类型的对象</span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个特定形式的对象</span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你可以使用 `isRequired&apos; 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。</span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 任何数据类型的值</span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，</span><br><span class=\"line\">  // 因为这不会在 `oneOfType` 类型的验证器中起作用。</span><br><span class=\"line\">  customProp: function(props, propName, componentName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(props[propName])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。</span><br><span class=\"line\">  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，</span><br><span class=\"line\">  // 以及当前元素的键值。</span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(propValue[key])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"要求单独的-Child\"><a href=\"#要求单独的-Child\" class=\"headerlink\" title=\"要求单独的 Child\"></a>要求单独的 Child</h4><p>使用 <code>PropTypes.element</code> ，你可以指定仅将单一子元素传递给组件，作为子节点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyComponent extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 这里必须是一个元素，否则会发出警告。</span><br><span class=\"line\">    const children = this.props.children;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;children&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  children: PropTypes.element.isRequired</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"默认的-prop-值\"><a href=\"#默认的-prop-值\" class=\"headerlink\" title=\"默认的 prop 值\"></a>默认的 prop 值</h4><p>你可以通过赋值特定的 <code>defaultProps</code> 属性为 <code>props</code> 定义默认值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Greeting extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 指定 props 的默认值：</span><br><span class=\"line\">Greeting.defaultProps = &#123;</span><br><span class=\"line\">  name: &apos;Stranger&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 渲染为 &quot;Hello, Stranger&quot;:</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Greeting /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>如果你在使用像 <a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\" target=\"_blank\" rel=\"noopener\">transform-class-properties</a> 的 Babel 转换器，你也可以在 React 组件类中声明 <code>defaultProps</code> 作为静态属性。这个语法还没有最终通过，在浏览器中需要一步编译工作。更多信息，查看<a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"noopener\">类字段提议</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Greeting extends React.Component &#123;</span><br><span class=\"line\">  static defaultProps = &#123;</span><br><span class=\"line\">    name: &apos;stranger&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;Hello, &#123;this.props.name&#125;&lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果父组件没有为 <code>this.props.name</code> 传值，<code>defaultProps</code> 会给其一个默认值。<code>propTypes</code> 的类型检测是在<code>defaultProps</code> 解析之后发生的，因此也会对默认属性 <code>defaultProps</code> 进行类型检测。</p>\n<p><a href=\"http://www.css88.com/react/docs/typechecking-with-proptypes.html\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>"},{"title":"前端常见跨域解决方案","date":"2018-03-08T11:57:12.000Z","_content":"## 前端常见跨域解决方案（全）\n\n#### 什么是跨域？\n\n跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。\n\n##### 广义的跨域：\n\n1. 资源跳转： A链接、重定向、表单提交\n2. 资源嵌入： `<link>、<script>、<img>、<frame>`等dom标签， 还有样式中background:url()、 @font-face()等文件外链\n3. 脚本请求： js发起的ajax请求、dom和js对象的跨域操作等\n\n其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。\n\n#### 什么是同源策略？\n\n同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。\n\n##### 同源策略限制以下几种行为：\n\n1. Cookie、LocalStorage 和 IndexDB 无法读取\n2. DOM 和 js对象无法获得\n3. AJAX 请求不能发送跨域方法\n\n<!--more-->\n\n#### 常见跨域场景\n\n![常见跨域场景](前端常见跨域解决方案/常见跨域场景.png)\n\n#### 前端常见跨域解决方案（全）\n\n##### 跨域解决方案\n\n1. 通过jsonp跨域\n2. document.domain + iframe跨域\n3. location.hash + iframe\n4. window.name + iframe跨域\n5. postMessage跨域\n6. 跨域资源共享（CORS）\n7. nginx代理跨域\n8. nodejs中间件代理跨域\n9. WebSocket协议跨域\n\n##### 一、 通过jsonp跨域\n\n通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。\n\n1.原生实现：\n\n```\n<script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript'; // 传参并指定回调执行函数为onBack\n    script.src = 'http://www.domain2.com:8080/login?user=admin&callback=onBack';\n    document.head.appendChild(script); // 回调执行函数\n    function onBack(res) {\n        alert(JSON.stringify(res));\n    }\n</script>\n```\n\n服务端返回如下（返回时即执行全局函数）：\n\n```\nonBack({\"status\": true, \"user\": \"admin\"})\n```\n\n2.jquery ajax：\n\n```\n$.ajax({\n    url: 'http://www.domain2.com:8080/login',\n    type: 'get',\n    dataType: 'jsonp', // 请求方式为jsonp\n    jsonpCallback: \"onBack\", // 自定义回调函数名\n    data: {}\n});\n```\n\n3.vue.js：\n\n```\nthis.$http.jsonp('http://www.domain2.com:8080/login',{ params: {}, jsonp: 'onBack'}).then((res) =>{ console.log(res); })\n```\n\n后端node.js代码示例：\n\n```\nvar querystring = require('querystring');\nvar http = require('http');\nvar server = http.createServer();\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.split('?')[1]);\n    var fn = params.callback; // jsonp返回设置\n    res.writeHead(200, {'Content-Type': 'text/javascript' });\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n    res.end();\n\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n** jsonp缺点：只能实现get一种请求。 **\n\n##### 二、 document.domain + iframe跨域\n\n** 此方案仅限主域相同，子域不同的跨域应用场景。 **\n\n实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。\n\n1.父窗口：(http://www.domain.com/a.html)\n\n```\n<iframe id=\"iframe\"src=\"http://child.domain.com/b.html\"></iframe>\n<script>document.domain = 'domain.com'; var user = 'admin';</script>\n```\n\n2.子窗口：(http://child.domain.com/b.html)\n\n```\n<script>\n    document.domain = 'domain.com'; // 获取父窗口中变量\n    alert('get js data from parent ---> '+ window.parent.user);\n</script>\n```\n\n##### 三、 location.hash + iframe跨域\n\n实现原理： a欲与b跨域相互通信，通过中间页c来实现。\n\n三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。\n\n具体实现：A域：a.html -> B域：b.html -> A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。\n\n1.a.html：(http://www.domain1.com/a.html)\n\n```\n<iframe id=\"iframe\"src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe'); // 向b.html传hash值\n\n    setTimeout(function() {\n        iframe.src = iframe.src + '#user=admin';\n    }, 1000); // 开放给同域c.html的回调方法\n\n    function onCallback(res) {\n        alert('data from c.html ---> ' + res);\n    }\n</script>\n```\n\n2.b.html：(http://www.domain2.com/b.html)\n\n```\n<iframe id=\"iframe\"src=\"http://www.domain1.com/c.html\" style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe'); // 监听a.html传来的hash值，再传给c.html window.onhashchange = function () {\n        iframe.src = iframe.src + location.hash;\n    };\n</script>\n```\n\n3.c.html：(http://www.domain1.com/c.html)\n\n```\n<script>\n    // 监听b.html传来的hash值\n    window.onhashchange = function () {\n        // 再通过操作同域a.html的js回调，将结果传回\n        window.parent.parent.onCallback('hello: '+ location.hash.replace('#user=', ''));\n    };\n</script>\n```\n\n##### 四、 window.name + iframe跨域\n\nwindow.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。\n\n1.a.html：(http://www.domain1.com/a.html)\n\n```\nvar proxy = function(url, callback){\n    var state = 0;\n    var iframe = document.createElement('iframe'); // 加载跨域页面\n    iframe.src = url; // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n    iframe.onload = function() {\n        if (state === 1) {\n            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据\n            callback(iframe.contentWindow.name);\n            destoryFrame();\n        } else if (state === 0) {\n            // 第1次onload(跨域页)成功后，切换到同域代理页面\n            iframe.contentWindow.location = 'http://www.domain1.com/proxy.html';\n            state = 1;\n        }\n    };\n    document.body.appendChild(iframe); // 获取数据以后销毁这个iframe， 释放内存；这也保证了安全（不被其他域frame js访问）\n    function destoryFrame() {\n        iframe.contentWindow.document.write('');\n        iframe.contentWindow.close();\n        document.body.removeChild(iframe);\n    }};\n    // 请求跨域b页面数据proxy\n    ('http://www.domain2.com/b.html',function(data) {\n        alert(data);\n    });\n```\n\n2.proxy.html：(http://www.domain1.com/proxy.html)\n\n中间代理页，与a.html同域，内容为空即可。\n\n3.b.html：(http://www.domain2.com/b.html)\n\n```\n<script> window.name = 'This is domain2 data!';</script>\n```\n\n总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n##### 五、 postMessage跨域\n\npostMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：\n\na. 页面和其打开的新窗口的数据传递\n\nb. 多窗口之间消息传递\n\nc. 页面与嵌套的iframe消息传递\n\nd. 上面三个场景的跨域数据传递\n\n用法：postMessage(data,origin)方法接受两个参数\n\ndata： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。\n\norigin： 协议+主机+端口号，也可以设置为\"*\"，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为\"/\"。\n\n1.a.html：(http://www.domain1.com/a.html)\n\n```\n<iframe id=\"iframe\"src=\"http://www.domain2.com/b.html\"style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe');\n    iframe.onload = function(){\n        var data = { name: 'aym' }; // 向domain2传送跨域数据\n        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');\n    };\n    // 接受domain2返回数据\n    window.addEventListener ('message', function(e) {\n        alert('data from domain2 ---> ' + e.data);\n    }, false);\n</script>\n```\n\n2.b.html：(http://www.domain2.com/b.html)\n\n```\n<script>\n    // 接收domain1的数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain1 ---> ' + e.data);\n        var data = JSON.parse(e.data);\n        if (data) {\n            data.number = 16; // 处理后再发回domain1\n            window.parent.postMessage(JSON.stringify(data),'http://www.domain1.com');\n        }\n    }, false);\n</script>\n```\n\n##### 六、 跨域资源共享（CORS）\n\n普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。\n\n需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。\n\n目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。\n\n##### 1、 前端设置：\n\n1.原生ajax\n\n`// 前端设置是否带cookiexhr.withCredentials = true;`\n\n示例代码：\n\n```\nvar xhr = new XMLHttpRequest();// IE8/9需用window.XDomainRequest兼容\n// 前端设置是否带cookiexhr.withCredentials = true;\nxhr.open('post','http://www.domain2.com:8080/login', true);\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nxhr.send('user=admin');\nxhr.onreadystatechange = function(){\n    if (xhr.readyState == 4 && xhr.status == 200){\n        alert(xhr.responseText);\n    }\n};\n```\n\n2.jQuery ajax\n\n```\n$.ajax({\n    ...\n    xhrFields: {\n        withCredentials: true // 前端设置是否带cookie\n    },\n    crossDomain: true, // 会让请求头中包含跨域的额外信息，但不会含cookie\n    ...\n});\n```\n\n3.vue框架\n\n在vue-resource封装的ajax组件中加入以下代码：\n\n```\nVue.http.options.credentials = true\n```\n\n##### 2、 服务端设置：\n\n若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。\n\n1.Java后台：\n\n```\n/* * 导入包：\nimport javax.servlet.http.HttpServletResponse;\n* 接口参数中定义：\nHttpServletResponse response\n*/response.setHeader (\"Access-Control-Allow-Origin\",\"http://www.domain1.com\");\n// 若有端口需写全（协议+域名+端口）\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n```\n\n2.Nodejs后台示例：\n\n```\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\nserver.on('request', function(req, res){\n    var postData = ''; // 数据块接收中\n    req.addListener('data', function(chunk) { postData += chunk; }); // 数据接收完毕 req.addListener('end',function(){ postData = qs.parse(postData); // 跨域后台设置 res.writeHead(200, { 'Access-Control-Allow-Credentials': 'true', // 后端允许发送Cookie 'Access-Control-Allow-Origin':'http://www.domain1.com',//允许访问的域（协议+域名+端口）\n    'Set-Cookie':'l=a123456;Path=/;Domain=www.domain2.com; HttpOnly' // HttpOnly:脚本无法读取cookie\n});\nres.write(JSON.stringify(postData)); res.end(); });});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n#### 七、 nginx代理跨域\n\n1.nginx配置解决iconfont跨域\n\n浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。\n\n`location / { add_header Access-Control-Allow-Origin *;}`\n\n2.nginx反向代理接口跨域\n\n跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。\n\n实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。\n\n##### nginx具体配置：\n\n```\n#proxy服务器server {\n    listen 81;\n    server_name www.domain1.com;\n    location / {\n        proxy_pass\n        http://www.domain2.com:8080;\n        #反向代理\n            proxy_cookie_domain\n                www.domain2.com www.domain1.com;\n        #修改cookie里域名\n        index index.html index.htm;\n        # 当用webpack-dev-server等中间件代理接口访问nignx时,此时无浏览器参与, 故没有同源限制,下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin\n            http://www.domain1.com;\n        #当前端只跨域不带cookie时， 可为*\n            add_header Access-Control-Allow-Credentials true;\n    }}\n```\n\n1.前端代码示例：\n\n```\nvar xhr = new XMLHttpRequest();// 前端开关：\n浏览器是否读写cookiexhr.withCredentials = true;\n// 访问nginx中的代理服务器\nxhr.open('get', 'http://www.domain1.com:81/?user=admin', true);\nxhr.send();\n```\n\n2.Nodejs后台示例：\n\n```\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.substring(2)); // 向前台写cookie\n    res.writeHead(200, { 'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly' // HttpOnly:脚本无法读取 });\n    res.write(JSON.stringify(params));\n    res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n#### 八、 Nodejs中间件代理跨域\n\nnode中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。\n\n##### 1、 非vue框架的跨域（2次跨域）\n\n利用node + express + http-proxy-middleware搭建一个proxy服务器。\n\n1.前端代码示例：\n\n```\nvar xhr = new XMLHttpRequest();\n// 前端开关：\n浏览器是否读写cookiexhr.withCredentials = true;\n// 访问http-proxy-middleware代理服务器\nxhr.open('get', 'http://www.domain1.com:3000/login? user=admin', true);\nxhr.send();\n```\n\n2.中间件服务器：\n\n```\nvar express = require('express');\nvar proxy = require('http-proxy-middleware');\nvar app = express();\napp.use('/', proxy({ // 代理跨域目标接口\n    target: 'http://www.domain2.com:8080',\n    changeOrigin: true,\n    // 修改响应头信息，实现跨域并允许带cookie\n    onProxyRes: function(proxyRes, req, res) {\n        res.header('Access-Control-Allow-Origin', 'http://www.domain1.com'); res.header('Access-Control-Allow-Credentials', 'true');\n\n    },\n    // 修改响应信息中的cookie域名\n    cookieDomainRewrite: 'www.domain1.com'\n    // 可以为false，表示不修改\n}));\napp.listen(3000);\nconsole.log(' Proxy server is listen at port 3000...');\n```\n\n3.Nodejs后台同（六：nginx）\n\n\n##### 2、 vue框架的跨域（1次跨域）\n\n利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。\n\nwebpack.config.js部分配置：\n\n\n```\nmodule.exports = {\n    entry: {},\n    module: {},\n    ...\n    devServer: {\n        historyApiFallback: true,\n        proxy: [{\n            context: '/login',\n            target: 'http://www.domain2.com:8080', // 代理跨域目标接口\n            changeOrigin: true,\n            secure: false,\n            // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com' // 可以为false，表示不修改\n\n        }],\n        noInfo: true\n    }}\n```\n\n#### 九、 WebSocket协议跨域\n\nWebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。\n\n原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。\n\n1.前端代码：\n\n```\n<div>user input：<input type=\"text\"></div>\n<script src=\"./socket.io.js\"></script>\n<script>\n    var socket = io(' http://www.domain2.com:8080');// 连接成功处理\n    socket.on('connect', function() {\n        // 监听服务端消息\n        socket.on('message', function(msg){\n            console.log('data from server: ---> ' + msg);\n         });\n         // 监听服务端关闭\n         socket.on('disconnect', function() {\n             console.log('Server socket has closed.');\n        });\n    });\n    document.getElementsByTagName('input') [0].onblur = function() {\n        socket.send(this.value);\n    };\n</script>\n```\n\n2.Nodejs socket后台：\n\n```\nvar http = require('http');\nvar socket = require('socket.io');// 启http服务\nvar server = http.createServer(function(req, res){\n    res.writeHead(200, { 'Content-type': 'text/html' }); res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n// 监听socket连接\nsocket.listen(server).on('connection', function(client){\n    // 接收信息\n    client.on('message', function(msg) {\n        client.send('hello：' + msg);\n        console.log('data from client: ---> ' + msg);\n    });\n    // 断开处理\n    client.on('disconnect', function() {\n        console.log('Client socket has closed.');\n    });\n});\n```\n\n[参考原文](https://mp.weixin.qq.com/s?__biz=MjM5MDA2MTI1MA==&mid=2649087278&idx=1&sn=7a37b6241177f7bb5c27f72c73eb804e&chksm=be5bfa83892c7395b0ca161bc5a0ef5d51fbf15ff8c153899fb032ae735972bca58d65b7d8b3&scene=38#wechat_redirect)","source":"_posts/前端常见跨域解决方案.md","raw":"---\ntitle: 前端常见跨域解决方案\ndate: 2018-03-08 19:57:12\ncategories: 前端\ntags: 跨域\n---\n## 前端常见跨域解决方案（全）\n\n#### 什么是跨域？\n\n跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。\n\n##### 广义的跨域：\n\n1. 资源跳转： A链接、重定向、表单提交\n2. 资源嵌入： `<link>、<script>、<img>、<frame>`等dom标签， 还有样式中background:url()、 @font-face()等文件外链\n3. 脚本请求： js发起的ajax请求、dom和js对象的跨域操作等\n\n其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。\n\n#### 什么是同源策略？\n\n同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。\n\n##### 同源策略限制以下几种行为：\n\n1. Cookie、LocalStorage 和 IndexDB 无法读取\n2. DOM 和 js对象无法获得\n3. AJAX 请求不能发送跨域方法\n\n<!--more-->\n\n#### 常见跨域场景\n\n![常见跨域场景](前端常见跨域解决方案/常见跨域场景.png)\n\n#### 前端常见跨域解决方案（全）\n\n##### 跨域解决方案\n\n1. 通过jsonp跨域\n2. document.domain + iframe跨域\n3. location.hash + iframe\n4. window.name + iframe跨域\n5. postMessage跨域\n6. 跨域资源共享（CORS）\n7. nginx代理跨域\n8. nodejs中间件代理跨域\n9. WebSocket协议跨域\n\n##### 一、 通过jsonp跨域\n\n通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。\n\n1.原生实现：\n\n```\n<script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript'; // 传参并指定回调执行函数为onBack\n    script.src = 'http://www.domain2.com:8080/login?user=admin&callback=onBack';\n    document.head.appendChild(script); // 回调执行函数\n    function onBack(res) {\n        alert(JSON.stringify(res));\n    }\n</script>\n```\n\n服务端返回如下（返回时即执行全局函数）：\n\n```\nonBack({\"status\": true, \"user\": \"admin\"})\n```\n\n2.jquery ajax：\n\n```\n$.ajax({\n    url: 'http://www.domain2.com:8080/login',\n    type: 'get',\n    dataType: 'jsonp', // 请求方式为jsonp\n    jsonpCallback: \"onBack\", // 自定义回调函数名\n    data: {}\n});\n```\n\n3.vue.js：\n\n```\nthis.$http.jsonp('http://www.domain2.com:8080/login',{ params: {}, jsonp: 'onBack'}).then((res) =>{ console.log(res); })\n```\n\n后端node.js代码示例：\n\n```\nvar querystring = require('querystring');\nvar http = require('http');\nvar server = http.createServer();\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.split('?')[1]);\n    var fn = params.callback; // jsonp返回设置\n    res.writeHead(200, {'Content-Type': 'text/javascript' });\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n    res.end();\n\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n** jsonp缺点：只能实现get一种请求。 **\n\n##### 二、 document.domain + iframe跨域\n\n** 此方案仅限主域相同，子域不同的跨域应用场景。 **\n\n实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。\n\n1.父窗口：(http://www.domain.com/a.html)\n\n```\n<iframe id=\"iframe\"src=\"http://child.domain.com/b.html\"></iframe>\n<script>document.domain = 'domain.com'; var user = 'admin';</script>\n```\n\n2.子窗口：(http://child.domain.com/b.html)\n\n```\n<script>\n    document.domain = 'domain.com'; // 获取父窗口中变量\n    alert('get js data from parent ---> '+ window.parent.user);\n</script>\n```\n\n##### 三、 location.hash + iframe跨域\n\n实现原理： a欲与b跨域相互通信，通过中间页c来实现。\n\n三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。\n\n具体实现：A域：a.html -> B域：b.html -> A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。\n\n1.a.html：(http://www.domain1.com/a.html)\n\n```\n<iframe id=\"iframe\"src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe'); // 向b.html传hash值\n\n    setTimeout(function() {\n        iframe.src = iframe.src + '#user=admin';\n    }, 1000); // 开放给同域c.html的回调方法\n\n    function onCallback(res) {\n        alert('data from c.html ---> ' + res);\n    }\n</script>\n```\n\n2.b.html：(http://www.domain2.com/b.html)\n\n```\n<iframe id=\"iframe\"src=\"http://www.domain1.com/c.html\" style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe'); // 监听a.html传来的hash值，再传给c.html window.onhashchange = function () {\n        iframe.src = iframe.src + location.hash;\n    };\n</script>\n```\n\n3.c.html：(http://www.domain1.com/c.html)\n\n```\n<script>\n    // 监听b.html传来的hash值\n    window.onhashchange = function () {\n        // 再通过操作同域a.html的js回调，将结果传回\n        window.parent.parent.onCallback('hello: '+ location.hash.replace('#user=', ''));\n    };\n</script>\n```\n\n##### 四、 window.name + iframe跨域\n\nwindow.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。\n\n1.a.html：(http://www.domain1.com/a.html)\n\n```\nvar proxy = function(url, callback){\n    var state = 0;\n    var iframe = document.createElement('iframe'); // 加载跨域页面\n    iframe.src = url; // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n    iframe.onload = function() {\n        if (state === 1) {\n            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据\n            callback(iframe.contentWindow.name);\n            destoryFrame();\n        } else if (state === 0) {\n            // 第1次onload(跨域页)成功后，切换到同域代理页面\n            iframe.contentWindow.location = 'http://www.domain1.com/proxy.html';\n            state = 1;\n        }\n    };\n    document.body.appendChild(iframe); // 获取数据以后销毁这个iframe， 释放内存；这也保证了安全（不被其他域frame js访问）\n    function destoryFrame() {\n        iframe.contentWindow.document.write('');\n        iframe.contentWindow.close();\n        document.body.removeChild(iframe);\n    }};\n    // 请求跨域b页面数据proxy\n    ('http://www.domain2.com/b.html',function(data) {\n        alert(data);\n    });\n```\n\n2.proxy.html：(http://www.domain1.com/proxy.html)\n\n中间代理页，与a.html同域，内容为空即可。\n\n3.b.html：(http://www.domain2.com/b.html)\n\n```\n<script> window.name = 'This is domain2 data!';</script>\n```\n\n总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n##### 五、 postMessage跨域\n\npostMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：\n\na. 页面和其打开的新窗口的数据传递\n\nb. 多窗口之间消息传递\n\nc. 页面与嵌套的iframe消息传递\n\nd. 上面三个场景的跨域数据传递\n\n用法：postMessage(data,origin)方法接受两个参数\n\ndata： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。\n\norigin： 协议+主机+端口号，也可以设置为\"*\"，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为\"/\"。\n\n1.a.html：(http://www.domain1.com/a.html)\n\n```\n<iframe id=\"iframe\"src=\"http://www.domain2.com/b.html\"style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe');\n    iframe.onload = function(){\n        var data = { name: 'aym' }; // 向domain2传送跨域数据\n        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');\n    };\n    // 接受domain2返回数据\n    window.addEventListener ('message', function(e) {\n        alert('data from domain2 ---> ' + e.data);\n    }, false);\n</script>\n```\n\n2.b.html：(http://www.domain2.com/b.html)\n\n```\n<script>\n    // 接收domain1的数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain1 ---> ' + e.data);\n        var data = JSON.parse(e.data);\n        if (data) {\n            data.number = 16; // 处理后再发回domain1\n            window.parent.postMessage(JSON.stringify(data),'http://www.domain1.com');\n        }\n    }, false);\n</script>\n```\n\n##### 六、 跨域资源共享（CORS）\n\n普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。\n\n需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。\n\n目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。\n\n##### 1、 前端设置：\n\n1.原生ajax\n\n`// 前端设置是否带cookiexhr.withCredentials = true;`\n\n示例代码：\n\n```\nvar xhr = new XMLHttpRequest();// IE8/9需用window.XDomainRequest兼容\n// 前端设置是否带cookiexhr.withCredentials = true;\nxhr.open('post','http://www.domain2.com:8080/login', true);\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nxhr.send('user=admin');\nxhr.onreadystatechange = function(){\n    if (xhr.readyState == 4 && xhr.status == 200){\n        alert(xhr.responseText);\n    }\n};\n```\n\n2.jQuery ajax\n\n```\n$.ajax({\n    ...\n    xhrFields: {\n        withCredentials: true // 前端设置是否带cookie\n    },\n    crossDomain: true, // 会让请求头中包含跨域的额外信息，但不会含cookie\n    ...\n});\n```\n\n3.vue框架\n\n在vue-resource封装的ajax组件中加入以下代码：\n\n```\nVue.http.options.credentials = true\n```\n\n##### 2、 服务端设置：\n\n若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。\n\n1.Java后台：\n\n```\n/* * 导入包：\nimport javax.servlet.http.HttpServletResponse;\n* 接口参数中定义：\nHttpServletResponse response\n*/response.setHeader (\"Access-Control-Allow-Origin\",\"http://www.domain1.com\");\n// 若有端口需写全（协议+域名+端口）\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n```\n\n2.Nodejs后台示例：\n\n```\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\nserver.on('request', function(req, res){\n    var postData = ''; // 数据块接收中\n    req.addListener('data', function(chunk) { postData += chunk; }); // 数据接收完毕 req.addListener('end',function(){ postData = qs.parse(postData); // 跨域后台设置 res.writeHead(200, { 'Access-Control-Allow-Credentials': 'true', // 后端允许发送Cookie 'Access-Control-Allow-Origin':'http://www.domain1.com',//允许访问的域（协议+域名+端口）\n    'Set-Cookie':'l=a123456;Path=/;Domain=www.domain2.com; HttpOnly' // HttpOnly:脚本无法读取cookie\n});\nres.write(JSON.stringify(postData)); res.end(); });});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n#### 七、 nginx代理跨域\n\n1.nginx配置解决iconfont跨域\n\n浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。\n\n`location / { add_header Access-Control-Allow-Origin *;}`\n\n2.nginx反向代理接口跨域\n\n跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。\n\n实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。\n\n##### nginx具体配置：\n\n```\n#proxy服务器server {\n    listen 81;\n    server_name www.domain1.com;\n    location / {\n        proxy_pass\n        http://www.domain2.com:8080;\n        #反向代理\n            proxy_cookie_domain\n                www.domain2.com www.domain1.com;\n        #修改cookie里域名\n        index index.html index.htm;\n        # 当用webpack-dev-server等中间件代理接口访问nignx时,此时无浏览器参与, 故没有同源限制,下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin\n            http://www.domain1.com;\n        #当前端只跨域不带cookie时， 可为*\n            add_header Access-Control-Allow-Credentials true;\n    }}\n```\n\n1.前端代码示例：\n\n```\nvar xhr = new XMLHttpRequest();// 前端开关：\n浏览器是否读写cookiexhr.withCredentials = true;\n// 访问nginx中的代理服务器\nxhr.open('get', 'http://www.domain1.com:81/?user=admin', true);\nxhr.send();\n```\n\n2.Nodejs后台示例：\n\n```\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\nserver.on('request', function(req, res) {\n    var params = qs.parse(req.url.substring(2)); // 向前台写cookie\n    res.writeHead(200, { 'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly' // HttpOnly:脚本无法读取 });\n    res.write(JSON.stringify(params));\n    res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n#### 八、 Nodejs中间件代理跨域\n\nnode中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。\n\n##### 1、 非vue框架的跨域（2次跨域）\n\n利用node + express + http-proxy-middleware搭建一个proxy服务器。\n\n1.前端代码示例：\n\n```\nvar xhr = new XMLHttpRequest();\n// 前端开关：\n浏览器是否读写cookiexhr.withCredentials = true;\n// 访问http-proxy-middleware代理服务器\nxhr.open('get', 'http://www.domain1.com:3000/login? user=admin', true);\nxhr.send();\n```\n\n2.中间件服务器：\n\n```\nvar express = require('express');\nvar proxy = require('http-proxy-middleware');\nvar app = express();\napp.use('/', proxy({ // 代理跨域目标接口\n    target: 'http://www.domain2.com:8080',\n    changeOrigin: true,\n    // 修改响应头信息，实现跨域并允许带cookie\n    onProxyRes: function(proxyRes, req, res) {\n        res.header('Access-Control-Allow-Origin', 'http://www.domain1.com'); res.header('Access-Control-Allow-Credentials', 'true');\n\n    },\n    // 修改响应信息中的cookie域名\n    cookieDomainRewrite: 'www.domain1.com'\n    // 可以为false，表示不修改\n}));\napp.listen(3000);\nconsole.log(' Proxy server is listen at port 3000...');\n```\n\n3.Nodejs后台同（六：nginx）\n\n\n##### 2、 vue框架的跨域（1次跨域）\n\n利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。\n\nwebpack.config.js部分配置：\n\n\n```\nmodule.exports = {\n    entry: {},\n    module: {},\n    ...\n    devServer: {\n        historyApiFallback: true,\n        proxy: [{\n            context: '/login',\n            target: 'http://www.domain2.com:8080', // 代理跨域目标接口\n            changeOrigin: true,\n            secure: false,\n            // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com' // 可以为false，表示不修改\n\n        }],\n        noInfo: true\n    }}\n```\n\n#### 九、 WebSocket协议跨域\n\nWebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。\n\n原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。\n\n1.前端代码：\n\n```\n<div>user input：<input type=\"text\"></div>\n<script src=\"./socket.io.js\"></script>\n<script>\n    var socket = io(' http://www.domain2.com:8080');// 连接成功处理\n    socket.on('connect', function() {\n        // 监听服务端消息\n        socket.on('message', function(msg){\n            console.log('data from server: ---> ' + msg);\n         });\n         // 监听服务端关闭\n         socket.on('disconnect', function() {\n             console.log('Server socket has closed.');\n        });\n    });\n    document.getElementsByTagName('input') [0].onblur = function() {\n        socket.send(this.value);\n    };\n</script>\n```\n\n2.Nodejs socket后台：\n\n```\nvar http = require('http');\nvar socket = require('socket.io');// 启http服务\nvar server = http.createServer(function(req, res){\n    res.writeHead(200, { 'Content-type': 'text/html' }); res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n// 监听socket连接\nsocket.listen(server).on('connection', function(client){\n    // 接收信息\n    client.on('message', function(msg) {\n        client.send('hello：' + msg);\n        console.log('data from client: ---> ' + msg);\n    });\n    // 断开处理\n    client.on('disconnect', function() {\n        console.log('Client socket has closed.');\n    });\n});\n```\n\n[参考原文](https://mp.weixin.qq.com/s?__biz=MjM5MDA2MTI1MA==&mid=2649087278&idx=1&sn=7a37b6241177f7bb5c27f72c73eb804e&chksm=be5bfa83892c7395b0ca161bc5a0ef5d51fbf15ff8c153899fb032ae735972bca58d65b7d8b3&scene=38#wechat_redirect)","slug":"前端常见跨域解决方案","published":1,"updated":"2018-03-09T06:37:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmm001hlxndjc8lw6fv","content":"<h2 id=\"前端常见跨域解决方案（全）\"><a href=\"#前端常见跨域解决方案（全）\" class=\"headerlink\" title=\"前端常见跨域解决方案（全）\"></a>前端常见跨域解决方案（全）</h2><h4 id=\"什么是跨域？\"><a href=\"#什么是跨域？\" class=\"headerlink\" title=\"什么是跨域？\"></a>什么是跨域？</h4><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p>\n<h5 id=\"广义的跨域：\"><a href=\"#广义的跨域：\" class=\"headerlink\" title=\"广义的跨域：\"></a>广义的跨域：</h5><ol>\n<li>资源跳转： A链接、重定向、表单提交</li>\n<li>资源嵌入： <code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等dom标签， 还有样式中background:url()、 @font-face()等文件外链</li>\n<li>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</li>\n</ol>\n<p>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p>\n<h4 id=\"什么是同源策略？\"><a href=\"#什么是同源策略？\" class=\"headerlink\" title=\"什么是同源策略？\"></a>什么是同源策略？</h4><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>\n<h5 id=\"同源策略限制以下几种行为：\"><a href=\"#同源策略限制以下几种行为：\" class=\"headerlink\" title=\"同源策略限制以下几种行为：\"></a>同源策略限制以下几种行为：</h5><ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>\n<li>DOM 和 js对象无法获得</li>\n<li>AJAX 请求不能发送跨域方法</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"常见跨域场景\"><a href=\"#常见跨域场景\" class=\"headerlink\" title=\"常见跨域场景\"></a>常见跨域场景</h4><p><img src=\"/2018/03/08/前端常见跨域解决方案/常见跨域场景.png\" alt=\"常见跨域场景\"></p>\n<h4 id=\"前端常见跨域解决方案（全）-1\"><a href=\"#前端常见跨域解决方案（全）-1\" class=\"headerlink\" title=\"前端常见跨域解决方案（全）\"></a>前端常见跨域解决方案（全）</h4><h5 id=\"跨域解决方案\"><a href=\"#跨域解决方案\" class=\"headerlink\" title=\"跨域解决方案\"></a>跨域解决方案</h5><ol>\n<li>通过jsonp跨域</li>\n<li>document.domain + iframe跨域</li>\n<li>location.hash + iframe</li>\n<li>window.name + iframe跨域</li>\n<li>postMessage跨域</li>\n<li>跨域资源共享（CORS）</li>\n<li>nginx代理跨域</li>\n<li>nodejs中间件代理跨域</li>\n<li>WebSocket协议跨域</li>\n</ol>\n<h5 id=\"一、-通过jsonp跨域\"><a href=\"#一、-通过jsonp跨域\" class=\"headerlink\" title=\"一、 通过jsonp跨域\"></a>一、 通过jsonp跨域</h5><p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p>\n<p>1.原生实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">    script.type = &apos;text/javascript&apos;; // 传参并指定回调执行函数为onBack</span><br><span class=\"line\">    script.src = &apos;http://www.domain2.com:8080/login?user=admin&amp;callback=onBack&apos;;</span><br><span class=\"line\">    document.head.appendChild(script); // 回调执行函数</span><br><span class=\"line\">    function onBack(res) &#123;</span><br><span class=\"line\">        alert(JSON.stringify(res));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>服务端返回如下（返回时即执行全局函数）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onBack(&#123;&quot;status&quot;: true, &quot;user&quot;: &quot;admin&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.jquery ajax：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: &apos;http://www.domain2.com:8080/login&apos;,</span><br><span class=\"line\">    type: &apos;get&apos;,</span><br><span class=\"line\">    dataType: &apos;jsonp&apos;, // 请求方式为jsonp</span><br><span class=\"line\">    jsonpCallback: &quot;onBack&quot;, // 自定义回调函数名</span><br><span class=\"line\">    data: &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3.vue.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$http.jsonp(&apos;http://www.domain2.com:8080/login&apos;,&#123; params: &#123;&#125;, jsonp: &apos;onBack&apos;&#125;).then((res) =&gt;&#123; console.log(res); &#125;)</span><br></pre></td></tr></table></figure>\n<p>后端node.js代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var server = http.createServer();</span><br><span class=\"line\">server.on(&apos;request&apos;, function(req, res) &#123;</span><br><span class=\"line\">    var params = qs.parse(req.url.split(&apos;?&apos;)[1]);</span><br><span class=\"line\">    var fn = params.callback; // jsonp返回设置</span><br><span class=\"line\">    res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/javascript&apos; &#125;);</span><br><span class=\"line\">    res.write(fn + &apos;(&apos; + JSON.stringify(params) + &apos;)&apos;);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br></pre></td></tr></table></figure>\n<p><strong> jsonp缺点：只能实现get一种请求。 </strong></p>\n<h5 id=\"二、-document-domain-iframe跨域\"><a href=\"#二、-document-domain-iframe跨域\" class=\"headerlink\" title=\"二、 document.domain + iframe跨域\"></a>二、 document.domain + iframe跨域</h5><p><strong> 此方案仅限主域相同，子域不同的跨域应用场景。 </strong></p>\n<p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p>\n<p>1.父窗口：(<a href=\"http://www.domain.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://child.domain.com/b.html&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;document.domain = &apos;domain.com&apos;; var user = &apos;admin&apos;;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.子窗口：(<a href=\"http://child.domain.com/b.html\" target=\"_blank\" rel=\"noopener\">http://child.domain.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    document.domain = &apos;domain.com&apos;; // 获取父窗口中变量</span><br><span class=\"line\">    alert(&apos;get js data from parent ---&gt; &apos;+ window.parent.user);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"三、-location-hash-iframe跨域\"><a href=\"#三、-location-hash-iframe跨域\" class=\"headerlink\" title=\"三、 location.hash + iframe跨域\"></a>三、 location.hash + iframe跨域</h5><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。</p>\n<p>三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>\n<p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>\n<p>1.a.html：(<a href=\"http://www.domain1.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var iframe = document.getElementById(&apos;iframe&apos;); // 向b.html传hash值</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        iframe.src = iframe.src + &apos;#user=admin&apos;;</span><br><span class=\"line\">    &#125;, 1000); // 开放给同域c.html的回调方法</span><br><span class=\"line\"></span><br><span class=\"line\">    function onCallback(res) &#123;</span><br><span class=\"line\">        alert(&apos;data from c.html ---&gt; &apos; + res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.b.html：(<a href=\"http://www.domain2.com/b.html\" target=\"_blank\" rel=\"noopener\">http://www.domain2.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://www.domain1.com/c.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var iframe = document.getElementById(&apos;iframe&apos;); // 监听a.html传来的hash值，再传给c.html window.onhashchange = function () &#123;</span><br><span class=\"line\">        iframe.src = iframe.src + location.hash;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>3.c.html：(<a href=\"http://www.domain1.com/c.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/c.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 监听b.html传来的hash值</span><br><span class=\"line\">    window.onhashchange = function () &#123;</span><br><span class=\"line\">        // 再通过操作同域a.html的js回调，将结果传回</span><br><span class=\"line\">        window.parent.parent.onCallback(&apos;hello: &apos;+ location.hash.replace(&apos;#user=&apos;, &apos;&apos;));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"四、-window-name-iframe跨域\"><a href=\"#四、-window-name-iframe跨域\" class=\"headerlink\" title=\"四、 window.name + iframe跨域\"></a>四、 window.name + iframe跨域</h5><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>\n<p>1.a.html：(<a href=\"http://www.domain1.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = function(url, callback)&#123;</span><br><span class=\"line\">    var state = 0;</span><br><span class=\"line\">    var iframe = document.createElement(&apos;iframe&apos;); // 加载跨域页面</span><br><span class=\"line\">    iframe.src = url; // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span><br><span class=\"line\">    iframe.onload = function() &#123;</span><br><span class=\"line\">        if (state === 1) &#123;</span><br><span class=\"line\">            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span><br><span class=\"line\">            callback(iframe.contentWindow.name);</span><br><span class=\"line\">            destoryFrame();</span><br><span class=\"line\">        &#125; else if (state === 0) &#123;</span><br><span class=\"line\">            // 第1次onload(跨域页)成功后，切换到同域代理页面</span><br><span class=\"line\">            iframe.contentWindow.location = &apos;http://www.domain1.com/proxy.html&apos;;</span><br><span class=\"line\">            state = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    document.body.appendChild(iframe); // 获取数据以后销毁这个iframe， 释放内存；这也保证了安全（不被其他域frame js访问）</span><br><span class=\"line\">    function destoryFrame() &#123;</span><br><span class=\"line\">        iframe.contentWindow.document.write(&apos;&apos;);</span><br><span class=\"line\">        iframe.contentWindow.close();</span><br><span class=\"line\">        document.body.removeChild(iframe);</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\">    // 请求跨域b页面数据proxy</span><br><span class=\"line\">    (&apos;http://www.domain2.com/b.html&apos;,function(data) &#123;</span><br><span class=\"line\">        alert(data);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>2.proxy.html：(<a href=\"http://www.domain1.com/proxy.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/proxy.html</a>)</p>\n<p>中间代理页，与a.html同域，内容为空即可。</p>\n<p>3.b.html：(<a href=\"http://www.domain2.com/b.html\" target=\"_blank\" rel=\"noopener\">http://www.domain2.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt; window.name = &apos;This is domain2 data!&apos;;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n<h5 id=\"五、-postMessage跨域\"><a href=\"#五、-postMessage跨域\" class=\"headerlink\" title=\"五、 postMessage跨域\"></a>五、 postMessage跨域</h5><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>\n<p>a. 页面和其打开的新窗口的数据传递</p>\n<p>b. 多窗口之间消息传递</p>\n<p>c. 页面与嵌套的iframe消息传递</p>\n<p>d. 上面三个场景的跨域数据传递</p>\n<p>用法：postMessage(data,origin)方法接受两个参数</p>\n<p>data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</p>\n<p>origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</p>\n<p>1.a.html：(<a href=\"http://www.domain1.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://www.domain2.com/b.html&quot;style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var iframe = document.getElementById(&apos;iframe&apos;);</span><br><span class=\"line\">    iframe.onload = function()&#123;</span><br><span class=\"line\">        var data = &#123; name: &apos;aym&apos; &#125;; // 向domain2传送跨域数据</span><br><span class=\"line\">        iframe.contentWindow.postMessage(JSON.stringify(data), &apos;http://www.domain2.com&apos;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // 接受domain2返回数据</span><br><span class=\"line\">    window.addEventListener (&apos;message&apos;, function(e) &#123;</span><br><span class=\"line\">        alert(&apos;data from domain2 ---&gt; &apos; + e.data);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.b.html：(<a href=\"http://www.domain2.com/b.html\" target=\"_blank\" rel=\"noopener\">http://www.domain2.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 接收domain1的数据</span><br><span class=\"line\">    window.addEventListener(&apos;message&apos;, function(e) &#123;</span><br><span class=\"line\">        alert(&apos;data from domain1 ---&gt; &apos; + e.data);</span><br><span class=\"line\">        var data = JSON.parse(e.data);</span><br><span class=\"line\">        if (data) &#123;</span><br><span class=\"line\">            data.number = 16; // 处理后再发回domain1</span><br><span class=\"line\">            window.parent.postMessage(JSON.stringify(data),&apos;http://www.domain1.com&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"六、-跨域资源共享（CORS）\"><a href=\"#六、-跨域资源共享（CORS）\" class=\"headerlink\" title=\"六、 跨域资源共享（CORS）\"></a>六、 跨域资源共享（CORS）</h5><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p>\n<p>需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。</p>\n<p>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p>\n<h5 id=\"1、-前端设置：\"><a href=\"#1、-前端设置：\" class=\"headerlink\" title=\"1、 前端设置：\"></a>1、 前端设置：</h5><p>1.原生ajax</p>\n<p><code>// 前端设置是否带cookiexhr.withCredentials = true;</code></p>\n<p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();// IE8/9需用window.XDomainRequest兼容</span><br><span class=\"line\">// 前端设置是否带cookiexhr.withCredentials = true;</span><br><span class=\"line\">xhr.open(&apos;post&apos;,&apos;http://www.domain2.com:8080/login&apos;, true);</span><br><span class=\"line\">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;);</span><br><span class=\"line\">xhr.send(&apos;user=admin&apos;);</span><br><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>2.jQuery ajax</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    xhrFields: &#123;</span><br><span class=\"line\">        withCredentials: true // 前端设置是否带cookie</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    crossDomain: true, // 会让请求头中包含跨域的额外信息，但不会含cookie</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3.vue框架</p>\n<p>在vue-resource封装的ajax组件中加入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.http.options.credentials = true</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、-服务端设置：\"><a href=\"#2、-服务端设置：\" class=\"headerlink\" title=\"2、 服务端设置：\"></a>2、 服务端设置：</h5><p>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。</p>\n<p>1.Java后台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* * 导入包：</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">* 接口参数中定义：</span><br><span class=\"line\">HttpServletResponse response</span><br><span class=\"line\">*/response.setHeader (&quot;Access-Control-Allow-Origin&quot;,&quot;http://www.domain1.com&quot;);</span><br><span class=\"line\">// 若有端口需写全（协议+域名+端口）</span><br><span class=\"line\">response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure>\n<p>2.Nodejs后台示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var server = http.createServer();</span><br><span class=\"line\">var qs = require(&apos;querystring&apos;);</span><br><span class=\"line\">server.on(&apos;request&apos;, function(req, res)&#123;</span><br><span class=\"line\">    var postData = &apos;&apos;; // 数据块接收中</span><br><span class=\"line\">    req.addListener(&apos;data&apos;, function(chunk) &#123; postData += chunk; &#125;); // 数据接收完毕 req.addListener(&apos;end&apos;,function()&#123; postData = qs.parse(postData); // 跨域后台设置 res.writeHead(200, &#123; &apos;Access-Control-Allow-Credentials&apos;: &apos;true&apos;, // 后端允许发送Cookie &apos;Access-Control-Allow-Origin&apos;:&apos;http://www.domain1.com&apos;,//允许访问的域（协议+域名+端口）</span><br><span class=\"line\">    &apos;Set-Cookie&apos;:&apos;l=a123456;Path=/;Domain=www.domain2.com; HttpOnly&apos; // HttpOnly:脚本无法读取cookie</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">res.write(JSON.stringify(postData)); res.end(); &#125;);&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"七、-nginx代理跨域\"><a href=\"#七、-nginx代理跨域\" class=\"headerlink\" title=\"七、 nginx代理跨域\"></a>七、 nginx代理跨域</h4><p>1.nginx配置解决iconfont跨域</p>\n<p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p>\n<p><code>location / { add_header Access-Control-Allow-Origin *;}</code></p>\n<p>2.nginx反向代理接口跨域</p>\n<p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p>\n<p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p>\n<h5 id=\"nginx具体配置：\"><a href=\"#nginx具体配置：\" class=\"headerlink\" title=\"nginx具体配置：\"></a>nginx具体配置：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#proxy服务器server &#123;</span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    server_name www.domain1.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass</span><br><span class=\"line\">        http://www.domain2.com:8080;</span><br><span class=\"line\">        #反向代理</span><br><span class=\"line\">            proxy_cookie_domain</span><br><span class=\"line\">                www.domain2.com www.domain1.com;</span><br><span class=\"line\">        #修改cookie里域名</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        # 当用webpack-dev-server等中间件代理接口访问nignx时,此时无浏览器参与, 故没有同源限制,下面的跨域配置可不启用</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin</span><br><span class=\"line\">            http://www.domain1.com;</span><br><span class=\"line\">        #当前端只跨域不带cookie时， 可为*</span><br><span class=\"line\">            add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">    &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>1.前端代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();// 前端开关：</span><br><span class=\"line\">浏览器是否读写cookiexhr.withCredentials = true;</span><br><span class=\"line\">// 访问nginx中的代理服务器</span><br><span class=\"line\">xhr.open(&apos;get&apos;, &apos;http://www.domain1.com:81/?user=admin&apos;, true);</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>2.Nodejs后台示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var server = http.createServer();</span><br><span class=\"line\">var qs = require(&apos;querystring&apos;);</span><br><span class=\"line\">server.on(&apos;request&apos;, function(req, res) &#123;</span><br><span class=\"line\">    var params = qs.parse(req.url.substring(2)); // 向前台写cookie</span><br><span class=\"line\">    res.writeHead(200, &#123; &apos;Set-Cookie&apos;: &apos;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&apos; // HttpOnly:脚本无法读取 &#125;);</span><br><span class=\"line\">    res.write(JSON.stringify(params));</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"八、-Nodejs中间件代理跨域\"><a href=\"#八、-Nodejs中间件代理跨域\" class=\"headerlink\" title=\"八、 Nodejs中间件代理跨域\"></a>八、 Nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p>\n<h5 id=\"1、-非vue框架的跨域（2次跨域）\"><a href=\"#1、-非vue框架的跨域（2次跨域）\" class=\"headerlink\" title=\"1、 非vue框架的跨域（2次跨域）\"></a>1、 非vue框架的跨域（2次跨域）</h5><p>利用node + express + http-proxy-middleware搭建一个proxy服务器。</p>\n<p>1.前端代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">// 前端开关：</span><br><span class=\"line\">浏览器是否读写cookiexhr.withCredentials = true;</span><br><span class=\"line\">// 访问http-proxy-middleware代理服务器</span><br><span class=\"line\">xhr.open(&apos;get&apos;, &apos;http://www.domain1.com:3000/login? user=admin&apos;, true);</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>2.中间件服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var proxy = require(&apos;http-proxy-middleware&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(&apos;/&apos;, proxy(&#123; // 代理跨域目标接口</span><br><span class=\"line\">    target: &apos;http://www.domain2.com:8080&apos;,</span><br><span class=\"line\">    changeOrigin: true,</span><br><span class=\"line\">    // 修改响应头信息，实现跨域并允许带cookie</span><br><span class=\"line\">    onProxyRes: function(proxyRes, req, res) &#123;</span><br><span class=\"line\">        res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;http://www.domain1.com&apos;); res.header(&apos;Access-Control-Allow-Credentials&apos;, &apos;true&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 修改响应信息中的cookie域名</span><br><span class=\"line\">    cookieDomainRewrite: &apos;www.domain1.com&apos;</span><br><span class=\"line\">    // 可以为false，表示不修改</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.listen(3000);</span><br><span class=\"line\">console.log(&apos; Proxy server is listen at port 3000...&apos;);</span><br></pre></td></tr></table></figure>\n<p>3.Nodejs后台同（六：nginx）</p>\n<h5 id=\"2、-vue框架的跨域（1次跨域）\"><a href=\"#2、-vue框架的跨域（1次跨域）\" class=\"headerlink\" title=\"2、 vue框架的跨域（1次跨域）\"></a>2、 vue框架的跨域（1次跨域）</h5><p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p>\n<p>webpack.config.js部分配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;&#125;,</span><br><span class=\"line\">    module: &#123;&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        historyApiFallback: true,</span><br><span class=\"line\">        proxy: [&#123;</span><br><span class=\"line\">            context: &apos;/login&apos;,</span><br><span class=\"line\">            target: &apos;http://www.domain2.com:8080&apos;, // 代理跨域目标接口</span><br><span class=\"line\">            changeOrigin: true,</span><br><span class=\"line\">            secure: false,</span><br><span class=\"line\">            // 当代理某些https服务报错时用</span><br><span class=\"line\">            cookieDomainRewrite: &apos;www.domain1.com&apos; // 可以为false，表示不修改</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        noInfo: true</span><br><span class=\"line\">    &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"九、-WebSocket协议跨域\"><a href=\"#九、-WebSocket协议跨域\" class=\"headerlink\" title=\"九、 WebSocket协议跨域\"></a>九、 WebSocket协议跨域</h4><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。</p>\n<p>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p>\n<p>1.前端代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;user input：&lt;input type=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;./socket.io.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var socket = io(&apos; http://www.domain2.com:8080&apos;);// 连接成功处理</span><br><span class=\"line\">    socket.on(&apos;connect&apos;, function() &#123;</span><br><span class=\"line\">        // 监听服务端消息</span><br><span class=\"line\">        socket.on(&apos;message&apos;, function(msg)&#123;</span><br><span class=\"line\">            console.log(&apos;data from server: ---&gt; &apos; + msg);</span><br><span class=\"line\">         &#125;);</span><br><span class=\"line\">         // 监听服务端关闭</span><br><span class=\"line\">         socket.on(&apos;disconnect&apos;, function() &#123;</span><br><span class=\"line\">             console.log(&apos;Server socket has closed.&apos;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    document.getElementsByTagName(&apos;input&apos;) [0].onblur = function() &#123;</span><br><span class=\"line\">        socket.send(this.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.Nodejs socket后台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var socket = require(&apos;socket.io&apos;);// 启http服务</span><br><span class=\"line\">var server = http.createServer(function(req, res)&#123;</span><br><span class=\"line\">    res.writeHead(200, &#123; &apos;Content-type&apos;: &apos;text/html&apos; &#125;); res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br><span class=\"line\">// 监听socket连接</span><br><span class=\"line\">socket.listen(server).on(&apos;connection&apos;, function(client)&#123;</span><br><span class=\"line\">    // 接收信息</span><br><span class=\"line\">    client.on(&apos;message&apos;, function(msg) &#123;</span><br><span class=\"line\">        client.send(&apos;hello：&apos; + msg);</span><br><span class=\"line\">        console.log(&apos;data from client: ---&gt; &apos; + msg);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    // 断开处理</span><br><span class=\"line\">    client.on(&apos;disconnect&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;Client socket has closed.&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDA2MTI1MA==&amp;mid=2649087278&amp;idx=1&amp;sn=7a37b6241177f7bb5c27f72c73eb804e&amp;chksm=be5bfa83892c7395b0ca161bc5a0ef5d51fbf15ff8c153899fb032ae735972bca58d65b7d8b3&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">参考原文</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前端常见跨域解决方案（全）\"><a href=\"#前端常见跨域解决方案（全）\" class=\"headerlink\" title=\"前端常见跨域解决方案（全）\"></a>前端常见跨域解决方案（全）</h2><h4 id=\"什么是跨域？\"><a href=\"#什么是跨域？\" class=\"headerlink\" title=\"什么是跨域？\"></a>什么是跨域？</h4><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p>\n<h5 id=\"广义的跨域：\"><a href=\"#广义的跨域：\" class=\"headerlink\" title=\"广义的跨域：\"></a>广义的跨域：</h5><ol>\n<li>资源跳转： A链接、重定向、表单提交</li>\n<li>资源嵌入： <code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等dom标签， 还有样式中background:url()、 @font-face()等文件外链</li>\n<li>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</li>\n</ol>\n<p>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p>\n<h4 id=\"什么是同源策略？\"><a href=\"#什么是同源策略？\" class=\"headerlink\" title=\"什么是同源策略？\"></a>什么是同源策略？</h4><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>\n<h5 id=\"同源策略限制以下几种行为：\"><a href=\"#同源策略限制以下几种行为：\" class=\"headerlink\" title=\"同源策略限制以下几种行为：\"></a>同源策略限制以下几种行为：</h5><ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>\n<li>DOM 和 js对象无法获得</li>\n<li>AJAX 请求不能发送跨域方法</li>\n</ol>","more":"<h4 id=\"常见跨域场景\"><a href=\"#常见跨域场景\" class=\"headerlink\" title=\"常见跨域场景\"></a>常见跨域场景</h4><p><img src=\"/2018/03/08/前端常见跨域解决方案/常见跨域场景.png\" alt=\"常见跨域场景\"></p>\n<h4 id=\"前端常见跨域解决方案（全）-1\"><a href=\"#前端常见跨域解决方案（全）-1\" class=\"headerlink\" title=\"前端常见跨域解决方案（全）\"></a>前端常见跨域解决方案（全）</h4><h5 id=\"跨域解决方案\"><a href=\"#跨域解决方案\" class=\"headerlink\" title=\"跨域解决方案\"></a>跨域解决方案</h5><ol>\n<li>通过jsonp跨域</li>\n<li>document.domain + iframe跨域</li>\n<li>location.hash + iframe</li>\n<li>window.name + iframe跨域</li>\n<li>postMessage跨域</li>\n<li>跨域资源共享（CORS）</li>\n<li>nginx代理跨域</li>\n<li>nodejs中间件代理跨域</li>\n<li>WebSocket协议跨域</li>\n</ol>\n<h5 id=\"一、-通过jsonp跨域\"><a href=\"#一、-通过jsonp跨域\" class=\"headerlink\" title=\"一、 通过jsonp跨域\"></a>一、 通过jsonp跨域</h5><p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p>\n<p>1.原生实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">    script.type = &apos;text/javascript&apos;; // 传参并指定回调执行函数为onBack</span><br><span class=\"line\">    script.src = &apos;http://www.domain2.com:8080/login?user=admin&amp;callback=onBack&apos;;</span><br><span class=\"line\">    document.head.appendChild(script); // 回调执行函数</span><br><span class=\"line\">    function onBack(res) &#123;</span><br><span class=\"line\">        alert(JSON.stringify(res));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>服务端返回如下（返回时即执行全局函数）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onBack(&#123;&quot;status&quot;: true, &quot;user&quot;: &quot;admin&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.jquery ajax：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: &apos;http://www.domain2.com:8080/login&apos;,</span><br><span class=\"line\">    type: &apos;get&apos;,</span><br><span class=\"line\">    dataType: &apos;jsonp&apos;, // 请求方式为jsonp</span><br><span class=\"line\">    jsonpCallback: &quot;onBack&quot;, // 自定义回调函数名</span><br><span class=\"line\">    data: &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3.vue.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$http.jsonp(&apos;http://www.domain2.com:8080/login&apos;,&#123; params: &#123;&#125;, jsonp: &apos;onBack&apos;&#125;).then((res) =&gt;&#123; console.log(res); &#125;)</span><br></pre></td></tr></table></figure>\n<p>后端node.js代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var server = http.createServer();</span><br><span class=\"line\">server.on(&apos;request&apos;, function(req, res) &#123;</span><br><span class=\"line\">    var params = qs.parse(req.url.split(&apos;?&apos;)[1]);</span><br><span class=\"line\">    var fn = params.callback; // jsonp返回设置</span><br><span class=\"line\">    res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/javascript&apos; &#125;);</span><br><span class=\"line\">    res.write(fn + &apos;(&apos; + JSON.stringify(params) + &apos;)&apos;);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br></pre></td></tr></table></figure>\n<p><strong> jsonp缺点：只能实现get一种请求。 </strong></p>\n<h5 id=\"二、-document-domain-iframe跨域\"><a href=\"#二、-document-domain-iframe跨域\" class=\"headerlink\" title=\"二、 document.domain + iframe跨域\"></a>二、 document.domain + iframe跨域</h5><p><strong> 此方案仅限主域相同，子域不同的跨域应用场景。 </strong></p>\n<p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p>\n<p>1.父窗口：(<a href=\"http://www.domain.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://child.domain.com/b.html&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;document.domain = &apos;domain.com&apos;; var user = &apos;admin&apos;;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.子窗口：(<a href=\"http://child.domain.com/b.html\" target=\"_blank\" rel=\"noopener\">http://child.domain.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    document.domain = &apos;domain.com&apos;; // 获取父窗口中变量</span><br><span class=\"line\">    alert(&apos;get js data from parent ---&gt; &apos;+ window.parent.user);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"三、-location-hash-iframe跨域\"><a href=\"#三、-location-hash-iframe跨域\" class=\"headerlink\" title=\"三、 location.hash + iframe跨域\"></a>三、 location.hash + iframe跨域</h5><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。</p>\n<p>三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>\n<p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>\n<p>1.a.html：(<a href=\"http://www.domain1.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var iframe = document.getElementById(&apos;iframe&apos;); // 向b.html传hash值</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        iframe.src = iframe.src + &apos;#user=admin&apos;;</span><br><span class=\"line\">    &#125;, 1000); // 开放给同域c.html的回调方法</span><br><span class=\"line\"></span><br><span class=\"line\">    function onCallback(res) &#123;</span><br><span class=\"line\">        alert(&apos;data from c.html ---&gt; &apos; + res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.b.html：(<a href=\"http://www.domain2.com/b.html\" target=\"_blank\" rel=\"noopener\">http://www.domain2.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://www.domain1.com/c.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var iframe = document.getElementById(&apos;iframe&apos;); // 监听a.html传来的hash值，再传给c.html window.onhashchange = function () &#123;</span><br><span class=\"line\">        iframe.src = iframe.src + location.hash;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>3.c.html：(<a href=\"http://www.domain1.com/c.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/c.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 监听b.html传来的hash值</span><br><span class=\"line\">    window.onhashchange = function () &#123;</span><br><span class=\"line\">        // 再通过操作同域a.html的js回调，将结果传回</span><br><span class=\"line\">        window.parent.parent.onCallback(&apos;hello: &apos;+ location.hash.replace(&apos;#user=&apos;, &apos;&apos;));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"四、-window-name-iframe跨域\"><a href=\"#四、-window-name-iframe跨域\" class=\"headerlink\" title=\"四、 window.name + iframe跨域\"></a>四、 window.name + iframe跨域</h5><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>\n<p>1.a.html：(<a href=\"http://www.domain1.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = function(url, callback)&#123;</span><br><span class=\"line\">    var state = 0;</span><br><span class=\"line\">    var iframe = document.createElement(&apos;iframe&apos;); // 加载跨域页面</span><br><span class=\"line\">    iframe.src = url; // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span><br><span class=\"line\">    iframe.onload = function() &#123;</span><br><span class=\"line\">        if (state === 1) &#123;</span><br><span class=\"line\">            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span><br><span class=\"line\">            callback(iframe.contentWindow.name);</span><br><span class=\"line\">            destoryFrame();</span><br><span class=\"line\">        &#125; else if (state === 0) &#123;</span><br><span class=\"line\">            // 第1次onload(跨域页)成功后，切换到同域代理页面</span><br><span class=\"line\">            iframe.contentWindow.location = &apos;http://www.domain1.com/proxy.html&apos;;</span><br><span class=\"line\">            state = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    document.body.appendChild(iframe); // 获取数据以后销毁这个iframe， 释放内存；这也保证了安全（不被其他域frame js访问）</span><br><span class=\"line\">    function destoryFrame() &#123;</span><br><span class=\"line\">        iframe.contentWindow.document.write(&apos;&apos;);</span><br><span class=\"line\">        iframe.contentWindow.close();</span><br><span class=\"line\">        document.body.removeChild(iframe);</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\">    // 请求跨域b页面数据proxy</span><br><span class=\"line\">    (&apos;http://www.domain2.com/b.html&apos;,function(data) &#123;</span><br><span class=\"line\">        alert(data);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>2.proxy.html：(<a href=\"http://www.domain1.com/proxy.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/proxy.html</a>)</p>\n<p>中间代理页，与a.html同域，内容为空即可。</p>\n<p>3.b.html：(<a href=\"http://www.domain2.com/b.html\" target=\"_blank\" rel=\"noopener\">http://www.domain2.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt; window.name = &apos;This is domain2 data!&apos;;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n<h5 id=\"五、-postMessage跨域\"><a href=\"#五、-postMessage跨域\" class=\"headerlink\" title=\"五、 postMessage跨域\"></a>五、 postMessage跨域</h5><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>\n<p>a. 页面和其打开的新窗口的数据传递</p>\n<p>b. 多窗口之间消息传递</p>\n<p>c. 页面与嵌套的iframe消息传递</p>\n<p>d. 上面三个场景的跨域数据传递</p>\n<p>用法：postMessage(data,origin)方法接受两个参数</p>\n<p>data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</p>\n<p>origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</p>\n<p>1.a.html：(<a href=\"http://www.domain1.com/a.html\" target=\"_blank\" rel=\"noopener\">http://www.domain1.com/a.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe id=&quot;iframe&quot;src=&quot;http://www.domain2.com/b.html&quot;style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var iframe = document.getElementById(&apos;iframe&apos;);</span><br><span class=\"line\">    iframe.onload = function()&#123;</span><br><span class=\"line\">        var data = &#123; name: &apos;aym&apos; &#125;; // 向domain2传送跨域数据</span><br><span class=\"line\">        iframe.contentWindow.postMessage(JSON.stringify(data), &apos;http://www.domain2.com&apos;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // 接受domain2返回数据</span><br><span class=\"line\">    window.addEventListener (&apos;message&apos;, function(e) &#123;</span><br><span class=\"line\">        alert(&apos;data from domain2 ---&gt; &apos; + e.data);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.b.html：(<a href=\"http://www.domain2.com/b.html\" target=\"_blank\" rel=\"noopener\">http://www.domain2.com/b.html</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 接收domain1的数据</span><br><span class=\"line\">    window.addEventListener(&apos;message&apos;, function(e) &#123;</span><br><span class=\"line\">        alert(&apos;data from domain1 ---&gt; &apos; + e.data);</span><br><span class=\"line\">        var data = JSON.parse(e.data);</span><br><span class=\"line\">        if (data) &#123;</span><br><span class=\"line\">            data.number = 16; // 处理后再发回domain1</span><br><span class=\"line\">            window.parent.postMessage(JSON.stringify(data),&apos;http://www.domain1.com&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"六、-跨域资源共享（CORS）\"><a href=\"#六、-跨域资源共享（CORS）\" class=\"headerlink\" title=\"六、 跨域资源共享（CORS）\"></a>六、 跨域资源共享（CORS）</h5><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p>\n<p>需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。</p>\n<p>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p>\n<h5 id=\"1、-前端设置：\"><a href=\"#1、-前端设置：\" class=\"headerlink\" title=\"1、 前端设置：\"></a>1、 前端设置：</h5><p>1.原生ajax</p>\n<p><code>// 前端设置是否带cookiexhr.withCredentials = true;</code></p>\n<p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();// IE8/9需用window.XDomainRequest兼容</span><br><span class=\"line\">// 前端设置是否带cookiexhr.withCredentials = true;</span><br><span class=\"line\">xhr.open(&apos;post&apos;,&apos;http://www.domain2.com:8080/login&apos;, true);</span><br><span class=\"line\">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;);</span><br><span class=\"line\">xhr.send(&apos;user=admin&apos;);</span><br><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>2.jQuery ajax</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    xhrFields: &#123;</span><br><span class=\"line\">        withCredentials: true // 前端设置是否带cookie</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    crossDomain: true, // 会让请求头中包含跨域的额外信息，但不会含cookie</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3.vue框架</p>\n<p>在vue-resource封装的ajax组件中加入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.http.options.credentials = true</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、-服务端设置：\"><a href=\"#2、-服务端设置：\" class=\"headerlink\" title=\"2、 服务端设置：\"></a>2、 服务端设置：</h5><p>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。</p>\n<p>1.Java后台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* * 导入包：</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">* 接口参数中定义：</span><br><span class=\"line\">HttpServletResponse response</span><br><span class=\"line\">*/response.setHeader (&quot;Access-Control-Allow-Origin&quot;,&quot;http://www.domain1.com&quot;);</span><br><span class=\"line\">// 若有端口需写全（协议+域名+端口）</span><br><span class=\"line\">response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure>\n<p>2.Nodejs后台示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var server = http.createServer();</span><br><span class=\"line\">var qs = require(&apos;querystring&apos;);</span><br><span class=\"line\">server.on(&apos;request&apos;, function(req, res)&#123;</span><br><span class=\"line\">    var postData = &apos;&apos;; // 数据块接收中</span><br><span class=\"line\">    req.addListener(&apos;data&apos;, function(chunk) &#123; postData += chunk; &#125;); // 数据接收完毕 req.addListener(&apos;end&apos;,function()&#123; postData = qs.parse(postData); // 跨域后台设置 res.writeHead(200, &#123; &apos;Access-Control-Allow-Credentials&apos;: &apos;true&apos;, // 后端允许发送Cookie &apos;Access-Control-Allow-Origin&apos;:&apos;http://www.domain1.com&apos;,//允许访问的域（协议+域名+端口）</span><br><span class=\"line\">    &apos;Set-Cookie&apos;:&apos;l=a123456;Path=/;Domain=www.domain2.com; HttpOnly&apos; // HttpOnly:脚本无法读取cookie</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">res.write(JSON.stringify(postData)); res.end(); &#125;);&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"七、-nginx代理跨域\"><a href=\"#七、-nginx代理跨域\" class=\"headerlink\" title=\"七、 nginx代理跨域\"></a>七、 nginx代理跨域</h4><p>1.nginx配置解决iconfont跨域</p>\n<p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p>\n<p><code>location / { add_header Access-Control-Allow-Origin *;}</code></p>\n<p>2.nginx反向代理接口跨域</p>\n<p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p>\n<p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p>\n<h5 id=\"nginx具体配置：\"><a href=\"#nginx具体配置：\" class=\"headerlink\" title=\"nginx具体配置：\"></a>nginx具体配置：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#proxy服务器server &#123;</span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    server_name www.domain1.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass</span><br><span class=\"line\">        http://www.domain2.com:8080;</span><br><span class=\"line\">        #反向代理</span><br><span class=\"line\">            proxy_cookie_domain</span><br><span class=\"line\">                www.domain2.com www.domain1.com;</span><br><span class=\"line\">        #修改cookie里域名</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        # 当用webpack-dev-server等中间件代理接口访问nignx时,此时无浏览器参与, 故没有同源限制,下面的跨域配置可不启用</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin</span><br><span class=\"line\">            http://www.domain1.com;</span><br><span class=\"line\">        #当前端只跨域不带cookie时， 可为*</span><br><span class=\"line\">            add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">    &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>1.前端代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();// 前端开关：</span><br><span class=\"line\">浏览器是否读写cookiexhr.withCredentials = true;</span><br><span class=\"line\">// 访问nginx中的代理服务器</span><br><span class=\"line\">xhr.open(&apos;get&apos;, &apos;http://www.domain1.com:81/?user=admin&apos;, true);</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>2.Nodejs后台示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var server = http.createServer();</span><br><span class=\"line\">var qs = require(&apos;querystring&apos;);</span><br><span class=\"line\">server.on(&apos;request&apos;, function(req, res) &#123;</span><br><span class=\"line\">    var params = qs.parse(req.url.substring(2)); // 向前台写cookie</span><br><span class=\"line\">    res.writeHead(200, &#123; &apos;Set-Cookie&apos;: &apos;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&apos; // HttpOnly:脚本无法读取 &#125;);</span><br><span class=\"line\">    res.write(JSON.stringify(params));</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"八、-Nodejs中间件代理跨域\"><a href=\"#八、-Nodejs中间件代理跨域\" class=\"headerlink\" title=\"八、 Nodejs中间件代理跨域\"></a>八、 Nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p>\n<h5 id=\"1、-非vue框架的跨域（2次跨域）\"><a href=\"#1、-非vue框架的跨域（2次跨域）\" class=\"headerlink\" title=\"1、 非vue框架的跨域（2次跨域）\"></a>1、 非vue框架的跨域（2次跨域）</h5><p>利用node + express + http-proxy-middleware搭建一个proxy服务器。</p>\n<p>1.前端代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">// 前端开关：</span><br><span class=\"line\">浏览器是否读写cookiexhr.withCredentials = true;</span><br><span class=\"line\">// 访问http-proxy-middleware代理服务器</span><br><span class=\"line\">xhr.open(&apos;get&apos;, &apos;http://www.domain1.com:3000/login? user=admin&apos;, true);</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>2.中间件服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var proxy = require(&apos;http-proxy-middleware&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(&apos;/&apos;, proxy(&#123; // 代理跨域目标接口</span><br><span class=\"line\">    target: &apos;http://www.domain2.com:8080&apos;,</span><br><span class=\"line\">    changeOrigin: true,</span><br><span class=\"line\">    // 修改响应头信息，实现跨域并允许带cookie</span><br><span class=\"line\">    onProxyRes: function(proxyRes, req, res) &#123;</span><br><span class=\"line\">        res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;http://www.domain1.com&apos;); res.header(&apos;Access-Control-Allow-Credentials&apos;, &apos;true&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 修改响应信息中的cookie域名</span><br><span class=\"line\">    cookieDomainRewrite: &apos;www.domain1.com&apos;</span><br><span class=\"line\">    // 可以为false，表示不修改</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.listen(3000);</span><br><span class=\"line\">console.log(&apos; Proxy server is listen at port 3000...&apos;);</span><br></pre></td></tr></table></figure>\n<p>3.Nodejs后台同（六：nginx）</p>\n<h5 id=\"2、-vue框架的跨域（1次跨域）\"><a href=\"#2、-vue框架的跨域（1次跨域）\" class=\"headerlink\" title=\"2、 vue框架的跨域（1次跨域）\"></a>2、 vue框架的跨域（1次跨域）</h5><p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p>\n<p>webpack.config.js部分配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;&#125;,</span><br><span class=\"line\">    module: &#123;&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        historyApiFallback: true,</span><br><span class=\"line\">        proxy: [&#123;</span><br><span class=\"line\">            context: &apos;/login&apos;,</span><br><span class=\"line\">            target: &apos;http://www.domain2.com:8080&apos;, // 代理跨域目标接口</span><br><span class=\"line\">            changeOrigin: true,</span><br><span class=\"line\">            secure: false,</span><br><span class=\"line\">            // 当代理某些https服务报错时用</span><br><span class=\"line\">            cookieDomainRewrite: &apos;www.domain1.com&apos; // 可以为false，表示不修改</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        noInfo: true</span><br><span class=\"line\">    &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"九、-WebSocket协议跨域\"><a href=\"#九、-WebSocket协议跨域\" class=\"headerlink\" title=\"九、 WebSocket协议跨域\"></a>九、 WebSocket协议跨域</h4><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。</p>\n<p>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p>\n<p>1.前端代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;user input：&lt;input type=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;./socket.io.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var socket = io(&apos; http://www.domain2.com:8080&apos;);// 连接成功处理</span><br><span class=\"line\">    socket.on(&apos;connect&apos;, function() &#123;</span><br><span class=\"line\">        // 监听服务端消息</span><br><span class=\"line\">        socket.on(&apos;message&apos;, function(msg)&#123;</span><br><span class=\"line\">            console.log(&apos;data from server: ---&gt; &apos; + msg);</span><br><span class=\"line\">         &#125;);</span><br><span class=\"line\">         // 监听服务端关闭</span><br><span class=\"line\">         socket.on(&apos;disconnect&apos;, function() &#123;</span><br><span class=\"line\">             console.log(&apos;Server socket has closed.&apos;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    document.getElementsByTagName(&apos;input&apos;) [0].onblur = function() &#123;</span><br><span class=\"line\">        socket.send(this.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2.Nodejs socket后台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var socket = require(&apos;socket.io&apos;);// 启http服务</span><br><span class=\"line\">var server = http.createServer(function(req, res)&#123;</span><br><span class=\"line\">    res.writeHead(200, &#123; &apos;Content-type&apos;: &apos;text/html&apos; &#125;); res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(&apos;8080&apos;);</span><br><span class=\"line\">console.log(&apos;Server is running at port 8080...&apos;);</span><br><span class=\"line\">// 监听socket连接</span><br><span class=\"line\">socket.listen(server).on(&apos;connection&apos;, function(client)&#123;</span><br><span class=\"line\">    // 接收信息</span><br><span class=\"line\">    client.on(&apos;message&apos;, function(msg) &#123;</span><br><span class=\"line\">        client.send(&apos;hello：&apos; + msg);</span><br><span class=\"line\">        console.log(&apos;data from client: ---&gt; &apos; + msg);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    // 断开处理</span><br><span class=\"line\">    client.on(&apos;disconnect&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;Client socket has closed.&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDA2MTI1MA==&amp;mid=2649087278&amp;idx=1&amp;sn=7a37b6241177f7bb5c27f72c73eb804e&amp;chksm=be5bfa83892c7395b0ca161bc5a0ef5d51fbf15ff8c153899fb032ae735972bca58d65b7d8b3&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">参考原文</a></p>"},{"title":"深入分析javascript中的错误处理机制","date":"2017-11-23T12:19:00.000Z","_content":"## 深入分析javascript中的错误处理机制\n\n#### 前面的话\n错误处理对于web应用程序开发至关重要，不能提前预测到可能发生的错误，不能提前采取恢复策略，可能导致较差的用户体验。由于任何javascript错误都可能导致网页无法使用，因此作为开发人员，必须要知道何时可能出错，为什么会出错，以及会出什么错。本文将详细介绍javascript中的错误处理机制\n\n#### error对象\nerror对象是包含错误信息的对象，是javascript的原生对象。当代码解析或运行时发生错误，javascript引擎就会自动产生并抛出一个error对象的实例，然后整个程序就中断在发生错误的地方\n\n`console.log(t);    //Uncaught ReferenceError: t is not defined`\n\nECMA-262规定了error对象包括两个属性：message和name。message属性保存着错误信息，而name属性保存错误类型\n\n```\n//一般地，使用try-catch语句来捕获错误\ntry {\n    t;\n} catch(ex) {\n    console.log(ex.message);    //t is not defined\n    console.log(ex.name);   //ReferenceError\n}\n```\n\n<!--more-->\n\n浏览器还对error对象的属性做了扩展，添加了其他相关信息。其中各浏览器厂商实现最多的是stack属性，它表示栈跟踪信息(safari不支持)\n\n```\ntry {\n    t;\n} catch(ex) {\n    console.log(ex.stack);  //@file:///D:/wamp/www/form.html:12:2\n}\n```\n\n当然，可以使用error()构造函数来创建错误对象。如果指定message参数，则该error对象将把它用做它的message属性；若不指定，它将使用一个预定义的默认字符串作为该属性的值\n\n```\nnew Error();\nnew Error(message);\n\n//一般地，使用throw语句来抛出错误\nthrow new Error('test');    //Uncaught Error: test\nthrow new Error();  //Uncaught Error\n```\n\n```\nfunction UserError(message) {\n   this.message = message;\n   this.name = \"UserError\";\n}\nUserError.prototype = new Error();\nUserError.prototype.constructor = UserError;\nthrow new UserError(\"errorMessage\");   //Uncaught UserError: errorMessage\n```\n\n当不使用new操作符，直接将Error()构造函数像一个函数一样调用时，它的行为和带new操作符调用时一样\n\n```\nError();\nError(message);\nthrow Error('test');    //Uncaught Error: test\nthrow Error();  //Uncaught Error\n```\nerror对象有一个toString()方法，返回'Error:'+ error对象的message属性\n\n```\nvar test = new Error('testError');\nconsole.log(test.toString());   //'Error: testError'\n```\n\n#### error类型\n执行代码期间可能会发生的错误有多种类型。每种错误都有对应的错误类型，而当错误发生时，就会抛出相应类型的错误对象。ECMA-262定义了下列7种错误类型：\n\n```\nError\nEvalError(eval错误)\nRangeError(范围错误)\nReferenceError(引用错误)\nSyntaxError(语法错误)\nTypeError(类型错误)\nURIError(URI错误)\n```\n其中，Error是基类型，其他错误类型都继承自该类型。因此，所有错误类型共享了一组相同的属性。Error类型的错误很少见，如果有也是浏览器抛出的；这个基类型的主要目的是供开发人员抛出自定义错误\n\n##### 【EvalError(eval错误)】\n\neval函数没有被正确执行时，会抛出EvalError错误。该错误类型已经不再在ES5中出现了，只是为了保证与以前代码兼容，才继续保留\n\n##### 【RangeError(范围错误)】\n\nRangeError类型的错误会在一个值超出相应范围时触发，主要包括超出数组长度范围以及超出数字取值范围等\n\n```\nnew Array(-1);  //Uncaught RangeError: Invalid array length\nnew Array(Number.MAX_VALUE);    //Uncaught RangeError: Invalid array length\n(1234).toExponential(21);   //Uncaught RangeError: toExponential() argument must be between 0 and 20\n(1234).toExponential(-1);   //Uncaught RangeError: toExponential() argument must be between 0 and 20\n```\n\n##### 【ReferenceError(引用错误)】\n\n引用一个不存在的变量或左值(lvalue)类型错误时，会触发ReferenceError(引用错误)\n\n`a; //Uncaught ReferenceError: a is not defined`\n\n`1++;  //Uncaught ReferenceError: Invalid left-hand side expression in postfix operation`\n\n##### 【SyntaxError(语法错误)】\n\n当不符合语法规则时，会抛出SyntaxError(语法错误)\n\n```\n//变量名错误\nvar 1a;  //Uncaught SyntaxError: Unexpected number\n// 缺少括号\nconsole.log 'hello');   //Uncaught SyntaxError: Unexpected string\n```\n\n##### 【TypeError(类型错误)】\n\n在变量中保存着意外的类型时，或者在访问不存在的方法时，都会导致TypeError类型错误。错误的原因虽然多种多样，但归根结底还是由于在执行特定类型的操作时，变量的类型并不符合要求所致\n\n```\nvar o = new 10;  //Uncaught TypeError: 10 is not a constructor\nalert('name' in true);  //Uncaught TypeError: Cannot use 'in' operator to search for 'name' in true\nFunction.prototype.toString.call('name');   //Uncaught TypeError: Function.prototype.toString is not generic\n```\n\n##### 【URIError(URI错误)】\n\nURIError是URI相关函数的参数不正确时抛出的错误，主要涉及encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape()这六个函数\n\n`decodeURI('%2');   // URIError: URI malformed`\n\n#### error事件\n任何没有通过try-catch处理的错误都会触发window对象的error事件\n\nerror事件可以接收三个参数：错误消息、错误所在的URL和行号。多数情况下，只有错误消息有用，因为URL只是给出了文档的位置，而行号所指的代码行既可能出自嵌入的JavaScript代码，也可能出自外部的文件\n\n要指定onerror事件处理程序，可以使用DOM0级技术，也可以使用DOM2级事件的标准格式\n\n```\n//DOM0级\nwindow.onerror = function(message,url,line) {\n    alert(message);\n}\n//DOM2级\nwindow.addEventListener(\"error\",function(message,url,line) {\n    alert(message);\n});\n```\n\n浏览器是否显示标准的错误消息，取决于onerror的返回值。如果返回值为false，则在控制台中显示错误消息；如果返回值为true，则不显示\n\n```\n//控制台显示错误消息\nwindow.onerror = function(message,url,line) {\n    alert(message);\n    return false;\n}\na;\n//控制台不显示错误消息\nwindow.onerror = function(message,url,line) {\n    alert(message);\n    return true;\n}\na;\n```\n\n这个事件处理程序是避免浏览器报告错误的最后一道防线。理想情况下，只要可能就不应该使用它。只要能够适当地使用try-catch语句，就不会有错误交给浏览器，也就不会触发error事件\n\n图像也支持error事件。只要图像的src特性中的URL不能返回可以被识别的图像格式，就会触发error事件。此时的error事件遵循DOM格式，会返回一个以图像为目标的event对象\n\n加载图像失败时会显示一个警告框。发生error事件时，图像下载过程已经结束，也就是不能再重新下载了\n\n```\n\nvar image = new Image();\nimage.src = 'smilex.gif';\nimage.onerror = function(e) {\n    console.log(e);\n}\n```\n\n#### throw语句与抛出错误\n\nthrow语句用于抛出错误。抛出错误时，必须要给throw语句指定一个值，这个值是什么类型，没有要求\n\n[注意]抛出错误的过程是阻塞的，后续代码将不会执行\n\n```\nthrow 12345;\nthrow 'hello world';\nthrow true;\nthrow {name: 'javascript'};\n```\n可以使用throw语句手动抛出一个Error对象\n\n```\nthrow new Error('something bad happened');\nthrow new SyntaxError('I don\\'t like your syntax.');\nthrow new TypeError('what type of variable do you take me for?');\nthrow new RangeError('sorry,you just don\\'t have the range.');\nthrow new EvalError('That doesn\\'t evaluate.');\nthrow new URIError('URI, is that you?');\nthrow new ReferenceError('you didn\\'t cite your references properly');\n```\n\n利用原型链还可以通过继承Error来创建自定义错误类型（原型链在第6章中介绍）。此时，需要为新创建的错误类型指定name和message属性\n\n浏览器对待继承自Error的自定义错误类型，就像对待其他错误类型一样。如果要捕获自己抛出的错误并且把它与浏览器错误区别对待的话，创建自定义错误是很有用的\n\n```\nfunction CustomError(message){\n    this.name = 'CustomError';\n    this.message = message;\n}\nCustomError.prototype = new Error();\nthrow new CustomError('my message');\n```\n在遇到throw语句时，代码会立即停止执行。仅当有try-catch语句捕获到被抛出的值时，代码才会继续执行\n\n更详细的解释为：当抛出异常时，javascript解释器会立即停止当前正在执行的逻辑，并跳转到就近的异常处理程序。异常处理程序是用try-catch语句的catch从句编写的。如果抛出异常的代码块没有一条相关联的catch从句，解释器会检查更高层的闭合代码块，看它是否有相关联的异常处理程序。以此类推，直到找到一个异常处理程序为止。如果抛出异常的函数没有处理它的try-catch语句，异常将向上传播到调用该函数的代码。这样的话，异常就会沿着javascript方法的词法结构和调用栈向上传播。如果没有找到任何异常处理程序，javascript将把异常当成程序错误来处理，并报告给用户\n\n#### try catch语句与捕获错误\n\nECMA-262第3版引入了try-catch语句，作为JavaScript中处理异常的一种标准方式，用于捕获和处理错误\n\n其中，try从句定义了需要处理的异常所在的代码块。catch从句跟随在try从句之后，当try块内某处发生了异常时，调用catch内的代码逻辑。catch从句后跟随finally块，后者中放置清理代码，不管try块中是否产生异常，finally块内的逻辑总是会执行。尽管catch和finally都是可选的，但try从句需要至少二者之一与之组成完整的语句\n\ntry/catch/finally语句块都需要使用花括号括起来，这里的花括号是必需的，即使从句中只有一条语句也不能省略花括号\n\n```\ntry {\n    //通常来讲，这里的代码会从头到尾而不会产生任何问题\n    //但有时会抛出一个异常，要么是由throw语句直接抛出，要么通过调用一个方法间接抛出\n} catch(e) {\n    //当且仅当try语句块抛出了异常，才会执行这里的代码\n    //这里可以通过局部变量e来获得对Error对象或者抛出的其他值的引用\n    //这里的代码块可以基于某种原因处理这个异常，也可以忽略这个异常，还可以通过throw语句重新抛出异常\n} finally {\n    //不管try语句是否抛出了异常，finally里的逻辑总是会执行，终止try语句块的方式有：\n    //1、正常终止，执行完语句块的最后一条语句\n    //2、通过break、continue或return语句终止\n    //3、抛出一个异常，异常被catch从句捕获\n    //4、抛出一个异常，异常未被捕获，继续向上传播\n}\n```\n\n一般地，把所有可能会抛出错误的代码都放在try语句块中，而把那些用于错误处理的代码放在catch块中\n\n如果try块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行catch块。此时，catch块会接收到一个错误信息的对象，这个对象中包含的实际信息会因浏览器而异，但共同的是有一个保存着错误消息的message属性\n\n[注意]一定要给error对象起个名字，置空会报语法错误\n\n```\ntry {\n    q;\n} catch(error) {\n    alert(error.message);  //q is not defined\n}\n//Uncaught SyntaxError: Unexpected token\ntry {\n    q;\n} catch() {\n    alert(error.message);\n}\n```\ncatch接受一个参数，表示try代码块抛出的值\n\n```\nfunction throwIt(exception) {\n  try {\n    throw exception;\n  } catch (e) {\n    console.log('Caught: '+ e);\n  }\n}\nthrowIt(3);    // Caught: 3\nthrowIt('hello');   // Caught: hello\nthrowIt(new Error('An error happened'));    // Caught: Error: An error happened\n```\n\ncatch代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去\n\n```\ntry {\n  throw \"出错了\";\n} catch (e) {\n  console.log(111);\n}\nconsole.log(222);\n// 111\n// 222\n```\n为了捕捉不同类型的错误，catch代码块之中可以加入判断语句\n\n```\ntry {\n  foo.bar();\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.log(e.name + \": \" + e.message);\n  } else if (e instanceof RangeError) {\n    console.log(e.name + \": \" + e.message);\n  }\n  // ...\n}\n```\n\n虽然finally子句在try-catch语句中是可选的，但finally子句一经使用，其代码无论如何都会执行。换句话说，try语句块中的代码全部正常执行，finally子句会执行；如果因为出错而执行了catch语句块，finally子句照样还会执行。只要代码中包含finally子句，则无论try或catch语句块中包含什么代码——甚至return语句，都不会阻止finally子句的执行\n\n```\n//由于没有catch语句块，所以错误没有捕获。执行finally代码块以后，程序就中断在错误抛出的地方\nfunction cleansUp() {\n  try {\n    throw new Error('出错了……');\n    console.log('此行不会执行');\n  } finally {\n    console.log('完成清理工作');\n  }\n}\ncleansUp();\n// 完成清理工作\n// Error: 出错了……\n```\n\n```\nfunction testFinnally() {\n    try {\n        return 2;\n    } catch(error) {\n        return 1;\n    } finally {\n        return 0;\n    }\n}\ntestFinnally(); //0\n```\n\n[注意]return语句的count的值，是在finally代码块运行之前，就获取完成了\n\n```\nvar count = 0;\nfunction countUp() {\n  try {\n    return count;\n  } finally {\n    count++;\n  }\n}\ncountUp();  // 0\nconsole.log(count); // 1\n```\n\n```\nfunction f() {\n  try {\n    console.log(0);\n    throw \"bug\";\n  } catch(e) {\n    console.log(1);\n    return true; // 这句原本会延迟到finally代码块结束再执行\n    console.log(2); // 不会运行\n  } finally {\n    console.log(3);\n    return false; // 这句会覆盖掉前面那句return\n    console.log(4); // 不会运行\n  }\n  console.log(5); // 不会运行\n}\nvar result = f();\n// 0\n// 1\n// 3\nconsole.log(result);    // false\n```\n\n##### 【tips】块级作用域\n\ntry-catch语句的一个常见用途是创建块级作用域，其中声明的变量仅仅在catch内部有效\n\nES6引入了let关键字，为其声明的变量创建块级作用域。但是，在目前ES3和ES5的情况下，常常使用try-catch语句来实现类似的效果\n\n由下面代码可知，e仅存在于catch分句内部，当试图从别处引用它时会抛出错误\n\n```\ntry {\n    throw new Error();  //抛出错误\n} catch(e) {\n    console.log(e); //Error(…)\n}\nconsole.log(e); //Uncaught ReferenceError: e is not defined\n```\n\n#### 常见错误\n\n错误处理的核心是首先要知道代码里会发生什么错误。由于javaScript是松散类型的，而且也不会验证函数的参数，因此错误只会在代码期间出现。一般来说，需要关注三种错误：类型转换错误、数据类型错误、通信错误\n\n##### 【类型转换错误】\n\n类型转换错误发生在使用某个操作符，或者使用其他可能自动转换值的数据类型的语言结构时\n\n容易发生类型转换错误的地方是流控制语句。像if之类的语句在确定下一步操作之前，会自动把任何值转换成布尔值。尤其是if语句，如果使用不当，最容易出错\n\n未使用过的命名变量会自动被赋予undefined值。而undefined值可以被转换成布尔值false，因此下面这个函数中的if语句实际上只适用于提供了第三个参数的情况。问题在于，并不是只有undefined才会被转换成false，也不是只有字符串值才可以转换为true。例如，假设第三个参数是数值0，那么if语句的测试就会失败，而对数值1的测试则会通过\n\n```\nfunction concat(str1,str2,str3) {\n    var result = str1 + str2;\n    if(str3) { //绝对不要这样\n        result += str3;\n    }\n    return result;\n}\n```\n\n在流控制语句中使用非布尔值，是极为常见的一个错误来源。为避免此类错误，就要做到在条件比较时切实传入布尔值。实际上，执行某种形式的比较就可以达到这个目的\n\n```\nfunction concat(str1,str2,str3) {\n    var result = str1 + str2;\n    if(typeof str3 == 'string') { //更合适\n        result += str3;\n    }\n    return result;\n}\n```\n\n##### 【数据类型错误】\n　　javascript是松散类型的，在使用变量和函数参数之前，不会对它们进行比较以确保它们的数据类型正确。为了保证不会发生数据类型错误，只能编写适当的数据类型检测代码。在将预料之外的值传递绘函数的情况下，最容易发生数据类型错误\n\n```\n//不安全的函数，任何非数组值都会导致错误\nfunction reverseSort(values) {\n    if(values) {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n另一个常见的错误就是将参数与null值进行比较。与null进行比较只能确保相应的值不是null和undefined。要确保传入的值有效，仅检测null值是不够的\n\n```\n//不安全的函数，任何非数组值都会导致错误\nfunction reverseSort(values) {\n    if(values != null) {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n\n如果传入一个包含sort()方法的对象（而不是数组）会通过检测，但调用reverse()函数时可能会出错\n\n```\n//不安全的函数，任何非数组值都会导致错误\nfunction reverseSort(values) {\n    if(typeof values.sort == 'function') {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n\n在确切知道应该传入什么类型的情况下，最好是使用instanceof来检测其数据类型\n\n```\n//安全，非数组值被忽略\nfunction reverseSort(values) {\n    if(values instanceof Array) {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n\n##### 【通信错误】\n\n随着Ajax编程的兴起，Web应用程序在其生命周期内动态加载信息或功能，已经成为一件司空见惯的事。不过，javascript与服务器之间的任何一次通信，都有可能会产生错误\n\n最常见的问题是在将数据发送给服务器之前，没有使用encodeURIComponent()对数据进行编码\n\n```\n//错误\nhttp://www.yourdomain.com/?redir=http://www.sometherdomain.com?a=b&c=d\n//针对'redir='后面的所有字符串调用encodeURIComponent()就可以解决这个问题\nhttp://www.yourdomain.com/?redir=http:%3A%2F%2Fwww.sometherdomain.com%3Fa%3Db%26c%3Dd\n```\n\n[尊重原创，感谢原创分享](http://www.jb51.net/article/88743.htm)","source":"_posts/深入分析javascript中的错误处理机制.md","raw":"---\ntitle: 深入分析javascript中的错误处理机制\ndate: 2017-11-23 20:19:00\ncategories: 前端\ntags: JavaScript\n---\n## 深入分析javascript中的错误处理机制\n\n#### 前面的话\n错误处理对于web应用程序开发至关重要，不能提前预测到可能发生的错误，不能提前采取恢复策略，可能导致较差的用户体验。由于任何javascript错误都可能导致网页无法使用，因此作为开发人员，必须要知道何时可能出错，为什么会出错，以及会出什么错。本文将详细介绍javascript中的错误处理机制\n\n#### error对象\nerror对象是包含错误信息的对象，是javascript的原生对象。当代码解析或运行时发生错误，javascript引擎就会自动产生并抛出一个error对象的实例，然后整个程序就中断在发生错误的地方\n\n`console.log(t);    //Uncaught ReferenceError: t is not defined`\n\nECMA-262规定了error对象包括两个属性：message和name。message属性保存着错误信息，而name属性保存错误类型\n\n```\n//一般地，使用try-catch语句来捕获错误\ntry {\n    t;\n} catch(ex) {\n    console.log(ex.message);    //t is not defined\n    console.log(ex.name);   //ReferenceError\n}\n```\n\n<!--more-->\n\n浏览器还对error对象的属性做了扩展，添加了其他相关信息。其中各浏览器厂商实现最多的是stack属性，它表示栈跟踪信息(safari不支持)\n\n```\ntry {\n    t;\n} catch(ex) {\n    console.log(ex.stack);  //@file:///D:/wamp/www/form.html:12:2\n}\n```\n\n当然，可以使用error()构造函数来创建错误对象。如果指定message参数，则该error对象将把它用做它的message属性；若不指定，它将使用一个预定义的默认字符串作为该属性的值\n\n```\nnew Error();\nnew Error(message);\n\n//一般地，使用throw语句来抛出错误\nthrow new Error('test');    //Uncaught Error: test\nthrow new Error();  //Uncaught Error\n```\n\n```\nfunction UserError(message) {\n   this.message = message;\n   this.name = \"UserError\";\n}\nUserError.prototype = new Error();\nUserError.prototype.constructor = UserError;\nthrow new UserError(\"errorMessage\");   //Uncaught UserError: errorMessage\n```\n\n当不使用new操作符，直接将Error()构造函数像一个函数一样调用时，它的行为和带new操作符调用时一样\n\n```\nError();\nError(message);\nthrow Error('test');    //Uncaught Error: test\nthrow Error();  //Uncaught Error\n```\nerror对象有一个toString()方法，返回'Error:'+ error对象的message属性\n\n```\nvar test = new Error('testError');\nconsole.log(test.toString());   //'Error: testError'\n```\n\n#### error类型\n执行代码期间可能会发生的错误有多种类型。每种错误都有对应的错误类型，而当错误发生时，就会抛出相应类型的错误对象。ECMA-262定义了下列7种错误类型：\n\n```\nError\nEvalError(eval错误)\nRangeError(范围错误)\nReferenceError(引用错误)\nSyntaxError(语法错误)\nTypeError(类型错误)\nURIError(URI错误)\n```\n其中，Error是基类型，其他错误类型都继承自该类型。因此，所有错误类型共享了一组相同的属性。Error类型的错误很少见，如果有也是浏览器抛出的；这个基类型的主要目的是供开发人员抛出自定义错误\n\n##### 【EvalError(eval错误)】\n\neval函数没有被正确执行时，会抛出EvalError错误。该错误类型已经不再在ES5中出现了，只是为了保证与以前代码兼容，才继续保留\n\n##### 【RangeError(范围错误)】\n\nRangeError类型的错误会在一个值超出相应范围时触发，主要包括超出数组长度范围以及超出数字取值范围等\n\n```\nnew Array(-1);  //Uncaught RangeError: Invalid array length\nnew Array(Number.MAX_VALUE);    //Uncaught RangeError: Invalid array length\n(1234).toExponential(21);   //Uncaught RangeError: toExponential() argument must be between 0 and 20\n(1234).toExponential(-1);   //Uncaught RangeError: toExponential() argument must be between 0 and 20\n```\n\n##### 【ReferenceError(引用错误)】\n\n引用一个不存在的变量或左值(lvalue)类型错误时，会触发ReferenceError(引用错误)\n\n`a; //Uncaught ReferenceError: a is not defined`\n\n`1++;  //Uncaught ReferenceError: Invalid left-hand side expression in postfix operation`\n\n##### 【SyntaxError(语法错误)】\n\n当不符合语法规则时，会抛出SyntaxError(语法错误)\n\n```\n//变量名错误\nvar 1a;  //Uncaught SyntaxError: Unexpected number\n// 缺少括号\nconsole.log 'hello');   //Uncaught SyntaxError: Unexpected string\n```\n\n##### 【TypeError(类型错误)】\n\n在变量中保存着意外的类型时，或者在访问不存在的方法时，都会导致TypeError类型错误。错误的原因虽然多种多样，但归根结底还是由于在执行特定类型的操作时，变量的类型并不符合要求所致\n\n```\nvar o = new 10;  //Uncaught TypeError: 10 is not a constructor\nalert('name' in true);  //Uncaught TypeError: Cannot use 'in' operator to search for 'name' in true\nFunction.prototype.toString.call('name');   //Uncaught TypeError: Function.prototype.toString is not generic\n```\n\n##### 【URIError(URI错误)】\n\nURIError是URI相关函数的参数不正确时抛出的错误，主要涉及encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape()这六个函数\n\n`decodeURI('%2');   // URIError: URI malformed`\n\n#### error事件\n任何没有通过try-catch处理的错误都会触发window对象的error事件\n\nerror事件可以接收三个参数：错误消息、错误所在的URL和行号。多数情况下，只有错误消息有用，因为URL只是给出了文档的位置，而行号所指的代码行既可能出自嵌入的JavaScript代码，也可能出自外部的文件\n\n要指定onerror事件处理程序，可以使用DOM0级技术，也可以使用DOM2级事件的标准格式\n\n```\n//DOM0级\nwindow.onerror = function(message,url,line) {\n    alert(message);\n}\n//DOM2级\nwindow.addEventListener(\"error\",function(message,url,line) {\n    alert(message);\n});\n```\n\n浏览器是否显示标准的错误消息，取决于onerror的返回值。如果返回值为false，则在控制台中显示错误消息；如果返回值为true，则不显示\n\n```\n//控制台显示错误消息\nwindow.onerror = function(message,url,line) {\n    alert(message);\n    return false;\n}\na;\n//控制台不显示错误消息\nwindow.onerror = function(message,url,line) {\n    alert(message);\n    return true;\n}\na;\n```\n\n这个事件处理程序是避免浏览器报告错误的最后一道防线。理想情况下，只要可能就不应该使用它。只要能够适当地使用try-catch语句，就不会有错误交给浏览器，也就不会触发error事件\n\n图像也支持error事件。只要图像的src特性中的URL不能返回可以被识别的图像格式，就会触发error事件。此时的error事件遵循DOM格式，会返回一个以图像为目标的event对象\n\n加载图像失败时会显示一个警告框。发生error事件时，图像下载过程已经结束，也就是不能再重新下载了\n\n```\n\nvar image = new Image();\nimage.src = 'smilex.gif';\nimage.onerror = function(e) {\n    console.log(e);\n}\n```\n\n#### throw语句与抛出错误\n\nthrow语句用于抛出错误。抛出错误时，必须要给throw语句指定一个值，这个值是什么类型，没有要求\n\n[注意]抛出错误的过程是阻塞的，后续代码将不会执行\n\n```\nthrow 12345;\nthrow 'hello world';\nthrow true;\nthrow {name: 'javascript'};\n```\n可以使用throw语句手动抛出一个Error对象\n\n```\nthrow new Error('something bad happened');\nthrow new SyntaxError('I don\\'t like your syntax.');\nthrow new TypeError('what type of variable do you take me for?');\nthrow new RangeError('sorry,you just don\\'t have the range.');\nthrow new EvalError('That doesn\\'t evaluate.');\nthrow new URIError('URI, is that you?');\nthrow new ReferenceError('you didn\\'t cite your references properly');\n```\n\n利用原型链还可以通过继承Error来创建自定义错误类型（原型链在第6章中介绍）。此时，需要为新创建的错误类型指定name和message属性\n\n浏览器对待继承自Error的自定义错误类型，就像对待其他错误类型一样。如果要捕获自己抛出的错误并且把它与浏览器错误区别对待的话，创建自定义错误是很有用的\n\n```\nfunction CustomError(message){\n    this.name = 'CustomError';\n    this.message = message;\n}\nCustomError.prototype = new Error();\nthrow new CustomError('my message');\n```\n在遇到throw语句时，代码会立即停止执行。仅当有try-catch语句捕获到被抛出的值时，代码才会继续执行\n\n更详细的解释为：当抛出异常时，javascript解释器会立即停止当前正在执行的逻辑，并跳转到就近的异常处理程序。异常处理程序是用try-catch语句的catch从句编写的。如果抛出异常的代码块没有一条相关联的catch从句，解释器会检查更高层的闭合代码块，看它是否有相关联的异常处理程序。以此类推，直到找到一个异常处理程序为止。如果抛出异常的函数没有处理它的try-catch语句，异常将向上传播到调用该函数的代码。这样的话，异常就会沿着javascript方法的词法结构和调用栈向上传播。如果没有找到任何异常处理程序，javascript将把异常当成程序错误来处理，并报告给用户\n\n#### try catch语句与捕获错误\n\nECMA-262第3版引入了try-catch语句，作为JavaScript中处理异常的一种标准方式，用于捕获和处理错误\n\n其中，try从句定义了需要处理的异常所在的代码块。catch从句跟随在try从句之后，当try块内某处发生了异常时，调用catch内的代码逻辑。catch从句后跟随finally块，后者中放置清理代码，不管try块中是否产生异常，finally块内的逻辑总是会执行。尽管catch和finally都是可选的，但try从句需要至少二者之一与之组成完整的语句\n\ntry/catch/finally语句块都需要使用花括号括起来，这里的花括号是必需的，即使从句中只有一条语句也不能省略花括号\n\n```\ntry {\n    //通常来讲，这里的代码会从头到尾而不会产生任何问题\n    //但有时会抛出一个异常，要么是由throw语句直接抛出，要么通过调用一个方法间接抛出\n} catch(e) {\n    //当且仅当try语句块抛出了异常，才会执行这里的代码\n    //这里可以通过局部变量e来获得对Error对象或者抛出的其他值的引用\n    //这里的代码块可以基于某种原因处理这个异常，也可以忽略这个异常，还可以通过throw语句重新抛出异常\n} finally {\n    //不管try语句是否抛出了异常，finally里的逻辑总是会执行，终止try语句块的方式有：\n    //1、正常终止，执行完语句块的最后一条语句\n    //2、通过break、continue或return语句终止\n    //3、抛出一个异常，异常被catch从句捕获\n    //4、抛出一个异常，异常未被捕获，继续向上传播\n}\n```\n\n一般地，把所有可能会抛出错误的代码都放在try语句块中，而把那些用于错误处理的代码放在catch块中\n\n如果try块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行catch块。此时，catch块会接收到一个错误信息的对象，这个对象中包含的实际信息会因浏览器而异，但共同的是有一个保存着错误消息的message属性\n\n[注意]一定要给error对象起个名字，置空会报语法错误\n\n```\ntry {\n    q;\n} catch(error) {\n    alert(error.message);  //q is not defined\n}\n//Uncaught SyntaxError: Unexpected token\ntry {\n    q;\n} catch() {\n    alert(error.message);\n}\n```\ncatch接受一个参数，表示try代码块抛出的值\n\n```\nfunction throwIt(exception) {\n  try {\n    throw exception;\n  } catch (e) {\n    console.log('Caught: '+ e);\n  }\n}\nthrowIt(3);    // Caught: 3\nthrowIt('hello');   // Caught: hello\nthrowIt(new Error('An error happened'));    // Caught: Error: An error happened\n```\n\ncatch代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去\n\n```\ntry {\n  throw \"出错了\";\n} catch (e) {\n  console.log(111);\n}\nconsole.log(222);\n// 111\n// 222\n```\n为了捕捉不同类型的错误，catch代码块之中可以加入判断语句\n\n```\ntry {\n  foo.bar();\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.log(e.name + \": \" + e.message);\n  } else if (e instanceof RangeError) {\n    console.log(e.name + \": \" + e.message);\n  }\n  // ...\n}\n```\n\n虽然finally子句在try-catch语句中是可选的，但finally子句一经使用，其代码无论如何都会执行。换句话说，try语句块中的代码全部正常执行，finally子句会执行；如果因为出错而执行了catch语句块，finally子句照样还会执行。只要代码中包含finally子句，则无论try或catch语句块中包含什么代码——甚至return语句，都不会阻止finally子句的执行\n\n```\n//由于没有catch语句块，所以错误没有捕获。执行finally代码块以后，程序就中断在错误抛出的地方\nfunction cleansUp() {\n  try {\n    throw new Error('出错了……');\n    console.log('此行不会执行');\n  } finally {\n    console.log('完成清理工作');\n  }\n}\ncleansUp();\n// 完成清理工作\n// Error: 出错了……\n```\n\n```\nfunction testFinnally() {\n    try {\n        return 2;\n    } catch(error) {\n        return 1;\n    } finally {\n        return 0;\n    }\n}\ntestFinnally(); //0\n```\n\n[注意]return语句的count的值，是在finally代码块运行之前，就获取完成了\n\n```\nvar count = 0;\nfunction countUp() {\n  try {\n    return count;\n  } finally {\n    count++;\n  }\n}\ncountUp();  // 0\nconsole.log(count); // 1\n```\n\n```\nfunction f() {\n  try {\n    console.log(0);\n    throw \"bug\";\n  } catch(e) {\n    console.log(1);\n    return true; // 这句原本会延迟到finally代码块结束再执行\n    console.log(2); // 不会运行\n  } finally {\n    console.log(3);\n    return false; // 这句会覆盖掉前面那句return\n    console.log(4); // 不会运行\n  }\n  console.log(5); // 不会运行\n}\nvar result = f();\n// 0\n// 1\n// 3\nconsole.log(result);    // false\n```\n\n##### 【tips】块级作用域\n\ntry-catch语句的一个常见用途是创建块级作用域，其中声明的变量仅仅在catch内部有效\n\nES6引入了let关键字，为其声明的变量创建块级作用域。但是，在目前ES3和ES5的情况下，常常使用try-catch语句来实现类似的效果\n\n由下面代码可知，e仅存在于catch分句内部，当试图从别处引用它时会抛出错误\n\n```\ntry {\n    throw new Error();  //抛出错误\n} catch(e) {\n    console.log(e); //Error(…)\n}\nconsole.log(e); //Uncaught ReferenceError: e is not defined\n```\n\n#### 常见错误\n\n错误处理的核心是首先要知道代码里会发生什么错误。由于javaScript是松散类型的，而且也不会验证函数的参数，因此错误只会在代码期间出现。一般来说，需要关注三种错误：类型转换错误、数据类型错误、通信错误\n\n##### 【类型转换错误】\n\n类型转换错误发生在使用某个操作符，或者使用其他可能自动转换值的数据类型的语言结构时\n\n容易发生类型转换错误的地方是流控制语句。像if之类的语句在确定下一步操作之前，会自动把任何值转换成布尔值。尤其是if语句，如果使用不当，最容易出错\n\n未使用过的命名变量会自动被赋予undefined值。而undefined值可以被转换成布尔值false，因此下面这个函数中的if语句实际上只适用于提供了第三个参数的情况。问题在于，并不是只有undefined才会被转换成false，也不是只有字符串值才可以转换为true。例如，假设第三个参数是数值0，那么if语句的测试就会失败，而对数值1的测试则会通过\n\n```\nfunction concat(str1,str2,str3) {\n    var result = str1 + str2;\n    if(str3) { //绝对不要这样\n        result += str3;\n    }\n    return result;\n}\n```\n\n在流控制语句中使用非布尔值，是极为常见的一个错误来源。为避免此类错误，就要做到在条件比较时切实传入布尔值。实际上，执行某种形式的比较就可以达到这个目的\n\n```\nfunction concat(str1,str2,str3) {\n    var result = str1 + str2;\n    if(typeof str3 == 'string') { //更合适\n        result += str3;\n    }\n    return result;\n}\n```\n\n##### 【数据类型错误】\n　　javascript是松散类型的，在使用变量和函数参数之前，不会对它们进行比较以确保它们的数据类型正确。为了保证不会发生数据类型错误，只能编写适当的数据类型检测代码。在将预料之外的值传递绘函数的情况下，最容易发生数据类型错误\n\n```\n//不安全的函数，任何非数组值都会导致错误\nfunction reverseSort(values) {\n    if(values) {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n另一个常见的错误就是将参数与null值进行比较。与null进行比较只能确保相应的值不是null和undefined。要确保传入的值有效，仅检测null值是不够的\n\n```\n//不安全的函数，任何非数组值都会导致错误\nfunction reverseSort(values) {\n    if(values != null) {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n\n如果传入一个包含sort()方法的对象（而不是数组）会通过检测，但调用reverse()函数时可能会出错\n\n```\n//不安全的函数，任何非数组值都会导致错误\nfunction reverseSort(values) {\n    if(typeof values.sort == 'function') {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n\n在确切知道应该传入什么类型的情况下，最好是使用instanceof来检测其数据类型\n\n```\n//安全，非数组值被忽略\nfunction reverseSort(values) {\n    if(values instanceof Array) {\n        values.sort();\n        values.reverse();\n    }\n}\n```\n\n##### 【通信错误】\n\n随着Ajax编程的兴起，Web应用程序在其生命周期内动态加载信息或功能，已经成为一件司空见惯的事。不过，javascript与服务器之间的任何一次通信，都有可能会产生错误\n\n最常见的问题是在将数据发送给服务器之前，没有使用encodeURIComponent()对数据进行编码\n\n```\n//错误\nhttp://www.yourdomain.com/?redir=http://www.sometherdomain.com?a=b&c=d\n//针对'redir='后面的所有字符串调用encodeURIComponent()就可以解决这个问题\nhttp://www.yourdomain.com/?redir=http:%3A%2F%2Fwww.sometherdomain.com%3Fa%3Db%26c%3Dd\n```\n\n[尊重原创，感谢原创分享](http://www.jb51.net/article/88743.htm)","slug":"深入分析javascript中的错误处理机制","published":1,"updated":"2018-02-23T01:39:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmp001llxnd73w6tuhq","content":"<h2 id=\"深入分析javascript中的错误处理机制\"><a href=\"#深入分析javascript中的错误处理机制\" class=\"headerlink\" title=\"深入分析javascript中的错误处理机制\"></a>深入分析javascript中的错误处理机制</h2><h4 id=\"前面的话\"><a href=\"#前面的话\" class=\"headerlink\" title=\"前面的话\"></a>前面的话</h4><p>错误处理对于web应用程序开发至关重要，不能提前预测到可能发生的错误，不能提前采取恢复策略，可能导致较差的用户体验。由于任何javascript错误都可能导致网页无法使用，因此作为开发人员，必须要知道何时可能出错，为什么会出错，以及会出什么错。本文将详细介绍javascript中的错误处理机制</p>\n<h4 id=\"error对象\"><a href=\"#error对象\" class=\"headerlink\" title=\"error对象\"></a>error对象</h4><p>error对象是包含错误信息的对象，是javascript的原生对象。当代码解析或运行时发生错误，javascript引擎就会自动产生并抛出一个error对象的实例，然后整个程序就中断在发生错误的地方</p>\n<p><code>console.log(t);    //Uncaught ReferenceError: t is not defined</code></p>\n<p>ECMA-262规定了error对象包括两个属性：message和name。message属性保存着错误信息，而name属性保存错误类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一般地，使用try-catch语句来捕获错误</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    t;</span><br><span class=\"line\">&#125; catch(ex) &#123;</span><br><span class=\"line\">    console.log(ex.message);    //t is not defined</span><br><span class=\"line\">    console.log(ex.name);   //ReferenceError</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>浏览器还对error对象的属性做了扩展，添加了其他相关信息。其中各浏览器厂商实现最多的是stack属性，它表示栈跟踪信息(safari不支持)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    t;</span><br><span class=\"line\">&#125; catch(ex) &#123;</span><br><span class=\"line\">    console.log(ex.stack);  //@file:///D:/wamp/www/form.html:12:2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，可以使用error()构造函数来创建错误对象。如果指定message参数，则该error对象将把它用做它的message属性；若不指定，它将使用一个预定义的默认字符串作为该属性的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Error();</span><br><span class=\"line\">new Error(message);</span><br><span class=\"line\"></span><br><span class=\"line\">//一般地，使用throw语句来抛出错误</span><br><span class=\"line\">throw new Error(&apos;test&apos;);    //Uncaught Error: test</span><br><span class=\"line\">throw new Error();  //Uncaught Error</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function UserError(message) &#123;</span><br><span class=\"line\">   this.message = message;</span><br><span class=\"line\">   this.name = &quot;UserError&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">UserError.prototype = new Error();</span><br><span class=\"line\">UserError.prototype.constructor = UserError;</span><br><span class=\"line\">throw new UserError(&quot;errorMessage&quot;);   //Uncaught UserError: errorMessage</span><br></pre></td></tr></table></figure>\n<p>当不使用new操作符，直接将Error()构造函数像一个函数一样调用时，它的行为和带new操作符调用时一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error();</span><br><span class=\"line\">Error(message);</span><br><span class=\"line\">throw Error(&apos;test&apos;);    //Uncaught Error: test</span><br><span class=\"line\">throw Error();  //Uncaught Error</span><br></pre></td></tr></table></figure>\n<p>error对象有一个toString()方法，返回’Error:’+ error对象的message属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var test = new Error(&apos;testError&apos;);</span><br><span class=\"line\">console.log(test.toString());   //&apos;Error: testError&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"error类型\"><a href=\"#error类型\" class=\"headerlink\" title=\"error类型\"></a>error类型</h4><p>执行代码期间可能会发生的错误有多种类型。每种错误都有对应的错误类型，而当错误发生时，就会抛出相应类型的错误对象。ECMA-262定义了下列7种错误类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error</span><br><span class=\"line\">EvalError(eval错误)</span><br><span class=\"line\">RangeError(范围错误)</span><br><span class=\"line\">ReferenceError(引用错误)</span><br><span class=\"line\">SyntaxError(语法错误)</span><br><span class=\"line\">TypeError(类型错误)</span><br><span class=\"line\">URIError(URI错误)</span><br></pre></td></tr></table></figure>\n<p>其中，Error是基类型，其他错误类型都继承自该类型。因此，所有错误类型共享了一组相同的属性。Error类型的错误很少见，如果有也是浏览器抛出的；这个基类型的主要目的是供开发人员抛出自定义错误</p>\n<h5 id=\"【EvalError-eval错误-】\"><a href=\"#【EvalError-eval错误-】\" class=\"headerlink\" title=\"【EvalError(eval错误)】\"></a>【EvalError(eval错误)】</h5><p>eval函数没有被正确执行时，会抛出EvalError错误。该错误类型已经不再在ES5中出现了，只是为了保证与以前代码兼容，才继续保留</p>\n<h5 id=\"【RangeError-范围错误-】\"><a href=\"#【RangeError-范围错误-】\" class=\"headerlink\" title=\"【RangeError(范围错误)】\"></a>【RangeError(范围错误)】</h5><p>RangeError类型的错误会在一个值超出相应范围时触发，主要包括超出数组长度范围以及超出数字取值范围等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Array(-1);  //Uncaught RangeError: Invalid array length</span><br><span class=\"line\">new Array(Number.MAX_VALUE);    //Uncaught RangeError: Invalid array length</span><br><span class=\"line\">(1234).toExponential(21);   //Uncaught RangeError: toExponential() argument must be between 0 and 20</span><br><span class=\"line\">(1234).toExponential(-1);   //Uncaught RangeError: toExponential() argument must be between 0 and 20</span><br></pre></td></tr></table></figure>\n<h5 id=\"【ReferenceError-引用错误-】\"><a href=\"#【ReferenceError-引用错误-】\" class=\"headerlink\" title=\"【ReferenceError(引用错误)】\"></a>【ReferenceError(引用错误)】</h5><p>引用一个不存在的变量或左值(lvalue)类型错误时，会触发ReferenceError(引用错误)</p>\n<p><code>a; //Uncaught ReferenceError: a is not defined</code></p>\n<p><code>1++;  //Uncaught ReferenceError: Invalid left-hand side expression in postfix operation</code></p>\n<h5 id=\"【SyntaxError-语法错误-】\"><a href=\"#【SyntaxError-语法错误-】\" class=\"headerlink\" title=\"【SyntaxError(语法错误)】\"></a>【SyntaxError(语法错误)】</h5><p>当不符合语法规则时，会抛出SyntaxError(语法错误)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//变量名错误</span><br><span class=\"line\">var 1a;  //Uncaught SyntaxError: Unexpected number</span><br><span class=\"line\">// 缺少括号</span><br><span class=\"line\">console.log &apos;hello&apos;);   //Uncaught SyntaxError: Unexpected string</span><br></pre></td></tr></table></figure>\n<h5 id=\"【TypeError-类型错误-】\"><a href=\"#【TypeError-类型错误-】\" class=\"headerlink\" title=\"【TypeError(类型错误)】\"></a>【TypeError(类型错误)】</h5><p>在变量中保存着意外的类型时，或者在访问不存在的方法时，都会导致TypeError类型错误。错误的原因虽然多种多样，但归根结底还是由于在执行特定类型的操作时，变量的类型并不符合要求所致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = new 10;  //Uncaught TypeError: 10 is not a constructor</span><br><span class=\"line\">alert(&apos;name&apos; in true);  //Uncaught TypeError: Cannot use &apos;in&apos; operator to search for &apos;name&apos; in true</span><br><span class=\"line\">Function.prototype.toString.call(&apos;name&apos;);   //Uncaught TypeError: Function.prototype.toString is not generic</span><br></pre></td></tr></table></figure>\n<h5 id=\"【URIError-URI错误-】\"><a href=\"#【URIError-URI错误-】\" class=\"headerlink\" title=\"【URIError(URI错误)】\"></a>【URIError(URI错误)】</h5><p>URIError是URI相关函数的参数不正确时抛出的错误，主要涉及encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape()这六个函数</p>\n<p><code>decodeURI(&#39;%2&#39;);   // URIError: URI malformed</code></p>\n<h4 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h4><p>任何没有通过try-catch处理的错误都会触发window对象的error事件</p>\n<p>error事件可以接收三个参数：错误消息、错误所在的URL和行号。多数情况下，只有错误消息有用，因为URL只是给出了文档的位置，而行号所指的代码行既可能出自嵌入的JavaScript代码，也可能出自外部的文件</p>\n<p>要指定onerror事件处理程序，可以使用DOM0级技术，也可以使用DOM2级事件的标准格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//DOM0级</span><br><span class=\"line\">window.onerror = function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//DOM2级</span><br><span class=\"line\">window.addEventListener(&quot;error&quot;,function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>浏览器是否显示标准的错误消息，取决于onerror的返回值。如果返回值为false，则在控制台中显示错误消息；如果返回值为true，则不显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//控制台显示错误消息</span><br><span class=\"line\">window.onerror = function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a;</span><br><span class=\"line\">//控制台不显示错误消息</span><br><span class=\"line\">window.onerror = function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a;</span><br></pre></td></tr></table></figure>\n<p>这个事件处理程序是避免浏览器报告错误的最后一道防线。理想情况下，只要可能就不应该使用它。只要能够适当地使用try-catch语句，就不会有错误交给浏览器，也就不会触发error事件</p>\n<p>图像也支持error事件。只要图像的src特性中的URL不能返回可以被识别的图像格式，就会触发error事件。此时的error事件遵循DOM格式，会返回一个以图像为目标的event对象</p>\n<p>加载图像失败时会显示一个警告框。发生error事件时，图像下载过程已经结束，也就是不能再重新下载了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var image = new Image();</span><br><span class=\"line\">image.src = &apos;smilex.gif&apos;;</span><br><span class=\"line\">image.onerror = function(e) &#123;</span><br><span class=\"line\">    console.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"throw语句与抛出错误\"><a href=\"#throw语句与抛出错误\" class=\"headerlink\" title=\"throw语句与抛出错误\"></a>throw语句与抛出错误</h4><p>throw语句用于抛出错误。抛出错误时，必须要给throw语句指定一个值，这个值是什么类型，没有要求</p>\n<p>[注意]抛出错误的过程是阻塞的，后续代码将不会执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw 12345;</span><br><span class=\"line\">throw &apos;hello world&apos;;</span><br><span class=\"line\">throw true;</span><br><span class=\"line\">throw &#123;name: &apos;javascript&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以使用throw语句手动抛出一个Error对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw new Error(&apos;something bad happened&apos;);</span><br><span class=\"line\">throw new SyntaxError(&apos;I don\\&apos;t like your syntax.&apos;);</span><br><span class=\"line\">throw new TypeError(&apos;what type of variable do you take me for?&apos;);</span><br><span class=\"line\">throw new RangeError(&apos;sorry,you just don\\&apos;t have the range.&apos;);</span><br><span class=\"line\">throw new EvalError(&apos;That doesn\\&apos;t evaluate.&apos;);</span><br><span class=\"line\">throw new URIError(&apos;URI, is that you?&apos;);</span><br><span class=\"line\">throw new ReferenceError(&apos;you didn\\&apos;t cite your references properly&apos;);</span><br></pre></td></tr></table></figure>\n<p>利用原型链还可以通过继承Error来创建自定义错误类型（原型链在第6章中介绍）。此时，需要为新创建的错误类型指定name和message属性</p>\n<p>浏览器对待继承自Error的自定义错误类型，就像对待其他错误类型一样。如果要捕获自己抛出的错误并且把它与浏览器错误区别对待的话，创建自定义错误是很有用的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function CustomError(message)&#123;</span><br><span class=\"line\">    this.name = &apos;CustomError&apos;;</span><br><span class=\"line\">    this.message = message;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CustomError.prototype = new Error();</span><br><span class=\"line\">throw new CustomError(&apos;my message&apos;);</span><br></pre></td></tr></table></figure>\n<p>在遇到throw语句时，代码会立即停止执行。仅当有try-catch语句捕获到被抛出的值时，代码才会继续执行</p>\n<p>更详细的解释为：当抛出异常时，javascript解释器会立即停止当前正在执行的逻辑，并跳转到就近的异常处理程序。异常处理程序是用try-catch语句的catch从句编写的。如果抛出异常的代码块没有一条相关联的catch从句，解释器会检查更高层的闭合代码块，看它是否有相关联的异常处理程序。以此类推，直到找到一个异常处理程序为止。如果抛出异常的函数没有处理它的try-catch语句，异常将向上传播到调用该函数的代码。这样的话，异常就会沿着javascript方法的词法结构和调用栈向上传播。如果没有找到任何异常处理程序，javascript将把异常当成程序错误来处理，并报告给用户</p>\n<h4 id=\"try-catch语句与捕获错误\"><a href=\"#try-catch语句与捕获错误\" class=\"headerlink\" title=\"try catch语句与捕获错误\"></a>try catch语句与捕获错误</h4><p>ECMA-262第3版引入了try-catch语句，作为JavaScript中处理异常的一种标准方式，用于捕获和处理错误</p>\n<p>其中，try从句定义了需要处理的异常所在的代码块。catch从句跟随在try从句之后，当try块内某处发生了异常时，调用catch内的代码逻辑。catch从句后跟随finally块，后者中放置清理代码，不管try块中是否产生异常，finally块内的逻辑总是会执行。尽管catch和finally都是可选的，但try从句需要至少二者之一与之组成完整的语句</p>\n<p>try/catch/finally语句块都需要使用花括号括起来，这里的花括号是必需的，即使从句中只有一条语句也不能省略花括号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    //通常来讲，这里的代码会从头到尾而不会产生任何问题</span><br><span class=\"line\">    //但有时会抛出一个异常，要么是由throw语句直接抛出，要么通过调用一个方法间接抛出</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    //当且仅当try语句块抛出了异常，才会执行这里的代码</span><br><span class=\"line\">    //这里可以通过局部变量e来获得对Error对象或者抛出的其他值的引用</span><br><span class=\"line\">    //这里的代码块可以基于某种原因处理这个异常，也可以忽略这个异常，还可以通过throw语句重新抛出异常</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">    //不管try语句是否抛出了异常，finally里的逻辑总是会执行，终止try语句块的方式有：</span><br><span class=\"line\">    //1、正常终止，执行完语句块的最后一条语句</span><br><span class=\"line\">    //2、通过break、continue或return语句终止</span><br><span class=\"line\">    //3、抛出一个异常，异常被catch从句捕获</span><br><span class=\"line\">    //4、抛出一个异常，异常未被捕获，继续向上传播</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般地，把所有可能会抛出错误的代码都放在try语句块中，而把那些用于错误处理的代码放在catch块中</p>\n<p>如果try块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行catch块。此时，catch块会接收到一个错误信息的对象，这个对象中包含的实际信息会因浏览器而异，但共同的是有一个保存着错误消息的message属性</p>\n<p>[注意]一定要给error对象起个名字，置空会报语法错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    q;</span><br><span class=\"line\">&#125; catch(error) &#123;</span><br><span class=\"line\">    alert(error.message);  //q is not defined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//Uncaught SyntaxError: Unexpected token</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    q;</span><br><span class=\"line\">&#125; catch() &#123;</span><br><span class=\"line\">    alert(error.message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>catch接受一个参数，表示try代码块抛出的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throwIt(exception) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    throw exception;</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    console.log(&apos;Caught: &apos;+ e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">throwIt(3);    // Caught: 3</span><br><span class=\"line\">throwIt(&apos;hello&apos;);   // Caught: hello</span><br><span class=\"line\">throwIt(new Error(&apos;An error happened&apos;));    // Caught: Error: An error happened</span><br></pre></td></tr></table></figure>\n<p>catch代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">  throw &quot;出错了&quot;;</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">  console.log(111);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(222);</span><br><span class=\"line\">// 111</span><br><span class=\"line\">// 222</span><br></pre></td></tr></table></figure>\n<p>为了捕捉不同类型的错误，catch代码块之中可以加入判断语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">  foo.bar();</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">  if (e instanceof EvalError) &#123;</span><br><span class=\"line\">    console.log(e.name + &quot;: &quot; + e.message);</span><br><span class=\"line\">  &#125; else if (e instanceof RangeError) &#123;</span><br><span class=\"line\">    console.log(e.name + &quot;: &quot; + e.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然finally子句在try-catch语句中是可选的，但finally子句一经使用，其代码无论如何都会执行。换句话说，try语句块中的代码全部正常执行，finally子句会执行；如果因为出错而执行了catch语句块，finally子句照样还会执行。只要代码中包含finally子句，则无论try或catch语句块中包含什么代码——甚至return语句，都不会阻止finally子句的执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//由于没有catch语句块，所以错误没有捕获。执行finally代码块以后，程序就中断在错误抛出的地方</span><br><span class=\"line\">function cleansUp() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    throw new Error(&apos;出错了……&apos;);</span><br><span class=\"line\">    console.log(&apos;此行不会执行&apos;);</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    console.log(&apos;完成清理工作&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cleansUp();</span><br><span class=\"line\">// 完成清理工作</span><br><span class=\"line\">// Error: 出错了……</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function testFinnally() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        return 2;</span><br><span class=\"line\">    &#125; catch(error) &#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testFinnally(); //0</span><br></pre></td></tr></table></figure>\n<p>[注意]return语句的count的值，是在finally代码块运行之前，就获取完成了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var count = 0;</span><br><span class=\"line\">function countUp() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">countUp();  // 0</span><br><span class=\"line\">console.log(count); // 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    console.log(0);</span><br><span class=\"line\">    throw &quot;bug&quot;;</span><br><span class=\"line\">  &#125; catch(e) &#123;</span><br><span class=\"line\">    console.log(1);</span><br><span class=\"line\">    return true; // 这句原本会延迟到finally代码块结束再执行</span><br><span class=\"line\">    console.log(2); // 不会运行</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    console.log(3);</span><br><span class=\"line\">    return false; // 这句会覆盖掉前面那句return</span><br><span class=\"line\">    console.log(4); // 不会运行</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(5); // 不会运行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result = f();</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 3</span><br><span class=\"line\">console.log(result);    // false</span><br></pre></td></tr></table></figure>\n<h5 id=\"【tips】块级作用域\"><a href=\"#【tips】块级作用域\" class=\"headerlink\" title=\"【tips】块级作用域\"></a>【tips】块级作用域</h5><p>try-catch语句的一个常见用途是创建块级作用域，其中声明的变量仅仅在catch内部有效</p>\n<p>ES6引入了let关键字，为其声明的变量创建块级作用域。但是，在目前ES3和ES5的情况下，常常使用try-catch语句来实现类似的效果</p>\n<p>由下面代码可知，e仅存在于catch分句内部，当试图从别处引用它时会抛出错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    throw new Error();  //抛出错误</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    console.log(e); //Error(…)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(e); //Uncaught ReferenceError: e is not defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h4><p>错误处理的核心是首先要知道代码里会发生什么错误。由于javaScript是松散类型的，而且也不会验证函数的参数，因此错误只会在代码期间出现。一般来说，需要关注三种错误：类型转换错误、数据类型错误、通信错误</p>\n<h5 id=\"【类型转换错误】\"><a href=\"#【类型转换错误】\" class=\"headerlink\" title=\"【类型转换错误】\"></a>【类型转换错误】</h5><p>类型转换错误发生在使用某个操作符，或者使用其他可能自动转换值的数据类型的语言结构时</p>\n<p>容易发生类型转换错误的地方是流控制语句。像if之类的语句在确定下一步操作之前，会自动把任何值转换成布尔值。尤其是if语句，如果使用不当，最容易出错</p>\n<p>未使用过的命名变量会自动被赋予undefined值。而undefined值可以被转换成布尔值false，因此下面这个函数中的if语句实际上只适用于提供了第三个参数的情况。问题在于，并不是只有undefined才会被转换成false，也不是只有字符串值才可以转换为true。例如，假设第三个参数是数值0，那么if语句的测试就会失败，而对数值1的测试则会通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function concat(str1,str2,str3) &#123;</span><br><span class=\"line\">    var result = str1 + str2;</span><br><span class=\"line\">    if(str3) &#123; //绝对不要这样</span><br><span class=\"line\">        result += str3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在流控制语句中使用非布尔值，是极为常见的一个错误来源。为避免此类错误，就要做到在条件比较时切实传入布尔值。实际上，执行某种形式的比较就可以达到这个目的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function concat(str1,str2,str3) &#123;</span><br><span class=\"line\">    var result = str1 + str2;</span><br><span class=\"line\">    if(typeof str3 == &apos;string&apos;) &#123; //更合适</span><br><span class=\"line\">        result += str3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"【数据类型错误】\"><a href=\"#【数据类型错误】\" class=\"headerlink\" title=\"【数据类型错误】\"></a>【数据类型错误】</h5><p>　　javascript是松散类型的，在使用变量和函数参数之前，不会对它们进行比较以确保它们的数据类型正确。为了保证不会发生数据类型错误，只能编写适当的数据类型检测代码。在将预料之外的值传递绘函数的情况下，最容易发生数据类型错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不安全的函数，任何非数组值都会导致错误</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(values) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一个常见的错误就是将参数与null值进行比较。与null进行比较只能确保相应的值不是null和undefined。要确保传入的值有效，仅检测null值是不够的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不安全的函数，任何非数组值都会导致错误</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(values != null) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果传入一个包含sort()方法的对象（而不是数组）会通过检测，但调用reverse()函数时可能会出错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不安全的函数，任何非数组值都会导致错误</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(typeof values.sort == &apos;function&apos;) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在确切知道应该传入什么类型的情况下，最好是使用instanceof来检测其数据类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安全，非数组值被忽略</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(values instanceof Array) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"【通信错误】\"><a href=\"#【通信错误】\" class=\"headerlink\" title=\"【通信错误】\"></a>【通信错误】</h5><p>随着Ajax编程的兴起，Web应用程序在其生命周期内动态加载信息或功能，已经成为一件司空见惯的事。不过，javascript与服务器之间的任何一次通信，都有可能会产生错误</p>\n<p>最常见的问题是在将数据发送给服务器之前，没有使用encodeURIComponent()对数据进行编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//错误</span><br><span class=\"line\">http://www.yourdomain.com/?redir=http://www.sometherdomain.com?a=b&amp;c=d</span><br><span class=\"line\">//针对&apos;redir=&apos;后面的所有字符串调用encodeURIComponent()就可以解决这个问题</span><br><span class=\"line\">http://www.yourdomain.com/?redir=http:%3A%2F%2Fwww.sometherdomain.com%3Fa%3Db%26c%3Dd</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jb51.net/article/88743.htm\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"深入分析javascript中的错误处理机制\"><a href=\"#深入分析javascript中的错误处理机制\" class=\"headerlink\" title=\"深入分析javascript中的错误处理机制\"></a>深入分析javascript中的错误处理机制</h2><h4 id=\"前面的话\"><a href=\"#前面的话\" class=\"headerlink\" title=\"前面的话\"></a>前面的话</h4><p>错误处理对于web应用程序开发至关重要，不能提前预测到可能发生的错误，不能提前采取恢复策略，可能导致较差的用户体验。由于任何javascript错误都可能导致网页无法使用，因此作为开发人员，必须要知道何时可能出错，为什么会出错，以及会出什么错。本文将详细介绍javascript中的错误处理机制</p>\n<h4 id=\"error对象\"><a href=\"#error对象\" class=\"headerlink\" title=\"error对象\"></a>error对象</h4><p>error对象是包含错误信息的对象，是javascript的原生对象。当代码解析或运行时发生错误，javascript引擎就会自动产生并抛出一个error对象的实例，然后整个程序就中断在发生错误的地方</p>\n<p><code>console.log(t);    //Uncaught ReferenceError: t is not defined</code></p>\n<p>ECMA-262规定了error对象包括两个属性：message和name。message属性保存着错误信息，而name属性保存错误类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一般地，使用try-catch语句来捕获错误</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    t;</span><br><span class=\"line\">&#125; catch(ex) &#123;</span><br><span class=\"line\">    console.log(ex.message);    //t is not defined</span><br><span class=\"line\">    console.log(ex.name);   //ReferenceError</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>浏览器还对error对象的属性做了扩展，添加了其他相关信息。其中各浏览器厂商实现最多的是stack属性，它表示栈跟踪信息(safari不支持)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    t;</span><br><span class=\"line\">&#125; catch(ex) &#123;</span><br><span class=\"line\">    console.log(ex.stack);  //@file:///D:/wamp/www/form.html:12:2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，可以使用error()构造函数来创建错误对象。如果指定message参数，则该error对象将把它用做它的message属性；若不指定，它将使用一个预定义的默认字符串作为该属性的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Error();</span><br><span class=\"line\">new Error(message);</span><br><span class=\"line\"></span><br><span class=\"line\">//一般地，使用throw语句来抛出错误</span><br><span class=\"line\">throw new Error(&apos;test&apos;);    //Uncaught Error: test</span><br><span class=\"line\">throw new Error();  //Uncaught Error</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function UserError(message) &#123;</span><br><span class=\"line\">   this.message = message;</span><br><span class=\"line\">   this.name = &quot;UserError&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">UserError.prototype = new Error();</span><br><span class=\"line\">UserError.prototype.constructor = UserError;</span><br><span class=\"line\">throw new UserError(&quot;errorMessage&quot;);   //Uncaught UserError: errorMessage</span><br></pre></td></tr></table></figure>\n<p>当不使用new操作符，直接将Error()构造函数像一个函数一样调用时，它的行为和带new操作符调用时一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error();</span><br><span class=\"line\">Error(message);</span><br><span class=\"line\">throw Error(&apos;test&apos;);    //Uncaught Error: test</span><br><span class=\"line\">throw Error();  //Uncaught Error</span><br></pre></td></tr></table></figure>\n<p>error对象有一个toString()方法，返回’Error:’+ error对象的message属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var test = new Error(&apos;testError&apos;);</span><br><span class=\"line\">console.log(test.toString());   //&apos;Error: testError&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"error类型\"><a href=\"#error类型\" class=\"headerlink\" title=\"error类型\"></a>error类型</h4><p>执行代码期间可能会发生的错误有多种类型。每种错误都有对应的错误类型，而当错误发生时，就会抛出相应类型的错误对象。ECMA-262定义了下列7种错误类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error</span><br><span class=\"line\">EvalError(eval错误)</span><br><span class=\"line\">RangeError(范围错误)</span><br><span class=\"line\">ReferenceError(引用错误)</span><br><span class=\"line\">SyntaxError(语法错误)</span><br><span class=\"line\">TypeError(类型错误)</span><br><span class=\"line\">URIError(URI错误)</span><br></pre></td></tr></table></figure>\n<p>其中，Error是基类型，其他错误类型都继承自该类型。因此，所有错误类型共享了一组相同的属性。Error类型的错误很少见，如果有也是浏览器抛出的；这个基类型的主要目的是供开发人员抛出自定义错误</p>\n<h5 id=\"【EvalError-eval错误-】\"><a href=\"#【EvalError-eval错误-】\" class=\"headerlink\" title=\"【EvalError(eval错误)】\"></a>【EvalError(eval错误)】</h5><p>eval函数没有被正确执行时，会抛出EvalError错误。该错误类型已经不再在ES5中出现了，只是为了保证与以前代码兼容，才继续保留</p>\n<h5 id=\"【RangeError-范围错误-】\"><a href=\"#【RangeError-范围错误-】\" class=\"headerlink\" title=\"【RangeError(范围错误)】\"></a>【RangeError(范围错误)】</h5><p>RangeError类型的错误会在一个值超出相应范围时触发，主要包括超出数组长度范围以及超出数字取值范围等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Array(-1);  //Uncaught RangeError: Invalid array length</span><br><span class=\"line\">new Array(Number.MAX_VALUE);    //Uncaught RangeError: Invalid array length</span><br><span class=\"line\">(1234).toExponential(21);   //Uncaught RangeError: toExponential() argument must be between 0 and 20</span><br><span class=\"line\">(1234).toExponential(-1);   //Uncaught RangeError: toExponential() argument must be between 0 and 20</span><br></pre></td></tr></table></figure>\n<h5 id=\"【ReferenceError-引用错误-】\"><a href=\"#【ReferenceError-引用错误-】\" class=\"headerlink\" title=\"【ReferenceError(引用错误)】\"></a>【ReferenceError(引用错误)】</h5><p>引用一个不存在的变量或左值(lvalue)类型错误时，会触发ReferenceError(引用错误)</p>\n<p><code>a; //Uncaught ReferenceError: a is not defined</code></p>\n<p><code>1++;  //Uncaught ReferenceError: Invalid left-hand side expression in postfix operation</code></p>\n<h5 id=\"【SyntaxError-语法错误-】\"><a href=\"#【SyntaxError-语法错误-】\" class=\"headerlink\" title=\"【SyntaxError(语法错误)】\"></a>【SyntaxError(语法错误)】</h5><p>当不符合语法规则时，会抛出SyntaxError(语法错误)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//变量名错误</span><br><span class=\"line\">var 1a;  //Uncaught SyntaxError: Unexpected number</span><br><span class=\"line\">// 缺少括号</span><br><span class=\"line\">console.log &apos;hello&apos;);   //Uncaught SyntaxError: Unexpected string</span><br></pre></td></tr></table></figure>\n<h5 id=\"【TypeError-类型错误-】\"><a href=\"#【TypeError-类型错误-】\" class=\"headerlink\" title=\"【TypeError(类型错误)】\"></a>【TypeError(类型错误)】</h5><p>在变量中保存着意外的类型时，或者在访问不存在的方法时，都会导致TypeError类型错误。错误的原因虽然多种多样，但归根结底还是由于在执行特定类型的操作时，变量的类型并不符合要求所致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = new 10;  //Uncaught TypeError: 10 is not a constructor</span><br><span class=\"line\">alert(&apos;name&apos; in true);  //Uncaught TypeError: Cannot use &apos;in&apos; operator to search for &apos;name&apos; in true</span><br><span class=\"line\">Function.prototype.toString.call(&apos;name&apos;);   //Uncaught TypeError: Function.prototype.toString is not generic</span><br></pre></td></tr></table></figure>\n<h5 id=\"【URIError-URI错误-】\"><a href=\"#【URIError-URI错误-】\" class=\"headerlink\" title=\"【URIError(URI错误)】\"></a>【URIError(URI错误)】</h5><p>URIError是URI相关函数的参数不正确时抛出的错误，主要涉及encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape()这六个函数</p>\n<p><code>decodeURI(&#39;%2&#39;);   // URIError: URI malformed</code></p>\n<h4 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h4><p>任何没有通过try-catch处理的错误都会触发window对象的error事件</p>\n<p>error事件可以接收三个参数：错误消息、错误所在的URL和行号。多数情况下，只有错误消息有用，因为URL只是给出了文档的位置，而行号所指的代码行既可能出自嵌入的JavaScript代码，也可能出自外部的文件</p>\n<p>要指定onerror事件处理程序，可以使用DOM0级技术，也可以使用DOM2级事件的标准格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//DOM0级</span><br><span class=\"line\">window.onerror = function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//DOM2级</span><br><span class=\"line\">window.addEventListener(&quot;error&quot;,function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>浏览器是否显示标准的错误消息，取决于onerror的返回值。如果返回值为false，则在控制台中显示错误消息；如果返回值为true，则不显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//控制台显示错误消息</span><br><span class=\"line\">window.onerror = function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a;</span><br><span class=\"line\">//控制台不显示错误消息</span><br><span class=\"line\">window.onerror = function(message,url,line) &#123;</span><br><span class=\"line\">    alert(message);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a;</span><br></pre></td></tr></table></figure>\n<p>这个事件处理程序是避免浏览器报告错误的最后一道防线。理想情况下，只要可能就不应该使用它。只要能够适当地使用try-catch语句，就不会有错误交给浏览器，也就不会触发error事件</p>\n<p>图像也支持error事件。只要图像的src特性中的URL不能返回可以被识别的图像格式，就会触发error事件。此时的error事件遵循DOM格式，会返回一个以图像为目标的event对象</p>\n<p>加载图像失败时会显示一个警告框。发生error事件时，图像下载过程已经结束，也就是不能再重新下载了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var image = new Image();</span><br><span class=\"line\">image.src = &apos;smilex.gif&apos;;</span><br><span class=\"line\">image.onerror = function(e) &#123;</span><br><span class=\"line\">    console.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"throw语句与抛出错误\"><a href=\"#throw语句与抛出错误\" class=\"headerlink\" title=\"throw语句与抛出错误\"></a>throw语句与抛出错误</h4><p>throw语句用于抛出错误。抛出错误时，必须要给throw语句指定一个值，这个值是什么类型，没有要求</p>\n<p>[注意]抛出错误的过程是阻塞的，后续代码将不会执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw 12345;</span><br><span class=\"line\">throw &apos;hello world&apos;;</span><br><span class=\"line\">throw true;</span><br><span class=\"line\">throw &#123;name: &apos;javascript&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以使用throw语句手动抛出一个Error对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw new Error(&apos;something bad happened&apos;);</span><br><span class=\"line\">throw new SyntaxError(&apos;I don\\&apos;t like your syntax.&apos;);</span><br><span class=\"line\">throw new TypeError(&apos;what type of variable do you take me for?&apos;);</span><br><span class=\"line\">throw new RangeError(&apos;sorry,you just don\\&apos;t have the range.&apos;);</span><br><span class=\"line\">throw new EvalError(&apos;That doesn\\&apos;t evaluate.&apos;);</span><br><span class=\"line\">throw new URIError(&apos;URI, is that you?&apos;);</span><br><span class=\"line\">throw new ReferenceError(&apos;you didn\\&apos;t cite your references properly&apos;);</span><br></pre></td></tr></table></figure>\n<p>利用原型链还可以通过继承Error来创建自定义错误类型（原型链在第6章中介绍）。此时，需要为新创建的错误类型指定name和message属性</p>\n<p>浏览器对待继承自Error的自定义错误类型，就像对待其他错误类型一样。如果要捕获自己抛出的错误并且把它与浏览器错误区别对待的话，创建自定义错误是很有用的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function CustomError(message)&#123;</span><br><span class=\"line\">    this.name = &apos;CustomError&apos;;</span><br><span class=\"line\">    this.message = message;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CustomError.prototype = new Error();</span><br><span class=\"line\">throw new CustomError(&apos;my message&apos;);</span><br></pre></td></tr></table></figure>\n<p>在遇到throw语句时，代码会立即停止执行。仅当有try-catch语句捕获到被抛出的值时，代码才会继续执行</p>\n<p>更详细的解释为：当抛出异常时，javascript解释器会立即停止当前正在执行的逻辑，并跳转到就近的异常处理程序。异常处理程序是用try-catch语句的catch从句编写的。如果抛出异常的代码块没有一条相关联的catch从句，解释器会检查更高层的闭合代码块，看它是否有相关联的异常处理程序。以此类推，直到找到一个异常处理程序为止。如果抛出异常的函数没有处理它的try-catch语句，异常将向上传播到调用该函数的代码。这样的话，异常就会沿着javascript方法的词法结构和调用栈向上传播。如果没有找到任何异常处理程序，javascript将把异常当成程序错误来处理，并报告给用户</p>\n<h4 id=\"try-catch语句与捕获错误\"><a href=\"#try-catch语句与捕获错误\" class=\"headerlink\" title=\"try catch语句与捕获错误\"></a>try catch语句与捕获错误</h4><p>ECMA-262第3版引入了try-catch语句，作为JavaScript中处理异常的一种标准方式，用于捕获和处理错误</p>\n<p>其中，try从句定义了需要处理的异常所在的代码块。catch从句跟随在try从句之后，当try块内某处发生了异常时，调用catch内的代码逻辑。catch从句后跟随finally块，后者中放置清理代码，不管try块中是否产生异常，finally块内的逻辑总是会执行。尽管catch和finally都是可选的，但try从句需要至少二者之一与之组成完整的语句</p>\n<p>try/catch/finally语句块都需要使用花括号括起来，这里的花括号是必需的，即使从句中只有一条语句也不能省略花括号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    //通常来讲，这里的代码会从头到尾而不会产生任何问题</span><br><span class=\"line\">    //但有时会抛出一个异常，要么是由throw语句直接抛出，要么通过调用一个方法间接抛出</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    //当且仅当try语句块抛出了异常，才会执行这里的代码</span><br><span class=\"line\">    //这里可以通过局部变量e来获得对Error对象或者抛出的其他值的引用</span><br><span class=\"line\">    //这里的代码块可以基于某种原因处理这个异常，也可以忽略这个异常，还可以通过throw语句重新抛出异常</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">    //不管try语句是否抛出了异常，finally里的逻辑总是会执行，终止try语句块的方式有：</span><br><span class=\"line\">    //1、正常终止，执行完语句块的最后一条语句</span><br><span class=\"line\">    //2、通过break、continue或return语句终止</span><br><span class=\"line\">    //3、抛出一个异常，异常被catch从句捕获</span><br><span class=\"line\">    //4、抛出一个异常，异常未被捕获，继续向上传播</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般地，把所有可能会抛出错误的代码都放在try语句块中，而把那些用于错误处理的代码放在catch块中</p>\n<p>如果try块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行catch块。此时，catch块会接收到一个错误信息的对象，这个对象中包含的实际信息会因浏览器而异，但共同的是有一个保存着错误消息的message属性</p>\n<p>[注意]一定要给error对象起个名字，置空会报语法错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    q;</span><br><span class=\"line\">&#125; catch(error) &#123;</span><br><span class=\"line\">    alert(error.message);  //q is not defined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//Uncaught SyntaxError: Unexpected token</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    q;</span><br><span class=\"line\">&#125; catch() &#123;</span><br><span class=\"line\">    alert(error.message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>catch接受一个参数，表示try代码块抛出的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throwIt(exception) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    throw exception;</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    console.log(&apos;Caught: &apos;+ e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">throwIt(3);    // Caught: 3</span><br><span class=\"line\">throwIt(&apos;hello&apos;);   // Caught: hello</span><br><span class=\"line\">throwIt(new Error(&apos;An error happened&apos;));    // Caught: Error: An error happened</span><br></pre></td></tr></table></figure>\n<p>catch代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">  throw &quot;出错了&quot;;</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">  console.log(111);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(222);</span><br><span class=\"line\">// 111</span><br><span class=\"line\">// 222</span><br></pre></td></tr></table></figure>\n<p>为了捕捉不同类型的错误，catch代码块之中可以加入判断语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">  foo.bar();</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">  if (e instanceof EvalError) &#123;</span><br><span class=\"line\">    console.log(e.name + &quot;: &quot; + e.message);</span><br><span class=\"line\">  &#125; else if (e instanceof RangeError) &#123;</span><br><span class=\"line\">    console.log(e.name + &quot;: &quot; + e.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然finally子句在try-catch语句中是可选的，但finally子句一经使用，其代码无论如何都会执行。换句话说，try语句块中的代码全部正常执行，finally子句会执行；如果因为出错而执行了catch语句块，finally子句照样还会执行。只要代码中包含finally子句，则无论try或catch语句块中包含什么代码——甚至return语句，都不会阻止finally子句的执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//由于没有catch语句块，所以错误没有捕获。执行finally代码块以后，程序就中断在错误抛出的地方</span><br><span class=\"line\">function cleansUp() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    throw new Error(&apos;出错了……&apos;);</span><br><span class=\"line\">    console.log(&apos;此行不会执行&apos;);</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    console.log(&apos;完成清理工作&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cleansUp();</span><br><span class=\"line\">// 完成清理工作</span><br><span class=\"line\">// Error: 出错了……</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function testFinnally() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        return 2;</span><br><span class=\"line\">    &#125; catch(error) &#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testFinnally(); //0</span><br></pre></td></tr></table></figure>\n<p>[注意]return语句的count的值，是在finally代码块运行之前，就获取完成了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var count = 0;</span><br><span class=\"line\">function countUp() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">countUp();  // 0</span><br><span class=\"line\">console.log(count); // 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    console.log(0);</span><br><span class=\"line\">    throw &quot;bug&quot;;</span><br><span class=\"line\">  &#125; catch(e) &#123;</span><br><span class=\"line\">    console.log(1);</span><br><span class=\"line\">    return true; // 这句原本会延迟到finally代码块结束再执行</span><br><span class=\"line\">    console.log(2); // 不会运行</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    console.log(3);</span><br><span class=\"line\">    return false; // 这句会覆盖掉前面那句return</span><br><span class=\"line\">    console.log(4); // 不会运行</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(5); // 不会运行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result = f();</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 3</span><br><span class=\"line\">console.log(result);    // false</span><br></pre></td></tr></table></figure>\n<h5 id=\"【tips】块级作用域\"><a href=\"#【tips】块级作用域\" class=\"headerlink\" title=\"【tips】块级作用域\"></a>【tips】块级作用域</h5><p>try-catch语句的一个常见用途是创建块级作用域，其中声明的变量仅仅在catch内部有效</p>\n<p>ES6引入了let关键字，为其声明的变量创建块级作用域。但是，在目前ES3和ES5的情况下，常常使用try-catch语句来实现类似的效果</p>\n<p>由下面代码可知，e仅存在于catch分句内部，当试图从别处引用它时会抛出错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    throw new Error();  //抛出错误</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    console.log(e); //Error(…)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(e); //Uncaught ReferenceError: e is not defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h4><p>错误处理的核心是首先要知道代码里会发生什么错误。由于javaScript是松散类型的，而且也不会验证函数的参数，因此错误只会在代码期间出现。一般来说，需要关注三种错误：类型转换错误、数据类型错误、通信错误</p>\n<h5 id=\"【类型转换错误】\"><a href=\"#【类型转换错误】\" class=\"headerlink\" title=\"【类型转换错误】\"></a>【类型转换错误】</h5><p>类型转换错误发生在使用某个操作符，或者使用其他可能自动转换值的数据类型的语言结构时</p>\n<p>容易发生类型转换错误的地方是流控制语句。像if之类的语句在确定下一步操作之前，会自动把任何值转换成布尔值。尤其是if语句，如果使用不当，最容易出错</p>\n<p>未使用过的命名变量会自动被赋予undefined值。而undefined值可以被转换成布尔值false，因此下面这个函数中的if语句实际上只适用于提供了第三个参数的情况。问题在于，并不是只有undefined才会被转换成false，也不是只有字符串值才可以转换为true。例如，假设第三个参数是数值0，那么if语句的测试就会失败，而对数值1的测试则会通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function concat(str1,str2,str3) &#123;</span><br><span class=\"line\">    var result = str1 + str2;</span><br><span class=\"line\">    if(str3) &#123; //绝对不要这样</span><br><span class=\"line\">        result += str3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在流控制语句中使用非布尔值，是极为常见的一个错误来源。为避免此类错误，就要做到在条件比较时切实传入布尔值。实际上，执行某种形式的比较就可以达到这个目的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function concat(str1,str2,str3) &#123;</span><br><span class=\"line\">    var result = str1 + str2;</span><br><span class=\"line\">    if(typeof str3 == &apos;string&apos;) &#123; //更合适</span><br><span class=\"line\">        result += str3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"【数据类型错误】\"><a href=\"#【数据类型错误】\" class=\"headerlink\" title=\"【数据类型错误】\"></a>【数据类型错误】</h5><p>　　javascript是松散类型的，在使用变量和函数参数之前，不会对它们进行比较以确保它们的数据类型正确。为了保证不会发生数据类型错误，只能编写适当的数据类型检测代码。在将预料之外的值传递绘函数的情况下，最容易发生数据类型错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不安全的函数，任何非数组值都会导致错误</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(values) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一个常见的错误就是将参数与null值进行比较。与null进行比较只能确保相应的值不是null和undefined。要确保传入的值有效，仅检测null值是不够的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不安全的函数，任何非数组值都会导致错误</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(values != null) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果传入一个包含sort()方法的对象（而不是数组）会通过检测，但调用reverse()函数时可能会出错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不安全的函数，任何非数组值都会导致错误</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(typeof values.sort == &apos;function&apos;) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在确切知道应该传入什么类型的情况下，最好是使用instanceof来检测其数据类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安全，非数组值被忽略</span><br><span class=\"line\">function reverseSort(values) &#123;</span><br><span class=\"line\">    if(values instanceof Array) &#123;</span><br><span class=\"line\">        values.sort();</span><br><span class=\"line\">        values.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"【通信错误】\"><a href=\"#【通信错误】\" class=\"headerlink\" title=\"【通信错误】\"></a>【通信错误】</h5><p>随着Ajax编程的兴起，Web应用程序在其生命周期内动态加载信息或功能，已经成为一件司空见惯的事。不过，javascript与服务器之间的任何一次通信，都有可能会产生错误</p>\n<p>最常见的问题是在将数据发送给服务器之前，没有使用encodeURIComponent()对数据进行编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//错误</span><br><span class=\"line\">http://www.yourdomain.com/?redir=http://www.sometherdomain.com?a=b&amp;c=d</span><br><span class=\"line\">//针对&apos;redir=&apos;后面的所有字符串调用encodeURIComponent()就可以解决这个问题</span><br><span class=\"line\">http://www.yourdomain.com/?redir=http:%3A%2F%2Fwww.sometherdomain.com%3Fa%3Db%26c%3Dd</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jb51.net/article/88743.htm\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>"},{"title":"需要了解的几个最佳ES6特性","date":"2017-09-28T12:36:18.000Z","_content":"\n## 需要了解的几个最佳ES6特性\n\n**ES6**，正式名称**是ECMAScript2015**，但是**ES6**这个名称更加简洁。**ES6**已经不再是JavaScript最新的标准，但是它已经广泛用于编程实践中。如果你还没用过**ES6**，现在还不算太晚…\n\n下面是几个**ES6**最佳特性，排名不分先后：\n- 函数参数默认值\n- 模板字符串\n- 多行字符串\n- 解构赋值\n- 展开运算符\n- 对象属性简写\n- 箭头函数\n- Promise\n- Let与Const\n- 类\n- 模块化\n\n<!--more-->\n\n##### 1. 函数参数默认值\n- **不使用ES6**\n\n为函数的参数设置默认值：\n```\nfunction foo(height, color)\n{\n    var height = height || 50;\n    var color = color || 'red';\n    //...\n}\n```\n\n这样写一般没问题，但是，当参数的布尔值为**false**时，是会出事情的！比如，我们这样调用foo函数：\n```\nfoo(0, \"\", \"\")\n```\n\n因为0的布尔值为**false**，这样**height**的取值将是**50**。同理color的取值为**‘red’**。\n\n- **使用ES6**\n```\nfunction foo(height = 50, color = 'red')\n{\n    // ...\n}\n```\n\n##### 2. 模板字符串\n- **不使用ES6**\n\n使用+号将变量拼接为字符串：\n\n```\nvar name = 'Your name is ' + first + ' ' + last + '.'\n```\n\n- **使用ES6**\n\n将变量放在大括号之中：\n\n```\nvar name = `Your name is ${first} ${last}.`\n```\n\n**ES6**的写法更加简洁、直观。\n\n##### 3. 多行字符串\n- **不使用ES6**\n\n使用`“\\n\\t”`将多行字符串拼接起来：\n```\nvar roadPoem = 'Then took the other, as just as fair,\\n\\t'\n    + 'And having perhaps the better claim\\n\\t'\n    + 'Because it was grassy and wanted wear,\\n\\t'\n    + 'Though as for that the passing there\\n\\t'\n    + 'Had worn them really about the same,\\n\\t'\n```\n\n- **使用ES6**\n将多行字符串放在反引号``之间就好了：\n```\nvar roadPoem = `Then took the other, as just as fair,\n    And having perhaps the better claim\n    Because it was grassy and wanted wear,\n    Though as for that the passing there\n    Had worn them really about the same,`\n```\n\n##### 4. 解构赋值\n数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程\n- **不使用ES6**\n\n当需要获取某个对象的属性值时，需要单独获取：\n```\nconst people = {\n        name: 'lux',\n        age: 20\n    }\n    const name = people.name\n    const age = people.age\n    console.log(name + ' --- ' + age)\n```\n- **使用ES6**\n\n一次性获取对象的子属性：\n```\n//对象\n    const people = {\n        name: 'lux',\n        age: 20\n    }\n    const { name, age } = people\n    console.log(`${name} --- ${age}`)\n    //数组\n    const color = ['red', 'blue']\n    const [first, second] = color\n    console.log(first) //'red'\n    console.log(second) //'blue'\n```\n\n##### 5.Spread Operator 展开运算符\n\nES6中另外一个好玩的特性就是**Spread Operator** 也是三个点儿...接下来就展示一下它的用途。\n\n组装对象或者数组\n```\n//数组\nconst color = ['red', 'yellow']\nconst colorful = [...color, 'green', 'pink']\nconsole.log(colorful) //[red, yellow, green, pink]\n\n//对象\nconst alp = { fist: 'a', second: 'b'}\nconst alphabets = { ...alp, third: 'c' }\nconsole.log(alphabets) //{ \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"}\n```\n\n有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项\n```\n//数组\nconst number = [1,2,3,4,5]\nconst [first, ...rest] = number\nconsole.log(rest) //2,3,4,5\n//对象\nconst user = {\n    username: 'lux',\n    gender: 'female',\n    age: 19,\n    address: 'peking'\n}\nconst { username, ...rest } = user\nconsole.log(rest) //{\"address\": \"peking\", \"age\": 19, \"gender\": \"female\"}\n```\n对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边\n```\nconst first = {\n    a: 1,\n    b: 2,\n    c: 6,\n}\nconst second = {\n    c: 3,\n    d: 4\n}\nconst total = { ...first, ...second }\nconsole.log(total) // { a: 1, b: 2, c: 3, d: 4 }\n```\n\n##### 6. 对象属性简写\n- **不使用ES6**\n\n对象中必须包含属性和值，显得非常多余：\n```\nvar bar = 'bar';\nvar foo = function ()\n{\n    // ...\n}\n\nvar baz = {\n  bar: bar,\n  foo: foo\n};\n```\n\n- **使用ES6**\n\n对象中直接写变量，非常简单：\n```\nvar bar = 'bar';\nvar foo = function ()\n{\n    // ...\n}\n\nvar baz = { bar, foo };\n```\n\n##### 7. 箭头函数\n- **不使用ES6**\n\n普通函数体内的this，指向调用时所在的对象。\n```\nfunction foo()\n{\n    console.log(this.id);\n}\n\nvar id = 1;\n\nfoo(); // 输出1\n\nfoo.call({ id: 2 }); // 输出2\n```\n\n- **使用ES6**\n\n箭头函数体内的this，就是定义时所在的对象，而不是调用时所在的对象。\n```\nvar foo = () => {\n  console.log(this.id);\n}\n\nvar id = 1;\n\nfoo(); // 输出1\n\nfoo.call({ id: 2 }); // 输出1\n```\n\n##### 8. Promise\n- **不使用ES6**\n\n嵌套两个setTimeout回调函数：\n```\nsetTimeout(function()\n{\n    console.log('Hello'); // 1秒后输出\"Hello\"\n    setTimeout(function()\n    {\n        console.log('Fundebug'); // 2秒后输出\"Fundebug\"\n    }, 1000);\n}, 1000);\n```\n\n- **使用ES6**\n\n使用两个then是异步编程串行化，避免了回调地狱：\n\n```\nvar wait1000 = new Promise(function(resolve, reject)\n{\n    setTimeout(resolve, 1000);\n});\n\nwait1000\n    .then(function()\n    {\n        console.log(\"Hello\"); // 1秒后输出\"Hello\"\n        return wait1000;\n    })\n    .then(function()\n    {\n        console.log(\"Fundebug\"); // 2秒后输出\"Fundebug\"\n    });\n```\n\n##### 9. Let与Const\n- **使用var**\n\nvar定义的变量未函数级作用域：\n```\n{\n  var a = 10;\n}\n\nconsole.log(a); // 输出10\n```\n\n- **使用let与const**\n\nlet定义的变量为块级作用域，因此会报错：(如果你希望实时监控JavaScript应用的错误，欢迎免费使用[Fundebug](https://fundebug.com/))\n```\n{\n  let a = 10;\n}\n\nconsole.log(a); // 报错“ReferenceError: a is not defined”\n```\nconst与let一样，也是块级作用域。\n\n##### 10. 类\n- **不使用ES6**\n\n使用构造函数创建对象：\n```\nfunction Point(x, y)\n{\n    this.x = x;\n    this.y = y;\n    this.add = function()\n    {\n        return this.x + this.y;\n    };\n}\n\nvar p = new Point(1, 2);\n\nconsole.log(p.add()); // 输出3\n```\n\n- **使用ES6**\n\n使用**Class**定义类，更加规范，且你能够继承：\n```\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    add() {\n        return this.x + this.y;\n    }\n}\n\nvar p = new Point(1, 2);\n\nconsole.log(p.add()); // 输出3\n```\n\n##### 11. 模块化\nJavaScript一直没有官方的模块化解决方案，开发者在实践中主要采用**CommonJS**和**AMD**规范。而**ES6**制定了模块(Module)功能。\n\n- **不使用ES6**\n\nNode.js采用**CommenJS**规范实现了模块化，而前端也可以采用，只是在部署时需要使用[Browserify](http://browserify.org/)等工具打包。这里不妨介绍一下**CommenJS**规范。\n\n**module.js**中使用**module.exports**导出**port**变量和**getAccounts**函数：\n```\nmodule.exports = {\n  port: 3000,\n  getAccounts: function() {\n    ...\n  }\n}\n```\n\n**main.js**中使用**require**导入**module.js**：\n```\nvar service = require('module.js')\nconsole.log(service.port) // 输出3000\n```\n\n- **使用ES6**\n\n**ES6**中使用**export**与**import**关键词实现模块化。\n\n**module.js**中使用**export**导出**port**变量和**getAccounts**函数：\n```\nexport var port = 3000\nexport function getAccounts(url) {\n  ...\n}\n```\n\n**main.js**中使用**import**导入**module.js**，可以指定需要导入的变量：\n```\nimport {port, getAccounts} from 'module'\nconsole.log(port) // 输出3000\n```\n也可以将全部变量导入：\n```\nimport * as service from 'module'\nconsole.log(service.port) // 3000\n```\n\n##### 参考链接\n- [ES6/ECMAScript2015 Cheatsheet(PDF)](https://gum.co/LDwVU/git-1CC81D40)\n- [Understanding ECMAScript 6](https://leanpub.com/understandinges6)\n- [Exploring ES6](https://leanpub.com/exploring-es6)\n- [ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n- [Javascript的this用法](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n\n[参考文章](https://blog.fundebug.com/2017/08/21/10-best-es6-feature/)","source":"_posts/需要了解的几个最佳ES6特性.md","raw":"---\ntitle: 需要了解的几个最佳ES6特性\ndate: 2017-09-28 20:36:18\ncategories: JavaScript\ntags: ES6\n---\n\n## 需要了解的几个最佳ES6特性\n\n**ES6**，正式名称**是ECMAScript2015**，但是**ES6**这个名称更加简洁。**ES6**已经不再是JavaScript最新的标准，但是它已经广泛用于编程实践中。如果你还没用过**ES6**，现在还不算太晚…\n\n下面是几个**ES6**最佳特性，排名不分先后：\n- 函数参数默认值\n- 模板字符串\n- 多行字符串\n- 解构赋值\n- 展开运算符\n- 对象属性简写\n- 箭头函数\n- Promise\n- Let与Const\n- 类\n- 模块化\n\n<!--more-->\n\n##### 1. 函数参数默认值\n- **不使用ES6**\n\n为函数的参数设置默认值：\n```\nfunction foo(height, color)\n{\n    var height = height || 50;\n    var color = color || 'red';\n    //...\n}\n```\n\n这样写一般没问题，但是，当参数的布尔值为**false**时，是会出事情的！比如，我们这样调用foo函数：\n```\nfoo(0, \"\", \"\")\n```\n\n因为0的布尔值为**false**，这样**height**的取值将是**50**。同理color的取值为**‘red’**。\n\n- **使用ES6**\n```\nfunction foo(height = 50, color = 'red')\n{\n    // ...\n}\n```\n\n##### 2. 模板字符串\n- **不使用ES6**\n\n使用+号将变量拼接为字符串：\n\n```\nvar name = 'Your name is ' + first + ' ' + last + '.'\n```\n\n- **使用ES6**\n\n将变量放在大括号之中：\n\n```\nvar name = `Your name is ${first} ${last}.`\n```\n\n**ES6**的写法更加简洁、直观。\n\n##### 3. 多行字符串\n- **不使用ES6**\n\n使用`“\\n\\t”`将多行字符串拼接起来：\n```\nvar roadPoem = 'Then took the other, as just as fair,\\n\\t'\n    + 'And having perhaps the better claim\\n\\t'\n    + 'Because it was grassy and wanted wear,\\n\\t'\n    + 'Though as for that the passing there\\n\\t'\n    + 'Had worn them really about the same,\\n\\t'\n```\n\n- **使用ES6**\n将多行字符串放在反引号``之间就好了：\n```\nvar roadPoem = `Then took the other, as just as fair,\n    And having perhaps the better claim\n    Because it was grassy and wanted wear,\n    Though as for that the passing there\n    Had worn them really about the same,`\n```\n\n##### 4. 解构赋值\n数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程\n- **不使用ES6**\n\n当需要获取某个对象的属性值时，需要单独获取：\n```\nconst people = {\n        name: 'lux',\n        age: 20\n    }\n    const name = people.name\n    const age = people.age\n    console.log(name + ' --- ' + age)\n```\n- **使用ES6**\n\n一次性获取对象的子属性：\n```\n//对象\n    const people = {\n        name: 'lux',\n        age: 20\n    }\n    const { name, age } = people\n    console.log(`${name} --- ${age}`)\n    //数组\n    const color = ['red', 'blue']\n    const [first, second] = color\n    console.log(first) //'red'\n    console.log(second) //'blue'\n```\n\n##### 5.Spread Operator 展开运算符\n\nES6中另外一个好玩的特性就是**Spread Operator** 也是三个点儿...接下来就展示一下它的用途。\n\n组装对象或者数组\n```\n//数组\nconst color = ['red', 'yellow']\nconst colorful = [...color, 'green', 'pink']\nconsole.log(colorful) //[red, yellow, green, pink]\n\n//对象\nconst alp = { fist: 'a', second: 'b'}\nconst alphabets = { ...alp, third: 'c' }\nconsole.log(alphabets) //{ \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"}\n```\n\n有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项\n```\n//数组\nconst number = [1,2,3,4,5]\nconst [first, ...rest] = number\nconsole.log(rest) //2,3,4,5\n//对象\nconst user = {\n    username: 'lux',\n    gender: 'female',\n    age: 19,\n    address: 'peking'\n}\nconst { username, ...rest } = user\nconsole.log(rest) //{\"address\": \"peking\", \"age\": 19, \"gender\": \"female\"}\n```\n对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边\n```\nconst first = {\n    a: 1,\n    b: 2,\n    c: 6,\n}\nconst second = {\n    c: 3,\n    d: 4\n}\nconst total = { ...first, ...second }\nconsole.log(total) // { a: 1, b: 2, c: 3, d: 4 }\n```\n\n##### 6. 对象属性简写\n- **不使用ES6**\n\n对象中必须包含属性和值，显得非常多余：\n```\nvar bar = 'bar';\nvar foo = function ()\n{\n    // ...\n}\n\nvar baz = {\n  bar: bar,\n  foo: foo\n};\n```\n\n- **使用ES6**\n\n对象中直接写变量，非常简单：\n```\nvar bar = 'bar';\nvar foo = function ()\n{\n    // ...\n}\n\nvar baz = { bar, foo };\n```\n\n##### 7. 箭头函数\n- **不使用ES6**\n\n普通函数体内的this，指向调用时所在的对象。\n```\nfunction foo()\n{\n    console.log(this.id);\n}\n\nvar id = 1;\n\nfoo(); // 输出1\n\nfoo.call({ id: 2 }); // 输出2\n```\n\n- **使用ES6**\n\n箭头函数体内的this，就是定义时所在的对象，而不是调用时所在的对象。\n```\nvar foo = () => {\n  console.log(this.id);\n}\n\nvar id = 1;\n\nfoo(); // 输出1\n\nfoo.call({ id: 2 }); // 输出1\n```\n\n##### 8. Promise\n- **不使用ES6**\n\n嵌套两个setTimeout回调函数：\n```\nsetTimeout(function()\n{\n    console.log('Hello'); // 1秒后输出\"Hello\"\n    setTimeout(function()\n    {\n        console.log('Fundebug'); // 2秒后输出\"Fundebug\"\n    }, 1000);\n}, 1000);\n```\n\n- **使用ES6**\n\n使用两个then是异步编程串行化，避免了回调地狱：\n\n```\nvar wait1000 = new Promise(function(resolve, reject)\n{\n    setTimeout(resolve, 1000);\n});\n\nwait1000\n    .then(function()\n    {\n        console.log(\"Hello\"); // 1秒后输出\"Hello\"\n        return wait1000;\n    })\n    .then(function()\n    {\n        console.log(\"Fundebug\"); // 2秒后输出\"Fundebug\"\n    });\n```\n\n##### 9. Let与Const\n- **使用var**\n\nvar定义的变量未函数级作用域：\n```\n{\n  var a = 10;\n}\n\nconsole.log(a); // 输出10\n```\n\n- **使用let与const**\n\nlet定义的变量为块级作用域，因此会报错：(如果你希望实时监控JavaScript应用的错误，欢迎免费使用[Fundebug](https://fundebug.com/))\n```\n{\n  let a = 10;\n}\n\nconsole.log(a); // 报错“ReferenceError: a is not defined”\n```\nconst与let一样，也是块级作用域。\n\n##### 10. 类\n- **不使用ES6**\n\n使用构造函数创建对象：\n```\nfunction Point(x, y)\n{\n    this.x = x;\n    this.y = y;\n    this.add = function()\n    {\n        return this.x + this.y;\n    };\n}\n\nvar p = new Point(1, 2);\n\nconsole.log(p.add()); // 输出3\n```\n\n- **使用ES6**\n\n使用**Class**定义类，更加规范，且你能够继承：\n```\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    add() {\n        return this.x + this.y;\n    }\n}\n\nvar p = new Point(1, 2);\n\nconsole.log(p.add()); // 输出3\n```\n\n##### 11. 模块化\nJavaScript一直没有官方的模块化解决方案，开发者在实践中主要采用**CommonJS**和**AMD**规范。而**ES6**制定了模块(Module)功能。\n\n- **不使用ES6**\n\nNode.js采用**CommenJS**规范实现了模块化，而前端也可以采用，只是在部署时需要使用[Browserify](http://browserify.org/)等工具打包。这里不妨介绍一下**CommenJS**规范。\n\n**module.js**中使用**module.exports**导出**port**变量和**getAccounts**函数：\n```\nmodule.exports = {\n  port: 3000,\n  getAccounts: function() {\n    ...\n  }\n}\n```\n\n**main.js**中使用**require**导入**module.js**：\n```\nvar service = require('module.js')\nconsole.log(service.port) // 输出3000\n```\n\n- **使用ES6**\n\n**ES6**中使用**export**与**import**关键词实现模块化。\n\n**module.js**中使用**export**导出**port**变量和**getAccounts**函数：\n```\nexport var port = 3000\nexport function getAccounts(url) {\n  ...\n}\n```\n\n**main.js**中使用**import**导入**module.js**，可以指定需要导入的变量：\n```\nimport {port, getAccounts} from 'module'\nconsole.log(port) // 输出3000\n```\n也可以将全部变量导入：\n```\nimport * as service from 'module'\nconsole.log(service.port) // 3000\n```\n\n##### 参考链接\n- [ES6/ECMAScript2015 Cheatsheet(PDF)](https://gum.co/LDwVU/git-1CC81D40)\n- [Understanding ECMAScript 6](https://leanpub.com/understandinges6)\n- [Exploring ES6](https://leanpub.com/exploring-es6)\n- [ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n- [Javascript的this用法](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n\n[参考文章](https://blog.fundebug.com/2017/08/21/10-best-es6-feature/)","slug":"需要了解的几个最佳ES6特性","published":1,"updated":"2018-02-08T02:37:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmr001mlxndqxiw4dmh","content":"<h2 id=\"需要了解的几个最佳ES6特性\"><a href=\"#需要了解的几个最佳ES6特性\" class=\"headerlink\" title=\"需要了解的几个最佳ES6特性\"></a>需要了解的几个最佳ES6特性</h2><p><strong>ES6</strong>，正式名称<strong>是ECMAScript2015</strong>，但是<strong>ES6</strong>这个名称更加简洁。<strong>ES6</strong>已经不再是JavaScript最新的标准，但是它已经广泛用于编程实践中。如果你还没用过<strong>ES6</strong>，现在还不算太晚…</p>\n<p>下面是几个<strong>ES6</strong>最佳特性，排名不分先后：</p>\n<ul>\n<li>函数参数默认值</li>\n<li>模板字符串</li>\n<li>多行字符串</li>\n<li>解构赋值</li>\n<li>展开运算符</li>\n<li>对象属性简写</li>\n<li>箭头函数</li>\n<li>Promise</li>\n<li>Let与Const</li>\n<li>类</li>\n<li>模块化</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"1-函数参数默认值\"><a href=\"#1-函数参数默认值\" class=\"headerlink\" title=\"1. 函数参数默认值\"></a>1. 函数参数默认值</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>为函数的参数设置默认值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(height, color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var height = height || 50;</span><br><span class=\"line\">    var color = color || &apos;red&apos;;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样写一般没问题，但是，当参数的布尔值为<strong>false</strong>时，是会出事情的！比如，我们这样调用foo函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(0, &quot;&quot;, &quot;&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>因为0的布尔值为<strong>false</strong>，这样<strong>height</strong>的取值将是<strong>50</strong>。同理color的取值为<strong>‘red’</strong>。</p>\n<ul>\n<li><strong>使用ES6</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(height = 50, color = &apos;red&apos;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"2-模板字符串\"><a href=\"#2-模板字符串\" class=\"headerlink\" title=\"2. 模板字符串\"></a>2. 模板字符串</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>使用+号将变量拼接为字符串：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &apos;Your name is &apos; + first + &apos; &apos; + last + &apos;.&apos;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>将变量放在大括号之中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = `Your name is $&#123;first&#125; $&#123;last&#125;.`</span><br></pre></td></tr></table></figure>\n<p><strong>ES6</strong>的写法更加简洁、直观。</p>\n<h5 id=\"3-多行字符串\"><a href=\"#3-多行字符串\" class=\"headerlink\" title=\"3. 多行字符串\"></a>3. 多行字符串</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>使用<code>“\\n\\t”</code>将多行字符串拼接起来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var roadPoem = &apos;Then took the other, as just as fair,\\n\\t&apos;</span><br><span class=\"line\">    + &apos;And having perhaps the better claim\\n\\t&apos;</span><br><span class=\"line\">    + &apos;Because it was grassy and wanted wear,\\n\\t&apos;</span><br><span class=\"line\">    + &apos;Though as for that the passing there\\n\\t&apos;</span><br><span class=\"line\">    + &apos;Had worn them really about the same,\\n\\t&apos;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong><br>将多行字符串放在反引号``之间就好了：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var roadPoem = `Then took the other, as just as fair,</span><br><span class=\"line\">    And having perhaps the better claim</span><br><span class=\"line\">    Because it was grassy and wanted wear,</span><br><span class=\"line\">    Though as for that the passing there</span><br><span class=\"line\">    Had worn them really about the same,`</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"4-解构赋值\"><a href=\"#4-解构赋值\" class=\"headerlink\" title=\"4. 解构赋值\"></a>4. 解构赋值</h5><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p>\n<ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>当需要获取某个对象的属性值时，需要单独获取：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const people = &#123;</span><br><span class=\"line\">        name: &apos;lux&apos;,</span><br><span class=\"line\">        age: 20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const name = people.name</span><br><span class=\"line\">    const age = people.age</span><br><span class=\"line\">    console.log(name + &apos; --- &apos; + age)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>一次性获取对象的子属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对象</span><br><span class=\"line\">    const people = &#123;</span><br><span class=\"line\">        name: &apos;lux&apos;,</span><br><span class=\"line\">        age: 20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const &#123; name, age &#125; = people</span><br><span class=\"line\">    console.log(`$&#123;name&#125; --- $&#123;age&#125;`)</span><br><span class=\"line\">    //数组</span><br><span class=\"line\">    const color = [&apos;red&apos;, &apos;blue&apos;]</span><br><span class=\"line\">    const [first, second] = color</span><br><span class=\"line\">    console.log(first) //&apos;red&apos;</span><br><span class=\"line\">    console.log(second) //&apos;blue&apos;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-Spread-Operator-展开运算符\"><a href=\"#5-Spread-Operator-展开运算符\" class=\"headerlink\" title=\"5.Spread Operator 展开运算符\"></a>5.Spread Operator 展开运算符</h5><p>ES6中另外一个好玩的特性就是<strong>Spread Operator</strong> 也是三个点儿…接下来就展示一下它的用途。</p>\n<p>组装对象或者数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组</span><br><span class=\"line\">const color = [&apos;red&apos;, &apos;yellow&apos;]</span><br><span class=\"line\">const colorful = [...color, &apos;green&apos;, &apos;pink&apos;]</span><br><span class=\"line\">console.log(colorful) //[red, yellow, green, pink]</span><br><span class=\"line\"></span><br><span class=\"line\">//对象</span><br><span class=\"line\">const alp = &#123; fist: &apos;a&apos;, second: &apos;b&apos;&#125;</span><br><span class=\"line\">const alphabets = &#123; ...alp, third: &apos;c&apos; &#125;</span><br><span class=\"line\">console.log(alphabets) //&#123; &quot;fist&quot;: &quot;a&quot;, &quot;second&quot;: &quot;b&quot;, &quot;third&quot;: &quot;c&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组</span><br><span class=\"line\">const number = [1,2,3,4,5]</span><br><span class=\"line\">const [first, ...rest] = number</span><br><span class=\"line\">console.log(rest) //2,3,4,5</span><br><span class=\"line\">//对象</span><br><span class=\"line\">const user = &#123;</span><br><span class=\"line\">    username: &apos;lux&apos;,</span><br><span class=\"line\">    gender: &apos;female&apos;,</span><br><span class=\"line\">    age: 19,</span><br><span class=\"line\">    address: &apos;peking&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const &#123; username, ...rest &#125; = user</span><br><span class=\"line\">console.log(rest) //&#123;&quot;address&quot;: &quot;peking&quot;, &quot;age&quot;: 19, &quot;gender&quot;: &quot;female&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const first = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2,</span><br><span class=\"line\">    c: 6,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const second = &#123;</span><br><span class=\"line\">    c: 3,</span><br><span class=\"line\">    d: 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const total = &#123; ...first, ...second &#125;</span><br><span class=\"line\">console.log(total) // &#123; a: 1, b: 2, c: 3, d: 4 &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"6-对象属性简写\"><a href=\"#6-对象属性简写\" class=\"headerlink\" title=\"6. 对象属性简写\"></a>6. 对象属性简写</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>对象中必须包含属性和值，显得非常多余：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = &apos;bar&apos;;</span><br><span class=\"line\">var foo = function ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var baz = &#123;</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>对象中直接写变量，非常简单：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = &apos;bar&apos;;</span><br><span class=\"line\">var foo = function ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var baz = &#123; bar, foo &#125;;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"7-箭头函数\"><a href=\"#7-箭头函数\" class=\"headerlink\" title=\"7. 箭头函数\"></a>7. 箭头函数</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>普通函数体内的this，指向调用时所在的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    console.log(this.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var id = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // 输出1</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; id: 2 &#125;); // 输出2</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>箭头函数体内的this，就是定义时所在的对象，而不是调用时所在的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = () =&gt; &#123;</span><br><span class=\"line\">  console.log(this.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var id = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // 输出1</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; id: 2 &#125;); // 输出1</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"8-Promise\"><a href=\"#8-Promise\" class=\"headerlink\" title=\"8. Promise\"></a>8. Promise</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>嵌套两个setTimeout回调函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    console.log(&apos;Hello&apos;); // 1秒后输出&quot;Hello&quot;</span><br><span class=\"line\">    setTimeout(function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        console.log(&apos;Fundebug&apos;); // 2秒后输出&quot;Fundebug&quot;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>使用两个then是异步编程串行化，避免了回调地狱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var wait1000 = new Promise(function(resolve, reject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    setTimeout(resolve, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">wait1000</span><br><span class=\"line\">    .then(function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        console.log(&quot;Hello&quot;); // 1秒后输出&quot;Hello&quot;</span><br><span class=\"line\">        return wait1000;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        console.log(&quot;Fundebug&quot;); // 2秒后输出&quot;Fundebug&quot;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"9-Let与Const\"><a href=\"#9-Let与Const\" class=\"headerlink\" title=\"9. Let与Const\"></a>9. Let与Const</h5><ul>\n<li><strong>使用var</strong></li>\n</ul>\n<p>var定义的变量未函数级作用域：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  var a = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a); // 输出10</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用let与const</strong></li>\n</ul>\n<p>let定义的变量为块级作用域，因此会报错：(如果你希望实时监控JavaScript应用的错误，欢迎免费使用<a href=\"https://fundebug.com/\" target=\"_blank\" rel=\"noopener\">Fundebug</a>)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  let a = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a); // 报错“ReferenceError: a is not defined”</span><br></pre></td></tr></table></figure></p>\n<p>const与let一样，也是块级作用域。</p>\n<h5 id=\"10-类\"><a href=\"#10-类\" class=\"headerlink\" title=\"10. 类\"></a>10. 类</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>使用构造函数创建对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Point(x, y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">    this.add = function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return this.x + this.y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = new Point(1, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(p.add()); // 输出3</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>使用<strong>Class</strong>定义类，更加规范，且你能够继承：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">        return this.x + this.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = new Point(1, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(p.add()); // 输出3</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"11-模块化\"><a href=\"#11-模块化\" class=\"headerlink\" title=\"11. 模块化\"></a>11. 模块化</h5><p>JavaScript一直没有官方的模块化解决方案，开发者在实践中主要采用<strong>CommonJS</strong>和<strong>AMD</strong>规范。而<strong>ES6</strong>制定了模块(Module)功能。</p>\n<ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>Node.js采用<strong>CommenJS</strong>规范实现了模块化，而前端也可以采用，只是在部署时需要使用<a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">Browserify</a>等工具打包。这里不妨介绍一下<strong>CommenJS</strong>规范。</p>\n<p><strong>module.js</strong>中使用<strong>module.exports</strong>导出<strong>port</strong>变量和<strong>getAccounts</strong>函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\">  getAccounts: function() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>main.js</strong>中使用<strong>require</strong>导入<strong>module.js</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var service = require(&apos;module.js&apos;)</span><br><span class=\"line\">console.log(service.port) // 输出3000</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p><strong>ES6</strong>中使用<strong>export</strong>与<strong>import</strong>关键词实现模块化。</p>\n<p><strong>module.js</strong>中使用<strong>export</strong>导出<strong>port</strong>变量和<strong>getAccounts</strong>函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export var port = 3000</span><br><span class=\"line\">export function getAccounts(url) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>main.js</strong>中使用<strong>import</strong>导入<strong>module.js</strong>，可以指定需要导入的变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;port, getAccounts&#125; from &apos;module&apos;</span><br><span class=\"line\">console.log(port) // 输出3000</span><br></pre></td></tr></table></figure></p>\n<p>也可以将全部变量导入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as service from &apos;module&apos;</span><br><span class=\"line\">console.log(service.port) // 3000</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h5><ul>\n<li><a href=\"https://gum.co/LDwVU/git-1CC81D40\" target=\"_blank\" rel=\"noopener\">ES6/ECMAScript2015 Cheatsheet(PDF)</a></li>\n<li><a href=\"https://leanpub.com/understandinges6\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></li>\n<li><a href=\"https://leanpub.com/exploring-es6\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript的this用法</a></li>\n</ul>\n<p><a href=\"https://blog.fundebug.com/2017/08/21/10-best-es6-feature/\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"需要了解的几个最佳ES6特性\"><a href=\"#需要了解的几个最佳ES6特性\" class=\"headerlink\" title=\"需要了解的几个最佳ES6特性\"></a>需要了解的几个最佳ES6特性</h2><p><strong>ES6</strong>，正式名称<strong>是ECMAScript2015</strong>，但是<strong>ES6</strong>这个名称更加简洁。<strong>ES6</strong>已经不再是JavaScript最新的标准，但是它已经广泛用于编程实践中。如果你还没用过<strong>ES6</strong>，现在还不算太晚…</p>\n<p>下面是几个<strong>ES6</strong>最佳特性，排名不分先后：</p>\n<ul>\n<li>函数参数默认值</li>\n<li>模板字符串</li>\n<li>多行字符串</li>\n<li>解构赋值</li>\n<li>展开运算符</li>\n<li>对象属性简写</li>\n<li>箭头函数</li>\n<li>Promise</li>\n<li>Let与Const</li>\n<li>类</li>\n<li>模块化</li>\n</ul>","more":"<h5 id=\"1-函数参数默认值\"><a href=\"#1-函数参数默认值\" class=\"headerlink\" title=\"1. 函数参数默认值\"></a>1. 函数参数默认值</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>为函数的参数设置默认值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(height, color)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var height = height || 50;</span><br><span class=\"line\">    var color = color || &apos;red&apos;;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样写一般没问题，但是，当参数的布尔值为<strong>false</strong>时，是会出事情的！比如，我们这样调用foo函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(0, &quot;&quot;, &quot;&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>因为0的布尔值为<strong>false</strong>，这样<strong>height</strong>的取值将是<strong>50</strong>。同理color的取值为<strong>‘red’</strong>。</p>\n<ul>\n<li><strong>使用ES6</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(height = 50, color = &apos;red&apos;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"2-模板字符串\"><a href=\"#2-模板字符串\" class=\"headerlink\" title=\"2. 模板字符串\"></a>2. 模板字符串</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>使用+号将变量拼接为字符串：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &apos;Your name is &apos; + first + &apos; &apos; + last + &apos;.&apos;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>将变量放在大括号之中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = `Your name is $&#123;first&#125; $&#123;last&#125;.`</span><br></pre></td></tr></table></figure>\n<p><strong>ES6</strong>的写法更加简洁、直观。</p>\n<h5 id=\"3-多行字符串\"><a href=\"#3-多行字符串\" class=\"headerlink\" title=\"3. 多行字符串\"></a>3. 多行字符串</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>使用<code>“\\n\\t”</code>将多行字符串拼接起来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var roadPoem = &apos;Then took the other, as just as fair,\\n\\t&apos;</span><br><span class=\"line\">    + &apos;And having perhaps the better claim\\n\\t&apos;</span><br><span class=\"line\">    + &apos;Because it was grassy and wanted wear,\\n\\t&apos;</span><br><span class=\"line\">    + &apos;Though as for that the passing there\\n\\t&apos;</span><br><span class=\"line\">    + &apos;Had worn them really about the same,\\n\\t&apos;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong><br>将多行字符串放在反引号``之间就好了：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var roadPoem = `Then took the other, as just as fair,</span><br><span class=\"line\">    And having perhaps the better claim</span><br><span class=\"line\">    Because it was grassy and wanted wear,</span><br><span class=\"line\">    Though as for that the passing there</span><br><span class=\"line\">    Had worn them really about the same,`</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"4-解构赋值\"><a href=\"#4-解构赋值\" class=\"headerlink\" title=\"4. 解构赋值\"></a>4. 解构赋值</h5><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p>\n<ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>当需要获取某个对象的属性值时，需要单独获取：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const people = &#123;</span><br><span class=\"line\">        name: &apos;lux&apos;,</span><br><span class=\"line\">        age: 20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const name = people.name</span><br><span class=\"line\">    const age = people.age</span><br><span class=\"line\">    console.log(name + &apos; --- &apos; + age)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>一次性获取对象的子属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对象</span><br><span class=\"line\">    const people = &#123;</span><br><span class=\"line\">        name: &apos;lux&apos;,</span><br><span class=\"line\">        age: 20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const &#123; name, age &#125; = people</span><br><span class=\"line\">    console.log(`$&#123;name&#125; --- $&#123;age&#125;`)</span><br><span class=\"line\">    //数组</span><br><span class=\"line\">    const color = [&apos;red&apos;, &apos;blue&apos;]</span><br><span class=\"line\">    const [first, second] = color</span><br><span class=\"line\">    console.log(first) //&apos;red&apos;</span><br><span class=\"line\">    console.log(second) //&apos;blue&apos;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-Spread-Operator-展开运算符\"><a href=\"#5-Spread-Operator-展开运算符\" class=\"headerlink\" title=\"5.Spread Operator 展开运算符\"></a>5.Spread Operator 展开运算符</h5><p>ES6中另外一个好玩的特性就是<strong>Spread Operator</strong> 也是三个点儿…接下来就展示一下它的用途。</p>\n<p>组装对象或者数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组</span><br><span class=\"line\">const color = [&apos;red&apos;, &apos;yellow&apos;]</span><br><span class=\"line\">const colorful = [...color, &apos;green&apos;, &apos;pink&apos;]</span><br><span class=\"line\">console.log(colorful) //[red, yellow, green, pink]</span><br><span class=\"line\"></span><br><span class=\"line\">//对象</span><br><span class=\"line\">const alp = &#123; fist: &apos;a&apos;, second: &apos;b&apos;&#125;</span><br><span class=\"line\">const alphabets = &#123; ...alp, third: &apos;c&apos; &#125;</span><br><span class=\"line\">console.log(alphabets) //&#123; &quot;fist&quot;: &quot;a&quot;, &quot;second&quot;: &quot;b&quot;, &quot;third&quot;: &quot;c&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组</span><br><span class=\"line\">const number = [1,2,3,4,5]</span><br><span class=\"line\">const [first, ...rest] = number</span><br><span class=\"line\">console.log(rest) //2,3,4,5</span><br><span class=\"line\">//对象</span><br><span class=\"line\">const user = &#123;</span><br><span class=\"line\">    username: &apos;lux&apos;,</span><br><span class=\"line\">    gender: &apos;female&apos;,</span><br><span class=\"line\">    age: 19,</span><br><span class=\"line\">    address: &apos;peking&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const &#123; username, ...rest &#125; = user</span><br><span class=\"line\">console.log(rest) //&#123;&quot;address&quot;: &quot;peking&quot;, &quot;age&quot;: 19, &quot;gender&quot;: &quot;female&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const first = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2,</span><br><span class=\"line\">    c: 6,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const second = &#123;</span><br><span class=\"line\">    c: 3,</span><br><span class=\"line\">    d: 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const total = &#123; ...first, ...second &#125;</span><br><span class=\"line\">console.log(total) // &#123; a: 1, b: 2, c: 3, d: 4 &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"6-对象属性简写\"><a href=\"#6-对象属性简写\" class=\"headerlink\" title=\"6. 对象属性简写\"></a>6. 对象属性简写</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>对象中必须包含属性和值，显得非常多余：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = &apos;bar&apos;;</span><br><span class=\"line\">var foo = function ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var baz = &#123;</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>对象中直接写变量，非常简单：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = &apos;bar&apos;;</span><br><span class=\"line\">var foo = function ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var baz = &#123; bar, foo &#125;;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"7-箭头函数\"><a href=\"#7-箭头函数\" class=\"headerlink\" title=\"7. 箭头函数\"></a>7. 箭头函数</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>普通函数体内的this，指向调用时所在的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    console.log(this.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var id = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // 输出1</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; id: 2 &#125;); // 输出2</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>箭头函数体内的this，就是定义时所在的对象，而不是调用时所在的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = () =&gt; &#123;</span><br><span class=\"line\">  console.log(this.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var id = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // 输出1</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; id: 2 &#125;); // 输出1</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"8-Promise\"><a href=\"#8-Promise\" class=\"headerlink\" title=\"8. Promise\"></a>8. Promise</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>嵌套两个setTimeout回调函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    console.log(&apos;Hello&apos;); // 1秒后输出&quot;Hello&quot;</span><br><span class=\"line\">    setTimeout(function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        console.log(&apos;Fundebug&apos;); // 2秒后输出&quot;Fundebug&quot;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>使用两个then是异步编程串行化，避免了回调地狱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var wait1000 = new Promise(function(resolve, reject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    setTimeout(resolve, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">wait1000</span><br><span class=\"line\">    .then(function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        console.log(&quot;Hello&quot;); // 1秒后输出&quot;Hello&quot;</span><br><span class=\"line\">        return wait1000;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        console.log(&quot;Fundebug&quot;); // 2秒后输出&quot;Fundebug&quot;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"9-Let与Const\"><a href=\"#9-Let与Const\" class=\"headerlink\" title=\"9. Let与Const\"></a>9. Let与Const</h5><ul>\n<li><strong>使用var</strong></li>\n</ul>\n<p>var定义的变量未函数级作用域：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  var a = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a); // 输出10</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用let与const</strong></li>\n</ul>\n<p>let定义的变量为块级作用域，因此会报错：(如果你希望实时监控JavaScript应用的错误，欢迎免费使用<a href=\"https://fundebug.com/\" target=\"_blank\" rel=\"noopener\">Fundebug</a>)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  let a = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a); // 报错“ReferenceError: a is not defined”</span><br></pre></td></tr></table></figure></p>\n<p>const与let一样，也是块级作用域。</p>\n<h5 id=\"10-类\"><a href=\"#10-类\" class=\"headerlink\" title=\"10. 类\"></a>10. 类</h5><ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>使用构造函数创建对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Point(x, y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">    this.add = function()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return this.x + this.y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = new Point(1, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(p.add()); // 输出3</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p>使用<strong>Class</strong>定义类，更加规范，且你能够继承：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">        return this.x + this.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p = new Point(1, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(p.add()); // 输出3</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"11-模块化\"><a href=\"#11-模块化\" class=\"headerlink\" title=\"11. 模块化\"></a>11. 模块化</h5><p>JavaScript一直没有官方的模块化解决方案，开发者在实践中主要采用<strong>CommonJS</strong>和<strong>AMD</strong>规范。而<strong>ES6</strong>制定了模块(Module)功能。</p>\n<ul>\n<li><strong>不使用ES6</strong></li>\n</ul>\n<p>Node.js采用<strong>CommenJS</strong>规范实现了模块化，而前端也可以采用，只是在部署时需要使用<a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">Browserify</a>等工具打包。这里不妨介绍一下<strong>CommenJS</strong>规范。</p>\n<p><strong>module.js</strong>中使用<strong>module.exports</strong>导出<strong>port</strong>变量和<strong>getAccounts</strong>函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\">  getAccounts: function() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>main.js</strong>中使用<strong>require</strong>导入<strong>module.js</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var service = require(&apos;module.js&apos;)</span><br><span class=\"line\">console.log(service.port) // 输出3000</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>使用ES6</strong></li>\n</ul>\n<p><strong>ES6</strong>中使用<strong>export</strong>与<strong>import</strong>关键词实现模块化。</p>\n<p><strong>module.js</strong>中使用<strong>export</strong>导出<strong>port</strong>变量和<strong>getAccounts</strong>函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export var port = 3000</span><br><span class=\"line\">export function getAccounts(url) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>main.js</strong>中使用<strong>import</strong>导入<strong>module.js</strong>，可以指定需要导入的变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;port, getAccounts&#125; from &apos;module&apos;</span><br><span class=\"line\">console.log(port) // 输出3000</span><br></pre></td></tr></table></figure></p>\n<p>也可以将全部变量导入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as service from &apos;module&apos;</span><br><span class=\"line\">console.log(service.port) // 3000</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h5><ul>\n<li><a href=\"https://gum.co/LDwVU/git-1CC81D40\" target=\"_blank\" rel=\"noopener\">ES6/ECMAScript2015 Cheatsheet(PDF)</a></li>\n<li><a href=\"https://leanpub.com/understandinges6\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></li>\n<li><a href=\"https://leanpub.com/exploring-es6\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript的this用法</a></li>\n</ul>\n<p><a href=\"https://blog.fundebug.com/2017/08/21/10-best-es6-feature/\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>"},{"title":"dva的几个核心概念","date":"2018-01-06T12:36:24.000Z","_content":"## dva的几个核心概念\n\n### Concepts\n#### 数据流向\n数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 `dispatch` 发起一个 `action`，如果是同步行为会直接通过 `Reducers` 改变 `State` ，如果是异步行为（副作用）会先触发 `Effects` 然后流向 `Reducers` 最终改变 `State`，所以在 dva 中，数据流向非常清晰简明，并且思路基本跟开源社区保持一致（也是来自于开源社区）。\n\n![dva几个核心概念关系图](dva的几个核心概念/dvaeightconcepts.png)\n\n<!--more-->\n\n### Models\n\n#### State\n`type State = any`\n\nState 表示 Model 的状态数据，通常表现为一个 javascript 对象（当然它可以是任何值）；操作的时候每次都要当作不可变数据（immutable data）来对待，保证每次都是全新对象，没有引用关系，这样才能保证 State 的独立性，便于测试和追踪变化。\n\n在 dva 中你可以通过 dva 的实例属性 `_store` 看到顶部的 state 数据，但是通常你很少会用到:\n\n```\nconst app = dva();\nconsole.log(app._store); // 顶部的 state 数据\n```\n\n#### Action\n`type AsyncAction = any`\n\nAction 是一个普通 javascript 对象，它是改变 State 的唯一途径。无论是从 UI 事件、网络回调，还是 WebSocket 等数据源所获得的数据，最终都会通过 dispatch 函数调用一个 action，从而改变对应的数据。action 必须带有 `type` 属性指明具体的行为，其它字段可以自定义，如果要发起一个 action 需要使用 `dispatch` 函数；需要注意的是 `dispatch` 是在组件 connect Models以后，通过 props 传入的。\n\n```\ndispatch({\n  type: 'add',\n});\n```\n\n#### dispatch 函数\n`type dispatch = (a: Action) => Action`\n\ndispatching function 是一个用于触发 action 的函数，action 是改变 State 的唯一途径，但是它只描述了一个行为，而 dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。\n\n在 dva 中，connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects，常见的形式如：\n\n```\ndispatch({\n  type: 'user/add', // 如果在 model 外调用，需要添加 namespace\n  payload: {}, // 需要传递的信息\n});\n```\n\n#### Reducer\n`type Reducer<S, A> = (state: S, action: A) => S`\n\nReducer（也称为 reducing function）函数接受两个参数：之前已经累积运算的结果和当前要被累积的值，返回的是一个新的累积结果。该函数把一个集合归并成一个单值。\n\nReducer 的概念来自于是函数式编程，很多语言中都有 reduce API。如在 javascript 中：\n```\n[{x:1},{y:2},{z:3}].reduce(function(prev, next){\n    return Object.assign(prev, next);\n})\n//return {x:1, y:2, z:3}\n```\n在 dva 中，reducers 聚合积累的结果是当前 model 的 state 对象。通过 actions 中传入的值，与当前 reducers 中的值进行运算获得新的值（也就是新的 state）。需要注意的是 Reducer 必须是[纯函数](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md)，所以同样的输入必然得到同样的输出，它们不应该产生任何副作用。并且，每一次的计算都应该使用[immutable data](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md#reasonable)，这种特性简单理解就是每次操作都是返回一个全新的数据（独立，纯净），所以热重载和时间旅行这些功能才能够使用。\n\n#### Effect\nEffect 被称为副作用，在我们的应用中，最常见的就是异步操作。它来自于函数编程的概念，之所以叫副作用是因为它使得我们的函数变得不纯，同样的输入不一定获得同样的输出。\n\ndva 为了控制副作用的操作，底层引入了[redux-sagas](http://superraytin.github.io/redux-saga-in-chinese)做异步流程控制，由于采用了[generator的相关概念](http://www.ruanyifeng.com/blog/2015/04/generator.html)，所以将异步转成同步写法，从而将effects转为**纯函数**。至于为什么我们这么纠结于 纯函数，如果你想了解更多可以阅读Mostly adequate guide to FP，或者它的中文译本JS函数式编程指南。\n\n#### Subscription\nSubscriptions 是一种从 源 获取数据的方法，它来自于 elm。\n\nSubscription 语义是订阅，用于订阅一个数据源，然后根据条件 dispatch 需要的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。\n```\nimport key from 'keymaster';\n...\napp.model({\n  namespace: 'count',\n  subscriptions: {\n    keyEvent(dispatch) {\n      key('⌘+up, ctrl+up', () => { dispatch({type:'add'}) });\n    },\n  }\n});\n```\n\n### Router\n这里的路由通常指的是前端路由，由于我们的应用现在通常是单页应用，所以需要前端代码来控制路由逻辑，通过浏览器提供的 [History API](http://mdn.beonex.com/en/DOM/window.history.html) 可以监听浏览器url的变化，从而控制路由相关操作。\n\ndva 实例提供了 router 方法来控制路由，使用的是[react-router](https://github.com/reactjs/react-router)。\n\n```\nimport { Router, Route } from 'dva/router';\napp.router(({history}) =>\n  <Router history={history}>\n    <Route path=\"/\" component={HomePage} />\n  </Router>\n);\n```\n\n### Route Components\n在[组件设计方法](https://github.com/dvajs/dva-docs/blob/master/v1/zh-cn/tutorial/04-%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95.md)中，我们提到过 Container Components，在 dva 中我们通常将其约束为 Route Components，因为在 dva 中我们通常以页面维度来设计 Container Components。\n\n所以在 dva 中，通常需要 connect Model的组件都是 Route Components，组织在/routes/目录下，而/components/目录下则是纯组件（Presentational Components）。\n\n### 参考引申\n- [redux docs](http://redux.js.org/docs/Glossary.html)\n- [redux docs 中文](http://cn.redux.js.org/index.html)\n- [Mostly adequate guide to FP](https://github.com/MostlyAdequate/mostly-adequate-guide)\n- [JS函数式编程指南](https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details)\n- [choo docs](https://github.com/yoshuawuyts/choo)\n- [elm](http://elm-lang.org/blog/farewell-to-frp)\n\n[尊重原创，感谢原创分享](https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md#dispatch-%E5%87%BD%E6%95%B0)","source":"_posts/dva的几个核心概念.md","raw":"---\ntitle: dva的几个核心概念\ndate: 2018-01-06 20:36:24\ncategories: React\ntags: Dva\n---\n## dva的几个核心概念\n\n### Concepts\n#### 数据流向\n数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 `dispatch` 发起一个 `action`，如果是同步行为会直接通过 `Reducers` 改变 `State` ，如果是异步行为（副作用）会先触发 `Effects` 然后流向 `Reducers` 最终改变 `State`，所以在 dva 中，数据流向非常清晰简明，并且思路基本跟开源社区保持一致（也是来自于开源社区）。\n\n![dva几个核心概念关系图](dva的几个核心概念/dvaeightconcepts.png)\n\n<!--more-->\n\n### Models\n\n#### State\n`type State = any`\n\nState 表示 Model 的状态数据，通常表现为一个 javascript 对象（当然它可以是任何值）；操作的时候每次都要当作不可变数据（immutable data）来对待，保证每次都是全新对象，没有引用关系，这样才能保证 State 的独立性，便于测试和追踪变化。\n\n在 dva 中你可以通过 dva 的实例属性 `_store` 看到顶部的 state 数据，但是通常你很少会用到:\n\n```\nconst app = dva();\nconsole.log(app._store); // 顶部的 state 数据\n```\n\n#### Action\n`type AsyncAction = any`\n\nAction 是一个普通 javascript 对象，它是改变 State 的唯一途径。无论是从 UI 事件、网络回调，还是 WebSocket 等数据源所获得的数据，最终都会通过 dispatch 函数调用一个 action，从而改变对应的数据。action 必须带有 `type` 属性指明具体的行为，其它字段可以自定义，如果要发起一个 action 需要使用 `dispatch` 函数；需要注意的是 `dispatch` 是在组件 connect Models以后，通过 props 传入的。\n\n```\ndispatch({\n  type: 'add',\n});\n```\n\n#### dispatch 函数\n`type dispatch = (a: Action) => Action`\n\ndispatching function 是一个用于触发 action 的函数，action 是改变 State 的唯一途径，但是它只描述了一个行为，而 dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。\n\n在 dva 中，connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects，常见的形式如：\n\n```\ndispatch({\n  type: 'user/add', // 如果在 model 外调用，需要添加 namespace\n  payload: {}, // 需要传递的信息\n});\n```\n\n#### Reducer\n`type Reducer<S, A> = (state: S, action: A) => S`\n\nReducer（也称为 reducing function）函数接受两个参数：之前已经累积运算的结果和当前要被累积的值，返回的是一个新的累积结果。该函数把一个集合归并成一个单值。\n\nReducer 的概念来自于是函数式编程，很多语言中都有 reduce API。如在 javascript 中：\n```\n[{x:1},{y:2},{z:3}].reduce(function(prev, next){\n    return Object.assign(prev, next);\n})\n//return {x:1, y:2, z:3}\n```\n在 dva 中，reducers 聚合积累的结果是当前 model 的 state 对象。通过 actions 中传入的值，与当前 reducers 中的值进行运算获得新的值（也就是新的 state）。需要注意的是 Reducer 必须是[纯函数](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md)，所以同样的输入必然得到同样的输出，它们不应该产生任何副作用。并且，每一次的计算都应该使用[immutable data](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md#reasonable)，这种特性简单理解就是每次操作都是返回一个全新的数据（独立，纯净），所以热重载和时间旅行这些功能才能够使用。\n\n#### Effect\nEffect 被称为副作用，在我们的应用中，最常见的就是异步操作。它来自于函数编程的概念，之所以叫副作用是因为它使得我们的函数变得不纯，同样的输入不一定获得同样的输出。\n\ndva 为了控制副作用的操作，底层引入了[redux-sagas](http://superraytin.github.io/redux-saga-in-chinese)做异步流程控制，由于采用了[generator的相关概念](http://www.ruanyifeng.com/blog/2015/04/generator.html)，所以将异步转成同步写法，从而将effects转为**纯函数**。至于为什么我们这么纠结于 纯函数，如果你想了解更多可以阅读Mostly adequate guide to FP，或者它的中文译本JS函数式编程指南。\n\n#### Subscription\nSubscriptions 是一种从 源 获取数据的方法，它来自于 elm。\n\nSubscription 语义是订阅，用于订阅一个数据源，然后根据条件 dispatch 需要的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。\n```\nimport key from 'keymaster';\n...\napp.model({\n  namespace: 'count',\n  subscriptions: {\n    keyEvent(dispatch) {\n      key('⌘+up, ctrl+up', () => { dispatch({type:'add'}) });\n    },\n  }\n});\n```\n\n### Router\n这里的路由通常指的是前端路由，由于我们的应用现在通常是单页应用，所以需要前端代码来控制路由逻辑，通过浏览器提供的 [History API](http://mdn.beonex.com/en/DOM/window.history.html) 可以监听浏览器url的变化，从而控制路由相关操作。\n\ndva 实例提供了 router 方法来控制路由，使用的是[react-router](https://github.com/reactjs/react-router)。\n\n```\nimport { Router, Route } from 'dva/router';\napp.router(({history}) =>\n  <Router history={history}>\n    <Route path=\"/\" component={HomePage} />\n  </Router>\n);\n```\n\n### Route Components\n在[组件设计方法](https://github.com/dvajs/dva-docs/blob/master/v1/zh-cn/tutorial/04-%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95.md)中，我们提到过 Container Components，在 dva 中我们通常将其约束为 Route Components，因为在 dva 中我们通常以页面维度来设计 Container Components。\n\n所以在 dva 中，通常需要 connect Model的组件都是 Route Components，组织在/routes/目录下，而/components/目录下则是纯组件（Presentational Components）。\n\n### 参考引申\n- [redux docs](http://redux.js.org/docs/Glossary.html)\n- [redux docs 中文](http://cn.redux.js.org/index.html)\n- [Mostly adequate guide to FP](https://github.com/MostlyAdequate/mostly-adequate-guide)\n- [JS函数式编程指南](https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details)\n- [choo docs](https://github.com/yoshuawuyts/choo)\n- [elm](http://elm-lang.org/blog/farewell-to-frp)\n\n[尊重原创，感谢原创分享](https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md#dispatch-%E5%87%BD%E6%95%B0)","slug":"dva的几个核心概念","published":1,"updated":"2018-02-07T05:44:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmt001qlxnd8s42tcmm","content":"<h2 id=\"dva的几个核心概念\"><a href=\"#dva的几个核心概念\" class=\"headerlink\" title=\"dva的几个核心概念\"></a>dva的几个核心概念</h2><h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><h4 id=\"数据流向\"><a href=\"#数据流向\" class=\"headerlink\" title=\"数据流向\"></a>数据流向</h4><p>数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 <code>dispatch</code> 发起一个 <code>action</code>，如果是同步行为会直接通过 <code>Reducers</code> 改变 <code>State</code> ，如果是异步行为（副作用）会先触发 <code>Effects</code> 然后流向 <code>Reducers</code> 最终改变 <code>State</code>，所以在 dva 中，数据流向非常清晰简明，并且思路基本跟开源社区保持一致（也是来自于开源社区）。</p>\n<p><img src=\"/2018/01/06/dva的几个核心概念/dvaeightconcepts.png\" alt=\"dva几个核心概念关系图\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h3><h4 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h4><p><code>type State = any</code></p>\n<p>State 表示 Model 的状态数据，通常表现为一个 javascript 对象（当然它可以是任何值）；操作的时候每次都要当作不可变数据（immutable data）来对待，保证每次都是全新对象，没有引用关系，这样才能保证 State 的独立性，便于测试和追踪变化。</p>\n<p>在 dva 中你可以通过 dva 的实例属性 <code>_store</code> 看到顶部的 state 数据，但是通常你很少会用到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = dva();</span><br><span class=\"line\">console.log(app._store); // 顶部的 state 数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p><code>type AsyncAction = any</code></p>\n<p>Action 是一个普通 javascript 对象，它是改变 State 的唯一途径。无论是从 UI 事件、网络回调，还是 WebSocket 等数据源所获得的数据，最终都会通过 dispatch 函数调用一个 action，从而改变对应的数据。action 必须带有 <code>type</code> 属性指明具体的行为，其它字段可以自定义，如果要发起一个 action 需要使用 <code>dispatch</code> 函数；需要注意的是 <code>dispatch</code> 是在组件 connect Models以后，通过 props 传入的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch(&#123;</span><br><span class=\"line\">  type: &apos;add&apos;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"dispatch-函数\"><a href=\"#dispatch-函数\" class=\"headerlink\" title=\"dispatch 函数\"></a>dispatch 函数</h4><p><code>type dispatch = (a: Action) =&gt; Action</code></p>\n<p>dispatching function 是一个用于触发 action 的函数，action 是改变 State 的唯一途径，但是它只描述了一个行为，而 dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。</p>\n<p>在 dva 中，connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects，常见的形式如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch(&#123;</span><br><span class=\"line\">  type: &apos;user/add&apos;, // 如果在 model 外调用，需要添加 namespace</span><br><span class=\"line\">  payload: &#123;&#125;, // 需要传递的信息</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h4><p><code>type Reducer&lt;S, A&gt; = (state: S, action: A) =&gt; S</code></p>\n<p>Reducer（也称为 reducing function）函数接受两个参数：之前已经累积运算的结果和当前要被累积的值，返回的是一个新的累积结果。该函数把一个集合归并成一个单值。</p>\n<p>Reducer 的概念来自于是函数式编程，很多语言中都有 reduce API。如在 javascript 中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;x:1&#125;,&#123;y:2&#125;,&#123;z:3&#125;].reduce(function(prev, next)&#123;</span><br><span class=\"line\">    return Object.assign(prev, next);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//return &#123;x:1, y:2, z:3&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 dva 中，reducers 聚合积累的结果是当前 model 的 state 对象。通过 actions 中传入的值，与当前 reducers 中的值进行运算获得新的值（也就是新的 state）。需要注意的是 Reducer 必须是<a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md\" target=\"_blank\" rel=\"noopener\">纯函数</a>，所以同样的输入必然得到同样的输出，它们不应该产生任何副作用。并且，每一次的计算都应该使用<a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md#reasonable\" target=\"_blank\" rel=\"noopener\">immutable data</a>，这种特性简单理解就是每次操作都是返回一个全新的数据（独立，纯净），所以热重载和时间旅行这些功能才能够使用。</p>\n<h4 id=\"Effect\"><a href=\"#Effect\" class=\"headerlink\" title=\"Effect\"></a>Effect</h4><p>Effect 被称为副作用，在我们的应用中，最常见的就是异步操作。它来自于函数编程的概念，之所以叫副作用是因为它使得我们的函数变得不纯，同样的输入不一定获得同样的输出。</p>\n<p>dva 为了控制副作用的操作，底层引入了<a href=\"http://superraytin.github.io/redux-saga-in-chinese\" target=\"_blank\" rel=\"noopener\">redux-sagas</a>做异步流程控制，由于采用了<a href=\"http://www.ruanyifeng.com/blog/2015/04/generator.html\" target=\"_blank\" rel=\"noopener\">generator的相关概念</a>，所以将异步转成同步写法，从而将effects转为<strong>纯函数</strong>。至于为什么我们这么纠结于 纯函数，如果你想了解更多可以阅读Mostly adequate guide to FP，或者它的中文译本JS函数式编程指南。</p>\n<h4 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h4><p>Subscriptions 是一种从 源 获取数据的方法，它来自于 elm。</p>\n<p>Subscription 语义是订阅，用于订阅一个数据源，然后根据条件 dispatch 需要的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import key from &apos;keymaster&apos;;</span><br><span class=\"line\">...</span><br><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  namespace: &apos;count&apos;,</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    keyEvent(dispatch) &#123;</span><br><span class=\"line\">      key(&apos;⌘+up, ctrl+up&apos;, () =&gt; &#123; dispatch(&#123;type:&apos;add&apos;&#125;) &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h3><p>这里的路由通常指的是前端路由，由于我们的应用现在通常是单页应用，所以需要前端代码来控制路由逻辑，通过浏览器提供的 <a href=\"http://mdn.beonex.com/en/DOM/window.history.html\" target=\"_blank\" rel=\"noopener\">History API</a> 可以监听浏览器url的变化，从而控制路由相关操作。</p>\n<p>dva 实例提供了 router 方法来控制路由，使用的是<a href=\"https://github.com/reactjs/react-router\" target=\"_blank\" rel=\"noopener\">react-router</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Router, Route &#125; from &apos;dva/router&apos;;</span><br><span class=\"line\">app.router((&#123;history&#125;) =&gt;</span><br><span class=\"line\">  &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=&quot;/&quot; component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">  &lt;/Router&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Route-Components\"><a href=\"#Route-Components\" class=\"headerlink\" title=\"Route Components\"></a>Route Components</h3><p>在<a href=\"https://github.com/dvajs/dva-docs/blob/master/v1/zh-cn/tutorial/04-%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95.md\" target=\"_blank\" rel=\"noopener\">组件设计方法</a>中，我们提到过 Container Components，在 dva 中我们通常将其约束为 Route Components，因为在 dva 中我们通常以页面维度来设计 Container Components。</p>\n<p>所以在 dva 中，通常需要 connect Model的组件都是 Route Components，组织在/routes/目录下，而/components/目录下则是纯组件（Presentational Components）。</p>\n<h3 id=\"参考引申\"><a href=\"#参考引申\" class=\"headerlink\" title=\"参考引申\"></a>参考引申</h3><ul>\n<li><a href=\"http://redux.js.org/docs/Glossary.html\" target=\"_blank\" rel=\"noopener\">redux docs</a></li>\n<li><a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"noopener\">redux docs 中文</a></li>\n<li><a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide\" target=\"_blank\" rel=\"noopener\">Mostly adequate guide to FP</a></li>\n<li><a href=\"https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details\" target=\"_blank\" rel=\"noopener\">JS函数式编程指南</a></li>\n<li><a href=\"https://github.com/yoshuawuyts/choo\" target=\"_blank\" rel=\"noopener\">choo docs</a></li>\n<li><a href=\"http://elm-lang.org/blog/farewell-to-frp\" target=\"_blank\" rel=\"noopener\">elm</a></li>\n</ul>\n<p><a href=\"https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md#dispatch-%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"dva的几个核心概念\"><a href=\"#dva的几个核心概念\" class=\"headerlink\" title=\"dva的几个核心概念\"></a>dva的几个核心概念</h2><h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><h4 id=\"数据流向\"><a href=\"#数据流向\" class=\"headerlink\" title=\"数据流向\"></a>数据流向</h4><p>数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 <code>dispatch</code> 发起一个 <code>action</code>，如果是同步行为会直接通过 <code>Reducers</code> 改变 <code>State</code> ，如果是异步行为（副作用）会先触发 <code>Effects</code> 然后流向 <code>Reducers</code> 最终改变 <code>State</code>，所以在 dva 中，数据流向非常清晰简明，并且思路基本跟开源社区保持一致（也是来自于开源社区）。</p>\n<p><img src=\"/2018/01/06/dva的几个核心概念/dvaeightconcepts.png\" alt=\"dva几个核心概念关系图\"></p>","more":"<h3 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h3><h4 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h4><p><code>type State = any</code></p>\n<p>State 表示 Model 的状态数据，通常表现为一个 javascript 对象（当然它可以是任何值）；操作的时候每次都要当作不可变数据（immutable data）来对待，保证每次都是全新对象，没有引用关系，这样才能保证 State 的独立性，便于测试和追踪变化。</p>\n<p>在 dva 中你可以通过 dva 的实例属性 <code>_store</code> 看到顶部的 state 数据，但是通常你很少会用到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = dva();</span><br><span class=\"line\">console.log(app._store); // 顶部的 state 数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p><code>type AsyncAction = any</code></p>\n<p>Action 是一个普通 javascript 对象，它是改变 State 的唯一途径。无论是从 UI 事件、网络回调，还是 WebSocket 等数据源所获得的数据，最终都会通过 dispatch 函数调用一个 action，从而改变对应的数据。action 必须带有 <code>type</code> 属性指明具体的行为，其它字段可以自定义，如果要发起一个 action 需要使用 <code>dispatch</code> 函数；需要注意的是 <code>dispatch</code> 是在组件 connect Models以后，通过 props 传入的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch(&#123;</span><br><span class=\"line\">  type: &apos;add&apos;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"dispatch-函数\"><a href=\"#dispatch-函数\" class=\"headerlink\" title=\"dispatch 函数\"></a>dispatch 函数</h4><p><code>type dispatch = (a: Action) =&gt; Action</code></p>\n<p>dispatching function 是一个用于触发 action 的函数，action 是改变 State 的唯一途径，但是它只描述了一个行为，而 dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。</p>\n<p>在 dva 中，connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects，常见的形式如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch(&#123;</span><br><span class=\"line\">  type: &apos;user/add&apos;, // 如果在 model 外调用，需要添加 namespace</span><br><span class=\"line\">  payload: &#123;&#125;, // 需要传递的信息</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h4><p><code>type Reducer&lt;S, A&gt; = (state: S, action: A) =&gt; S</code></p>\n<p>Reducer（也称为 reducing function）函数接受两个参数：之前已经累积运算的结果和当前要被累积的值，返回的是一个新的累积结果。该函数把一个集合归并成一个单值。</p>\n<p>Reducer 的概念来自于是函数式编程，很多语言中都有 reduce API。如在 javascript 中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;x:1&#125;,&#123;y:2&#125;,&#123;z:3&#125;].reduce(function(prev, next)&#123;</span><br><span class=\"line\">    return Object.assign(prev, next);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//return &#123;x:1, y:2, z:3&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 dva 中，reducers 聚合积累的结果是当前 model 的 state 对象。通过 actions 中传入的值，与当前 reducers 中的值进行运算获得新的值（也就是新的 state）。需要注意的是 Reducer 必须是<a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md\" target=\"_blank\" rel=\"noopener\">纯函数</a>，所以同样的输入必然得到同样的输出，它们不应该产生任何副作用。并且，每一次的计算都应该使用<a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch3.md#reasonable\" target=\"_blank\" rel=\"noopener\">immutable data</a>，这种特性简单理解就是每次操作都是返回一个全新的数据（独立，纯净），所以热重载和时间旅行这些功能才能够使用。</p>\n<h4 id=\"Effect\"><a href=\"#Effect\" class=\"headerlink\" title=\"Effect\"></a>Effect</h4><p>Effect 被称为副作用，在我们的应用中，最常见的就是异步操作。它来自于函数编程的概念，之所以叫副作用是因为它使得我们的函数变得不纯，同样的输入不一定获得同样的输出。</p>\n<p>dva 为了控制副作用的操作，底层引入了<a href=\"http://superraytin.github.io/redux-saga-in-chinese\" target=\"_blank\" rel=\"noopener\">redux-sagas</a>做异步流程控制，由于采用了<a href=\"http://www.ruanyifeng.com/blog/2015/04/generator.html\" target=\"_blank\" rel=\"noopener\">generator的相关概念</a>，所以将异步转成同步写法，从而将effects转为<strong>纯函数</strong>。至于为什么我们这么纠结于 纯函数，如果你想了解更多可以阅读Mostly adequate guide to FP，或者它的中文译本JS函数式编程指南。</p>\n<h4 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h4><p>Subscriptions 是一种从 源 获取数据的方法，它来自于 elm。</p>\n<p>Subscription 语义是订阅，用于订阅一个数据源，然后根据条件 dispatch 需要的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import key from &apos;keymaster&apos;;</span><br><span class=\"line\">...</span><br><span class=\"line\">app.model(&#123;</span><br><span class=\"line\">  namespace: &apos;count&apos;,</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    keyEvent(dispatch) &#123;</span><br><span class=\"line\">      key(&apos;⌘+up, ctrl+up&apos;, () =&gt; &#123; dispatch(&#123;type:&apos;add&apos;&#125;) &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h3><p>这里的路由通常指的是前端路由，由于我们的应用现在通常是单页应用，所以需要前端代码来控制路由逻辑，通过浏览器提供的 <a href=\"http://mdn.beonex.com/en/DOM/window.history.html\" target=\"_blank\" rel=\"noopener\">History API</a> 可以监听浏览器url的变化，从而控制路由相关操作。</p>\n<p>dva 实例提供了 router 方法来控制路由，使用的是<a href=\"https://github.com/reactjs/react-router\" target=\"_blank\" rel=\"noopener\">react-router</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Router, Route &#125; from &apos;dva/router&apos;;</span><br><span class=\"line\">app.router((&#123;history&#125;) =&gt;</span><br><span class=\"line\">  &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=&quot;/&quot; component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">  &lt;/Router&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Route-Components\"><a href=\"#Route-Components\" class=\"headerlink\" title=\"Route Components\"></a>Route Components</h3><p>在<a href=\"https://github.com/dvajs/dva-docs/blob/master/v1/zh-cn/tutorial/04-%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95.md\" target=\"_blank\" rel=\"noopener\">组件设计方法</a>中，我们提到过 Container Components，在 dva 中我们通常将其约束为 Route Components，因为在 dva 中我们通常以页面维度来设计 Container Components。</p>\n<p>所以在 dva 中，通常需要 connect Model的组件都是 Route Components，组织在/routes/目录下，而/components/目录下则是纯组件（Presentational Components）。</p>\n<h3 id=\"参考引申\"><a href=\"#参考引申\" class=\"headerlink\" title=\"参考引申\"></a>参考引申</h3><ul>\n<li><a href=\"http://redux.js.org/docs/Glossary.html\" target=\"_blank\" rel=\"noopener\">redux docs</a></li>\n<li><a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"noopener\">redux docs 中文</a></li>\n<li><a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide\" target=\"_blank\" rel=\"noopener\">Mostly adequate guide to FP</a></li>\n<li><a href=\"https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details\" target=\"_blank\" rel=\"noopener\">JS函数式编程指南</a></li>\n<li><a href=\"https://github.com/yoshuawuyts/choo\" target=\"_blank\" rel=\"noopener\">choo docs</a></li>\n<li><a href=\"http://elm-lang.org/blog/farewell-to-frp\" target=\"_blank\" rel=\"noopener\">elm</a></li>\n</ul>\n<p><a href=\"https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md#dispatch-%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">尊重原创，感谢原创分享</a></p>"},{"title":"redux-saga的入门基础","date":"2018-04-04T11:51:50.000Z","_content":"## redux-saga的入门基础\n\nredux-saga 是一个用于管理 Redux 应用异步操作（Side Effects。译注：直译成 “副作用” 不太通顺，所以这里译为 “异步操作” 更好理解）的中间件（又称异步 action）。 redux-saga 通过创建 Sagas 将所有的异步操作逻辑收集在一个地方集中处理，可以用来代替 redux-thunk 中间件。\n\n##### 这意味着应用的逻辑会存在两个地方：\n\n1. Reducers 负责处理 action 的 state 更新。\n\n2. Sagas 负责协调那些复杂或异步的操作。\n\nSagas 是通过 Generator 函数来创建的。如果你还不熟悉 Generator，可以在这里找到 [一些有用的链接](http://superraytin.github.io/redux-saga-in-chinese/docs/ExternalResources.html)。\n\n<!--more-->\n\nSagas 不同于 Thunks，Thunks 是在 action 被创建时调用，而 Sagas 只会在应用启动时调用（但初始启动的 Sagas 可能会动态调用其他 Sagas）。 Sagas 可以被看作是在后台运行的进程。Sagas 监听发起的 action，然后决定基于这个 action 来做什么：是发起一个异步调用（比如一个 Ajax 请求），还是发起其他的 action 到 Store，甚至是调用其他的 Sagas。\n\n在 redux-saga 的世界里，所有的任务都通用 yield Effects 来完成（译注：Effect 可以看作是 redux-saga 的任务单元）。Effects 都是简单的 Javascript 对象，包含了要被 Saga middleware 执行的信息（打个比方，你可以看到 Redux action 其实是一个个包含执行信息的对象）。 redux-saga 为各项任务提供了各种 Effect 创建器，比如调用一个异步函数，发起一个 action 到 Store，启动一个后台任务或者等待一个满足某些条件的未来的 action。\n\n因为使用了 Generator，redux-saga 让你可以用同步的方式写异步代码。就像你可以使用 async/await 函数所能做的一样。但 Generator 可以让你做一些 async 函数做不到的事情。\n\n事实上 Sagas yield 普通对象的方式让你能容易地测试 Generator 里所有的业务逻辑，可以通过简单地迭代 yield 过的对象进行简单的单元测试。\n\n此外，redux-saga 启动的任务可以在任何时候通过手动取消，也可以把任务和其他的 Effects 放到 race 方法里以自动取消。\n\n\n##### 安装\n\n```\nnpm install --save redux-saga\n```\n\n你也可以直接在 HTML 页面中通过 `&lt;script&gt`; 标签使用提供的 UMD 构建版本，看 [这里](https://github.com/superRaytin/redux-saga-in-chinese#using-umd-build-in-the-browser)。\n\n##### 使用示例\n假设我们有一个 UI 界面，在单击按钮时从远程服务器获取一些用户数据（为简单起见，我们只列出 action 触发代码）。\n\n```\nclass UserComponent extends React.Component {\n  ...\n  onSomeButtonClicked() {\n    const { userId, dispatch } = this.props\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  }\n  ...\n}\n```\n\n这个组件发起一个普通对象格式的 action 到 Store。我们将创建一个 Saga 来监听所有的 `USER_FETCH_REQUESTED` action，并触发一个 API 调用以获取用户数据。\n\n###### sagas.js\n\n```\nimport { takeEvery, takeLatest } from 'redux-saga'\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\n// workder Saga : 将在 USER_FETCH_REQUESTED action 被发起时调用\nfunction* fetchUser(action) {\n   try {\n      const user = yield call(Api.fetchUser, action.payload.userId);\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   } catch (e) {\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   }\n}\n\n/*\n  在每个 `USER_FETCH_REQUESTED` action 被发起时调用 fetchUser\n  允许并发（译注：即同时处理多个相同的 action）\n*/\nfunction* mySaga() {\n  yield* takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\n/*\n  也可以使用 takeLatest\n\n  不允许并发，发起一个 `USER_FETCH_REQUESTED` action 时，\n  如果在这之前已经有一个 `USER_FETCH_REQUESTED` action 在处理中，\n  那么处理中的 action 会被取消，只会执行当前的\n*/\nfunction* mySaga() {\n  yield* takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n```\n\n为了能跑起 Saga，我们需要使用 redux-saga 中间件将 Saga 与 Redux Store 建立连接。\n\n##### main.js\n\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducers'\nimport mySaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware(mySaga)\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\n\n// render the application\n```\n\n\n[Redux-saga 中文文档](https://github.com/superRaytin/redux-saga-in-chinese)","source":"_posts/redux-saga的入门基础.md","raw":"---\ntitle: redux-saga的入门基础\ndate: 2018-04-04 19:51:50\ncategories: React\ntags: Redux\n---\n## redux-saga的入门基础\n\nredux-saga 是一个用于管理 Redux 应用异步操作（Side Effects。译注：直译成 “副作用” 不太通顺，所以这里译为 “异步操作” 更好理解）的中间件（又称异步 action）。 redux-saga 通过创建 Sagas 将所有的异步操作逻辑收集在一个地方集中处理，可以用来代替 redux-thunk 中间件。\n\n##### 这意味着应用的逻辑会存在两个地方：\n\n1. Reducers 负责处理 action 的 state 更新。\n\n2. Sagas 负责协调那些复杂或异步的操作。\n\nSagas 是通过 Generator 函数来创建的。如果你还不熟悉 Generator，可以在这里找到 [一些有用的链接](http://superraytin.github.io/redux-saga-in-chinese/docs/ExternalResources.html)。\n\n<!--more-->\n\nSagas 不同于 Thunks，Thunks 是在 action 被创建时调用，而 Sagas 只会在应用启动时调用（但初始启动的 Sagas 可能会动态调用其他 Sagas）。 Sagas 可以被看作是在后台运行的进程。Sagas 监听发起的 action，然后决定基于这个 action 来做什么：是发起一个异步调用（比如一个 Ajax 请求），还是发起其他的 action 到 Store，甚至是调用其他的 Sagas。\n\n在 redux-saga 的世界里，所有的任务都通用 yield Effects 来完成（译注：Effect 可以看作是 redux-saga 的任务单元）。Effects 都是简单的 Javascript 对象，包含了要被 Saga middleware 执行的信息（打个比方，你可以看到 Redux action 其实是一个个包含执行信息的对象）。 redux-saga 为各项任务提供了各种 Effect 创建器，比如调用一个异步函数，发起一个 action 到 Store，启动一个后台任务或者等待一个满足某些条件的未来的 action。\n\n因为使用了 Generator，redux-saga 让你可以用同步的方式写异步代码。就像你可以使用 async/await 函数所能做的一样。但 Generator 可以让你做一些 async 函数做不到的事情。\n\n事实上 Sagas yield 普通对象的方式让你能容易地测试 Generator 里所有的业务逻辑，可以通过简单地迭代 yield 过的对象进行简单的单元测试。\n\n此外，redux-saga 启动的任务可以在任何时候通过手动取消，也可以把任务和其他的 Effects 放到 race 方法里以自动取消。\n\n\n##### 安装\n\n```\nnpm install --save redux-saga\n```\n\n你也可以直接在 HTML 页面中通过 `&lt;script&gt`; 标签使用提供的 UMD 构建版本，看 [这里](https://github.com/superRaytin/redux-saga-in-chinese#using-umd-build-in-the-browser)。\n\n##### 使用示例\n假设我们有一个 UI 界面，在单击按钮时从远程服务器获取一些用户数据（为简单起见，我们只列出 action 触发代码）。\n\n```\nclass UserComponent extends React.Component {\n  ...\n  onSomeButtonClicked() {\n    const { userId, dispatch } = this.props\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  }\n  ...\n}\n```\n\n这个组件发起一个普通对象格式的 action 到 Store。我们将创建一个 Saga 来监听所有的 `USER_FETCH_REQUESTED` action，并触发一个 API 调用以获取用户数据。\n\n###### sagas.js\n\n```\nimport { takeEvery, takeLatest } from 'redux-saga'\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\n// workder Saga : 将在 USER_FETCH_REQUESTED action 被发起时调用\nfunction* fetchUser(action) {\n   try {\n      const user = yield call(Api.fetchUser, action.payload.userId);\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   } catch (e) {\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   }\n}\n\n/*\n  在每个 `USER_FETCH_REQUESTED` action 被发起时调用 fetchUser\n  允许并发（译注：即同时处理多个相同的 action）\n*/\nfunction* mySaga() {\n  yield* takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\n/*\n  也可以使用 takeLatest\n\n  不允许并发，发起一个 `USER_FETCH_REQUESTED` action 时，\n  如果在这之前已经有一个 `USER_FETCH_REQUESTED` action 在处理中，\n  那么处理中的 action 会被取消，只会执行当前的\n*/\nfunction* mySaga() {\n  yield* takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n```\n\n为了能跑起 Saga，我们需要使用 redux-saga 中间件将 Saga 与 Redux Store 建立连接。\n\n##### main.js\n\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducers'\nimport mySaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware(mySaga)\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\n\n// render the application\n```\n\n\n[Redux-saga 中文文档](https://github.com/superRaytin/redux-saga-in-chinese)","slug":"redux-saga的入门基础","published":1,"updated":"2018-06-28T05:58:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl33fhmv001tlxndueruv5iu","content":"<h2 id=\"redux-saga的入门基础\"><a href=\"#redux-saga的入门基础\" class=\"headerlink\" title=\"redux-saga的入门基础\"></a>redux-saga的入门基础</h2><p>redux-saga 是一个用于管理 Redux 应用异步操作（Side Effects。译注：直译成 “副作用” 不太通顺，所以这里译为 “异步操作” 更好理解）的中间件（又称异步 action）。 redux-saga 通过创建 Sagas 将所有的异步操作逻辑收集在一个地方集中处理，可以用来代替 redux-thunk 中间件。</p>\n<h5 id=\"这意味着应用的逻辑会存在两个地方：\"><a href=\"#这意味着应用的逻辑会存在两个地方：\" class=\"headerlink\" title=\"这意味着应用的逻辑会存在两个地方：\"></a>这意味着应用的逻辑会存在两个地方：</h5><ol>\n<li><p>Reducers 负责处理 action 的 state 更新。</p>\n</li>\n<li><p>Sagas 负责协调那些复杂或异步的操作。</p>\n</li>\n</ol>\n<p>Sagas 是通过 Generator 函数来创建的。如果你还不熟悉 Generator，可以在这里找到 <a href=\"http://superraytin.github.io/redux-saga-in-chinese/docs/ExternalResources.html\" target=\"_blank\" rel=\"noopener\">一些有用的链接</a>。</p>\n<a id=\"more\"></a>\n<p>Sagas 不同于 Thunks，Thunks 是在 action 被创建时调用，而 Sagas 只会在应用启动时调用（但初始启动的 Sagas 可能会动态调用其他 Sagas）。 Sagas 可以被看作是在后台运行的进程。Sagas 监听发起的 action，然后决定基于这个 action 来做什么：是发起一个异步调用（比如一个 Ajax 请求），还是发起其他的 action 到 Store，甚至是调用其他的 Sagas。</p>\n<p>在 redux-saga 的世界里，所有的任务都通用 yield Effects 来完成（译注：Effect 可以看作是 redux-saga 的任务单元）。Effects 都是简单的 Javascript 对象，包含了要被 Saga middleware 执行的信息（打个比方，你可以看到 Redux action 其实是一个个包含执行信息的对象）。 redux-saga 为各项任务提供了各种 Effect 创建器，比如调用一个异步函数，发起一个 action 到 Store，启动一个后台任务或者等待一个满足某些条件的未来的 action。</p>\n<p>因为使用了 Generator，redux-saga 让你可以用同步的方式写异步代码。就像你可以使用 async/await 函数所能做的一样。但 Generator 可以让你做一些 async 函数做不到的事情。</p>\n<p>事实上 Sagas yield 普通对象的方式让你能容易地测试 Generator 里所有的业务逻辑，可以通过简单地迭代 yield 过的对象进行简单的单元测试。</p>\n<p>此外，redux-saga 启动的任务可以在任何时候通过手动取消，也可以把任务和其他的 Effects 放到 race 方法里以自动取消。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save redux-saga</span><br></pre></td></tr></table></figure>\n<p>你也可以直接在 HTML 页面中通过 <code>&amp;lt;script&amp;gt</code>; 标签使用提供的 UMD 构建版本，看 <a href=\"https://github.com/superRaytin/redux-saga-in-chinese#using-umd-build-in-the-browser\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h5 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h5><p>假设我们有一个 UI 界面，在单击按钮时从远程服务器获取一些用户数据（为简单起见，我们只列出 action 触发代码）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UserComponent extends React.Component &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  onSomeButtonClicked() &#123;</span><br><span class=\"line\">    const &#123; userId, dispatch &#125; = this.props</span><br><span class=\"line\">    dispatch(&#123;type: &apos;USER_FETCH_REQUESTED&apos;, payload: &#123;userId&#125;&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个组件发起一个普通对象格式的 action 到 Store。我们将创建一个 Saga 来监听所有的 <code>USER_FETCH_REQUESTED</code> action，并触发一个 API 调用以获取用户数据。</p>\n<h6 id=\"sagas-js\"><a href=\"#sagas-js\" class=\"headerlink\" title=\"sagas.js\"></a>sagas.js</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; takeEvery, takeLatest &#125; from &apos;redux-saga&apos;</span><br><span class=\"line\">import &#123; call, put &#125; from &apos;redux-saga/effects&apos;</span><br><span class=\"line\">import Api from &apos;...&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// workder Saga : 将在 USER_FETCH_REQUESTED action 被发起时调用</span><br><span class=\"line\">function* fetchUser(action) &#123;</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">      const user = yield call(Api.fetchUser, action.payload.userId);</span><br><span class=\"line\">      yield put(&#123;type: &quot;USER_FETCH_SUCCEEDED&quot;, user: user&#125;);</span><br><span class=\"line\">   &#125; catch (e) &#123;</span><br><span class=\"line\">      yield put(&#123;type: &quot;USER_FETCH_FAILED&quot;, message: e.message&#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">  在每个 `USER_FETCH_REQUESTED` action 被发起时调用 fetchUser</span><br><span class=\"line\">  允许并发（译注：即同时处理多个相同的 action）</span><br><span class=\"line\">*/</span><br><span class=\"line\">function* mySaga() &#123;</span><br><span class=\"line\">  yield* takeEvery(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">  也可以使用 takeLatest</span><br><span class=\"line\"></span><br><span class=\"line\">  不允许并发，发起一个 `USER_FETCH_REQUESTED` action 时，</span><br><span class=\"line\">  如果在这之前已经有一个 `USER_FETCH_REQUESTED` action 在处理中，</span><br><span class=\"line\">  那么处理中的 action 会被取消，只会执行当前的</span><br><span class=\"line\">*/</span><br><span class=\"line\">function* mySaga() &#123;</span><br><span class=\"line\">  yield* takeLatest(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了能跑起 Saga，我们需要使用 redux-saga 中间件将 Saga 与 Redux Store 建立连接。</p>\n<h5 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;</span><br><span class=\"line\">import createSagaMiddleware from &apos;redux-saga&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import reducer from &apos;./reducers&apos;</span><br><span class=\"line\">import mySaga from &apos;./sagas&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const sagaMiddleware = createSagaMiddleware(mySaga)</span><br><span class=\"line\">const store = createStore(</span><br><span class=\"line\">  reducer,</span><br><span class=\"line\">  applyMiddleware(sagaMiddleware)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// render the application</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/superRaytin/redux-saga-in-chinese\" target=\"_blank\" rel=\"noopener\">Redux-saga 中文文档</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"redux-saga的入门基础\"><a href=\"#redux-saga的入门基础\" class=\"headerlink\" title=\"redux-saga的入门基础\"></a>redux-saga的入门基础</h2><p>redux-saga 是一个用于管理 Redux 应用异步操作（Side Effects。译注：直译成 “副作用” 不太通顺，所以这里译为 “异步操作” 更好理解）的中间件（又称异步 action）。 redux-saga 通过创建 Sagas 将所有的异步操作逻辑收集在一个地方集中处理，可以用来代替 redux-thunk 中间件。</p>\n<h5 id=\"这意味着应用的逻辑会存在两个地方：\"><a href=\"#这意味着应用的逻辑会存在两个地方：\" class=\"headerlink\" title=\"这意味着应用的逻辑会存在两个地方：\"></a>这意味着应用的逻辑会存在两个地方：</h5><ol>\n<li><p>Reducers 负责处理 action 的 state 更新。</p>\n</li>\n<li><p>Sagas 负责协调那些复杂或异步的操作。</p>\n</li>\n</ol>\n<p>Sagas 是通过 Generator 函数来创建的。如果你还不熟悉 Generator，可以在这里找到 <a href=\"http://superraytin.github.io/redux-saga-in-chinese/docs/ExternalResources.html\" target=\"_blank\" rel=\"noopener\">一些有用的链接</a>。</p>","more":"<p>Sagas 不同于 Thunks，Thunks 是在 action 被创建时调用，而 Sagas 只会在应用启动时调用（但初始启动的 Sagas 可能会动态调用其他 Sagas）。 Sagas 可以被看作是在后台运行的进程。Sagas 监听发起的 action，然后决定基于这个 action 来做什么：是发起一个异步调用（比如一个 Ajax 请求），还是发起其他的 action 到 Store，甚至是调用其他的 Sagas。</p>\n<p>在 redux-saga 的世界里，所有的任务都通用 yield Effects 来完成（译注：Effect 可以看作是 redux-saga 的任务单元）。Effects 都是简单的 Javascript 对象，包含了要被 Saga middleware 执行的信息（打个比方，你可以看到 Redux action 其实是一个个包含执行信息的对象）。 redux-saga 为各项任务提供了各种 Effect 创建器，比如调用一个异步函数，发起一个 action 到 Store，启动一个后台任务或者等待一个满足某些条件的未来的 action。</p>\n<p>因为使用了 Generator，redux-saga 让你可以用同步的方式写异步代码。就像你可以使用 async/await 函数所能做的一样。但 Generator 可以让你做一些 async 函数做不到的事情。</p>\n<p>事实上 Sagas yield 普通对象的方式让你能容易地测试 Generator 里所有的业务逻辑，可以通过简单地迭代 yield 过的对象进行简单的单元测试。</p>\n<p>此外，redux-saga 启动的任务可以在任何时候通过手动取消，也可以把任务和其他的 Effects 放到 race 方法里以自动取消。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save redux-saga</span><br></pre></td></tr></table></figure>\n<p>你也可以直接在 HTML 页面中通过 <code>&amp;lt;script&amp;gt</code>; 标签使用提供的 UMD 构建版本，看 <a href=\"https://github.com/superRaytin/redux-saga-in-chinese#using-umd-build-in-the-browser\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h5 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h5><p>假设我们有一个 UI 界面，在单击按钮时从远程服务器获取一些用户数据（为简单起见，我们只列出 action 触发代码）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UserComponent extends React.Component &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  onSomeButtonClicked() &#123;</span><br><span class=\"line\">    const &#123; userId, dispatch &#125; = this.props</span><br><span class=\"line\">    dispatch(&#123;type: &apos;USER_FETCH_REQUESTED&apos;, payload: &#123;userId&#125;&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个组件发起一个普通对象格式的 action 到 Store。我们将创建一个 Saga 来监听所有的 <code>USER_FETCH_REQUESTED</code> action，并触发一个 API 调用以获取用户数据。</p>\n<h6 id=\"sagas-js\"><a href=\"#sagas-js\" class=\"headerlink\" title=\"sagas.js\"></a>sagas.js</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; takeEvery, takeLatest &#125; from &apos;redux-saga&apos;</span><br><span class=\"line\">import &#123; call, put &#125; from &apos;redux-saga/effects&apos;</span><br><span class=\"line\">import Api from &apos;...&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// workder Saga : 将在 USER_FETCH_REQUESTED action 被发起时调用</span><br><span class=\"line\">function* fetchUser(action) &#123;</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">      const user = yield call(Api.fetchUser, action.payload.userId);</span><br><span class=\"line\">      yield put(&#123;type: &quot;USER_FETCH_SUCCEEDED&quot;, user: user&#125;);</span><br><span class=\"line\">   &#125; catch (e) &#123;</span><br><span class=\"line\">      yield put(&#123;type: &quot;USER_FETCH_FAILED&quot;, message: e.message&#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">  在每个 `USER_FETCH_REQUESTED` action 被发起时调用 fetchUser</span><br><span class=\"line\">  允许并发（译注：即同时处理多个相同的 action）</span><br><span class=\"line\">*/</span><br><span class=\"line\">function* mySaga() &#123;</span><br><span class=\"line\">  yield* takeEvery(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">  也可以使用 takeLatest</span><br><span class=\"line\"></span><br><span class=\"line\">  不允许并发，发起一个 `USER_FETCH_REQUESTED` action 时，</span><br><span class=\"line\">  如果在这之前已经有一个 `USER_FETCH_REQUESTED` action 在处理中，</span><br><span class=\"line\">  那么处理中的 action 会被取消，只会执行当前的</span><br><span class=\"line\">*/</span><br><span class=\"line\">function* mySaga() &#123;</span><br><span class=\"line\">  yield* takeLatest(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了能跑起 Saga，我们需要使用 redux-saga 中间件将 Saga 与 Redux Store 建立连接。</p>\n<h5 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;</span><br><span class=\"line\">import createSagaMiddleware from &apos;redux-saga&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import reducer from &apos;./reducers&apos;</span><br><span class=\"line\">import mySaga from &apos;./sagas&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const sagaMiddleware = createSagaMiddleware(mySaga)</span><br><span class=\"line\">const store = createStore(</span><br><span class=\"line\">  reducer,</span><br><span class=\"line\">  applyMiddleware(sagaMiddleware)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// render the application</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/superRaytin/redux-saga-in-chinese\" target=\"_blank\" rel=\"noopener\">Redux-saga 中文文档</a></p>"}],"PostAsset":[{"_id":"source/_posts/Webpack从入门到上手/开启本地服务器.png","slug":"开启本地服务器.png","post":"cjl33fhkk000zlxnd4fvkeyie","modified":1,"renderable":0},{"_id":"source/_posts/Vim命令笔记/vim快捷操作.png","slug":"vim快捷操作.png","post":"cjl33fhkh000vlxnde0z6na7q","modified":1,"renderable":0},{"_id":"source/_posts/前端常见跨域解决方案/常见跨域场景.png","post":"cjl33fhmm001hlxndjc8lw6fv","slug":"常见跨域场景.png","modified":1,"renderable":1},{"_id":"source/_posts/exports、module-exports-和-export、export-default-之间的关系与区别/内存结构示意图.png","post":"cjl33fhmd0018lxnd57xtm8ix","slug":"内存结构示意图.png","modified":1,"renderable":1},{"_id":"source/_posts/dva的几个核心概念/dvaIntroduce.jpg","slug":"dvaIntroduce.jpg","post":"cjl33fhmt001qlxnd8s42tcmm","modified":1,"renderable":0},{"_id":"source/_posts/dva的几个核心概念/dvaeightconcepts.png","post":"cjl33fhmt001qlxnd8s42tcmm","slug":"dvaeightconcepts.png","modified":1,"renderable":1},{"_id":"source/_posts/Xcode无证书打包/1.png","post":"cjl33fhki000wlxndnl524ytj","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Xcode无证书打包/2.png","post":"cjl33fhki000wlxndnl524ytj","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Xcode无证书打包/3.png","post":"cjl33fhki000wlxndnl524ytj","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Xcode无证书打包/4.png","post":"cjl33fhki000wlxndnl524ytj","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Xcode无证书打包/5.png","post":"cjl33fhki000wlxndnl524ytj","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/Grunt和Gulp的工作流程.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"Grunt和Gulp的工作流程.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/Webpack工作方式.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"Webpack工作方式.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/build文件夹.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"build文件夹.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/htmlResult1.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"htmlResult1.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/localhost-8080.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"localhost-8080.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/使用npm start 打包代码.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"使用npm start 打包代码.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/使用命令行打包.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"使用命令行打包.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/压缩后的代码.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"压缩后的代码.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/带hash值的js名.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"带hash值的js名.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/应用了css module后的样式.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"应用了css module后的样式.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/版权所有.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"版权所有.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/配合配置文件进行打包.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"配合配置文件进行打包.png","modified":1,"renderable":1},{"_id":"source/_posts/Webpack从入门到上手/项目结构.png","post":"cjl33fhkk000zlxnd4fvkeyie","slug":"项目结构.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjl33fhd20000lxnd0apojh45","category_id":"cjl33fhdg0003lxnd0wwdo8nl","_id":"cjl33fhe3000dlxndnk6pmd8y"},{"post_id":"cjl33fhdc0002lxndqf1xnx78","category_id":"cjl33fhdg0003lxnd0wwdo8nl","_id":"cjl33fhe4000glxndv6de2yf4"},{"post_id":"cjl33fhdl0005lxndqmsx4wzi","category_id":"cjl33fhe2000clxndboctagz8","_id":"cjl33fhe6000llxndxzvfvf2l"},{"post_id":"cjl33fhdr0006lxndespjrplc","category_id":"cjl33fhe2000clxndboctagz8","_id":"cjl33fhe7000plxnd2omvvwy7"},{"post_id":"cjl33fhdv0007lxndkyo85ub4","category_id":"cjl33fhe2000clxndboctagz8","_id":"cjl33fhe8000slxndktyw2u9f"},{"post_id":"cjl33fhe0000blxndczdvcg22","category_id":"cjl33fhe7000olxnd18pwm1xu","_id":"cjl33fhe8000ulxnd7wedx3pa"},{"post_id":"cjl33fhki000wlxndnl524ytj","category_id":"cjl33fhe2000clxndboctagz8","_id":"cjl33fhkl0011lxndjxakozg6"},{"post_id":"cjl33fhkh000vlxnde0z6na7q","category_id":"cjl33fhkj000xlxnddzrm6sqk","_id":"cjl33fhkm0015lxndrw96afzp"},{"post_id":"cjl33fhkk000zlxnd4fvkeyie","category_id":"cjl33fhkl0012lxndw2aknobo","_id":"cjl33fhkn0017lxndrl9zxo6b"},{"post_id":"cjl33fhmd0018lxnd57xtm8ix","category_id":"cjl33fhmi001clxndvbgu6qxd","_id":"cjl33fhms001nlxndhul4v3ka"},{"post_id":"cjl33fhmm001hlxndjc8lw6fv","category_id":"cjl33fhdg0003lxnd0wwdo8nl","_id":"cjl33fhmu001rlxnd25ib7mf8"},{"post_id":"cjl33fhmp001llxnd73w6tuhq","category_id":"cjl33fhdg0003lxnd0wwdo8nl","_id":"cjl33fhmw001ulxnd9in0s4k9"},{"post_id":"cjl33fhmg001alxndtgbky26w","category_id":"cjl33fhmo001ilxndbpep7nuz","_id":"cjl33fhmz001ylxndt2dbnq5u"},{"post_id":"cjl33fhmt001qlxnd8s42tcmm","category_id":"cjl33fhmt001olxndmyz3q4rb","_id":"cjl33fhn00020lxndlmu0qrm4"},{"post_id":"cjl33fhmi001elxndgv4ka8yq","category_id":"cjl33fhmt001olxndmyz3q4rb","_id":"cjl33fhn60023lxnddl29avdo"},{"post_id":"cjl33fhmv001tlxndueruv5iu","category_id":"cjl33fhmt001olxndmyz3q4rb","_id":"cjl33fhn60025lxndhlzqzeia"},{"post_id":"cjl33fhmk001glxnd28nffvsm","category_id":"cjl33fhmt001olxndmyz3q4rb","_id":"cjl33fhn70026lxndh0jpj0ft"},{"post_id":"cjl33fhmr001mlxndqxiw4dmh","category_id":"cjl33fhn20021lxndlon4uca8","_id":"cjl33fhn70029lxndn0p51kdo"}],"PostTag":[{"post_id":"cjl33fhd20000lxnd0apojh45","tag_id":"cjl33fhdk0004lxndbxylwql1","_id":"cjl33fhe0000alxndbgsv7mma"},{"post_id":"cjl33fhdc0002lxndqf1xnx78","tag_id":"cjl33fhdk0004lxndbxylwql1","_id":"cjl33fhe3000flxndu9xm50nd"},{"post_id":"cjl33fhdl0005lxndqmsx4wzi","tag_id":"cjl33fhe3000elxnd1oprrcrf","_id":"cjl33fhe5000jlxndsle3l3rf"},{"post_id":"cjl33fhdr0006lxndespjrplc","tag_id":"cjl33fhe3000elxnd1oprrcrf","_id":"cjl33fhe6000nlxnd0inkmkax"},{"post_id":"cjl33fhdv0007lxndkyo85ub4","tag_id":"cjl33fhe6000mlxnd15avikqc","_id":"cjl33fhe7000rlxnd7osqxzdl"},{"post_id":"cjl33fhe0000blxndczdvcg22","tag_id":"cjl33fhe7000qlxndu8qjz7tv","_id":"cjl33fhe8000tlxndw05bwd26"},{"post_id":"cjl33fhki000wlxndnl524ytj","tag_id":"cjl33fhe3000elxnd1oprrcrf","_id":"cjl33fhkl0010lxnd9fqjoj93"},{"post_id":"cjl33fhkh000vlxnde0z6na7q","tag_id":"cjl33fhkk000ylxndp3o9m8a9","_id":"cjl33fhkm0014lxnd1fn3cmtz"},{"post_id":"cjl33fhkk000zlxnd4fvkeyie","tag_id":"cjl33fhkm0013lxnd6i7ji2z6","_id":"cjl33fhkm0016lxnd63vlo8mh"},{"post_id":"cjl33fhmd0018lxnd57xtm8ix","tag_id":"cjl33fhmi001dlxnd6c1uafhh","_id":"cjl33fhmp001klxndxk7jtqeo"},{"post_id":"cjl33fhmg001alxndtgbky26w","tag_id":"cjl33fhmo001jlxndfh64axv0","_id":"cjl33fhmu001slxndbg84dq1a"},{"post_id":"cjl33fhmt001qlxnd8s42tcmm","tag_id":"cjl33fhmt001plxndxscfsbbt","_id":"cjl33fhmx001xlxndlopk11kn"},{"post_id":"cjl33fhmi001elxndgv4ka8yq","tag_id":"cjl33fhmt001plxndxscfsbbt","_id":"cjl33fhn0001zlxnd6ojn9ig4"},{"post_id":"cjl33fhmk001glxnd28nffvsm","tag_id":"cjl33fhmx001wlxndw8ul1acu","_id":"cjl33fhn60024lxnd1wdblbva"},{"post_id":"cjl33fhmm001hlxndjc8lw6fv","tag_id":"cjl33fhn50022lxnd4ui2kt00","_id":"cjl33fhn70028lxndb6rqkcnr"},{"post_id":"cjl33fhmp001llxnd73w6tuhq","tag_id":"cjl33fhn70027lxnd83jtmslf","_id":"cjl33fhn7002blxndl0dpx6eh"},{"post_id":"cjl33fhmr001mlxndqxiw4dmh","tag_id":"cjl33fhn7002alxnd0jd31yif","_id":"cjl33fhn8002dlxndob5ex804"},{"post_id":"cjl33fhmv001tlxndueruv5iu","tag_id":"cjl33fhn8002clxndkavwvh21","_id":"cjl33fhn8002elxndny9xyff4"}],"Tag":[{"name":"CSS","_id":"cjl33fhdk0004lxndbxylwql1"},{"name":"爬坑","_id":"cjl33fhe3000elxnd1oprrcrf"},{"name":"React Native","_id":"cjl33fhe6000mlxnd15avikqc"},{"name":"Linux","_id":"cjl33fhe7000qlxndu8qjz7tv"},{"name":"Vim","_id":"cjl33fhkk000ylxndp3o9m8a9"},{"name":"Webpack","_id":"cjl33fhkm0013lxnd6i7ji2z6"},{"name":"模块化","_id":"cjl33fhmi001dlxnd6c1uafhh"},{"name":"Hexo","_id":"cjl33fhmo001jlxndfh64axv0"},{"name":"Dva","_id":"cjl33fhmt001plxndxscfsbbt"},{"name":"PropTypes","_id":"cjl33fhmx001wlxndw8ul1acu"},{"name":"跨域","_id":"cjl33fhn50022lxnd4ui2kt00"},{"name":"JavaScript","_id":"cjl33fhn70027lxnd83jtmslf"},{"name":"ES6","_id":"cjl33fhn7002alxnd0jd31yif"},{"name":"Redux","_id":"cjl33fhn8002clxndkavwvh21"}]}}